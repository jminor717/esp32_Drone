
STM32_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005668  08005668  00015668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005688  08005688  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005690  08005690  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  20000010  080056a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000638  080056a8  00020638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001329e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c76  00000000  00000000  000332de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8f  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001464a  00000000  00000000  0004ffdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aee9  00000000  00000000  00064629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004704  00000000  00000000  000ff568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005650 	.word	0x08005650

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005650 	.word	0x08005650

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f005 f8aa 	bl	8005640 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ec:	4b4f      	ldr	r3, [pc, #316]	; (800062c <MX_ADC1_Init+0x160>)
 80004ee:	4a50      	ldr	r2, [pc, #320]	; (8000630 <MX_ADC1_Init+0x164>)
 80004f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f2:	4b4e      	ldr	r3, [pc, #312]	; (800062c <MX_ADC1_Init+0x160>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f8:	4b4c      	ldr	r3, [pc, #304]	; (800062c <MX_ADC1_Init+0x160>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004fe:	4b4b      	ldr	r3, [pc, #300]	; (800062c <MX_ADC1_Init+0x160>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b49      	ldr	r3, [pc, #292]	; (800062c <MX_ADC1_Init+0x160>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800050a:	4b48      	ldr	r3, [pc, #288]	; (800062c <MX_ADC1_Init+0x160>)
 800050c:	2201      	movs	r2, #1
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000512:	4b46      	ldr	r3, [pc, #280]	; (800062c <MX_ADC1_Init+0x160>)
 8000514:	2201      	movs	r2, #1
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b44      	ldr	r3, [pc, #272]	; (800062c <MX_ADC1_Init+0x160>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_ADC1_Init+0x160>)
 8000520:	4a44      	ldr	r2, [pc, #272]	; (8000634 <MX_ADC1_Init+0x168>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b41      	ldr	r3, [pc, #260]	; (800062c <MX_ADC1_Init+0x160>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_ADC1_Init+0x160>)
 800052c:	2203      	movs	r2, #3
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000530:	4b3e      	ldr	r3, [pc, #248]	; (800062c <MX_ADC1_Init+0x160>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000538:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_ADC1_Init+0x160>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053e:	483b      	ldr	r0, [pc, #236]	; (800062c <MX_ADC1_Init+0x160>)
 8000540:	f001 fbea 	bl	8001d18 <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800054a:	f000 fc47 	bl	8000ddc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800054e:	2305      	movs	r3, #5
 8000550:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	4619      	mov	r1, r3
 8000560:	4832      	ldr	r0, [pc, #200]	; (800062c <MX_ADC1_Init+0x160>)
 8000562:	f001 fd69 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800056c:	f000 fc36 	bl	8000ddc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000570:	2306      	movs	r3, #6
 8000572:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4619      	mov	r1, r3
 800057e:	482b      	ldr	r0, [pc, #172]	; (800062c <MX_ADC1_Init+0x160>)
 8000580:	f001 fd5a 	bl	8002038 <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800058a:	f000 fc27 	bl	8000ddc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800058e:	2307      	movs	r3, #7
 8000590:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8000592:	2303      	movs	r3, #3
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4619      	mov	r1, r3
 800059c:	4823      	ldr	r0, [pc, #140]	; (800062c <MX_ADC1_Init+0x160>)
 800059e:	f001 fd4b 	bl	8002038 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005a8:	f000 fc18 	bl	8000ddc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80005ac:	2305      	movs	r3, #5
 80005ae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0x16c>)
 80005c2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <MX_ADC1_Init+0x160>)
 80005d6:	f001 ff4d 	bl	8002474 <HAL_ADCEx_InjectedConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80005e0:	f000 fbfc 	bl	8000ddc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80005e4:	2306      	movs	r3, #6
 80005e6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 3;
 80005ec:	2303      	movs	r3, #3
 80005ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x160>)
 80005f6:	f001 ff3d 	bl	8002474 <HAL_ADCEx_InjectedConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000600:	f000 fbec 	bl	8000ddc <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000604:	2307      	movs	r3, #7
 8000606:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 6;
 800060c:	2306      	movs	r3, #6
 800060e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x160>)
 8000616:	f001 ff2d 	bl	8002474 <HAL_ADCEx_InjectedConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000620:	f000 fbdc 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000148 	.word	0x20000148
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001
 8000638:	000f0001 	.word	0x000f0001

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <HAL_ADC_MspInit+0xdc>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d157      	bne.n	800070e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <HAL_ADC_MspInit+0xe0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN3_Pin|AIN2_Pin;
 8000696:	23e0      	movs	r3, #224	; 0xe0
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <HAL_ADC_MspInit+0xe4>)
 80006aa:	f002 fd1d 	bl	80030e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xec>)
 80006b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006f4:	f002 f966 	bl	80029c4 <HAL_DMA_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006fe:	f000 fb6d 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 8000706:	639a      	str	r2, [r3, #56]	; 0x38
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	; 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	20000190 	.word	0x20000190
 8000728:	40026410 	.word	0x40026410

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_DMA_Init+0xb8>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200b      	movs	r0, #11
 8000770:	f002 f8f1 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000774:	200b      	movs	r0, #11
 8000776:	f002 f90a 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200c      	movs	r0, #12
 8000780:	f002 f8e9 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000784:	200c      	movs	r0, #12
 8000786:	f002 f902 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200d      	movs	r0, #13
 8000790:	f002 f8e1 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000794:	200d      	movs	r0, #13
 8000796:	f002 f8fa 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200f      	movs	r0, #15
 80007a0:	f002 f8d9 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a4:	200f      	movs	r0, #15
 80007a6:	f002 f8f2 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2038      	movs	r0, #56	; 0x38
 80007b0:	f002 f8d1 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b4:	2038      	movs	r0, #56	; 0x38
 80007b6:	f002 f8ea 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	203a      	movs	r0, #58	; 0x3a
 80007c0:	f002 f8c9 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007c4:	203a      	movs	r0, #58	; 0x3a
 80007c6:	f002 f8e2 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	203b      	movs	r0, #59	; 0x3b
 80007d0:	f002 f8c1 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007d4:	203b      	movs	r0, #59	; 0x3b
 80007d6:	f002 f8da 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_GPIO_Init+0xe4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xe4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0xe4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xe8>)
 8000876:	f002 fdbb 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0xe8>)
 8000894:	f002 fc28 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_SPI_MODE_Pin;
 8000898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_GPIO_Init+0xec>)
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP32_SPI_MODE_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_GPIO_Init+0xf0>)
 80008ae:	f002 fc1b 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f002 f84d 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008bc:	2028      	movs	r0, #40	; 0x28
 80008be:	f002 f866 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	10310000 	.word	0x10310000
 80008d8:	40020400 	.word	0x40020400

080008dc <calculate_cksum>:
#include <string.h>

#define CRTP_MAX_DATA_SIZE 30

static uint8_t calculate_cksum(uint8_t *data, size_t len)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    unsigned char *c = data;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	617b      	str	r3, [r7, #20]
    int i;
    unsigned char cksum = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < len; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	e009      	b.n	8000908 <calculate_cksum+0x2c>
    {
        cksum += *(c++);
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	617a      	str	r2, [r7, #20]
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	4413      	add	r3, r2
 8000900:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < len; i++)
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3301      	adds	r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	683a      	ldr	r2, [r7, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d8f1      	bhi.n	80008f4 <calculate_cksum+0x18>
    }

    return cksum;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
}
 8000912:	4618      	mov	r0, r3
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <CustomTickHandler>:
    }
    return (x - in_min) * (out_max - out_min) / divisor + out_min;
}

void CustomTickHandler(uint32_t tick)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    DSHOT_MOTOR_REFRESH = true;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <CustomTickHandler+0x88>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
    if(uwTick % HUMAN_READABLE_SPI){
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <CustomTickHandler+0x8c>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <CustomTickHandler+0x90>)
 8000934:	fba3 1302 	umull	r1, r3, r3, r2
 8000938:	095b      	lsrs	r3, r3, #5
 800093a:	2164      	movs	r1, #100	; 0x64
 800093c:	fb01 f303 	mul.w	r3, r1, r3
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <CustomTickHandler+0x2c>
    	SPI_REFRESH = true;
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <CustomTickHandler+0x94>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
    }
    if (uwTick + (ServoIndex * SERVO_PID_OFFSET) % SERVO_PID_PERIOD == 0)
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <CustomTickHandler+0x98>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	005a      	lsls	r2, r3, #1
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <CustomTickHandler+0x9c>)
 8000954:	fb83 1302 	smull	r1, r3, r3, r2
 8000958:	1099      	asrs	r1, r3, #2
 800095a:	17d3      	asrs	r3, r2, #31
 800095c:	1ac9      	subs	r1, r1, r3
 800095e:	460b      	mov	r3, r1
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	1ad1      	subs	r1, r2, r3
 8000968:	460a      	mov	r2, r1
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <CustomTickHandler+0x8c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d113      	bne.n	800099c <CustomTickHandler+0x7c>
    {
        SERVO_REFRESH[ServoIndex] = true;
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <CustomTickHandler+0x98>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <CustomTickHandler+0xa0>)
 800097c:	2101      	movs	r1, #1
 800097e:	5499      	strb	r1, [r3, r2]
        if (ServoIndex < SERVO_NUM_DIVISIONS - 1)
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <CustomTickHandler+0x98>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d806      	bhi.n	8000996 <CustomTickHandler+0x76>
        {
            ServoIndex++;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <CustomTickHandler+0x98>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <CustomTickHandler+0x98>)
 8000992:	701a      	strb	r2, [r3, #0]
        else
        {
            ServoIndex = 0;
        }
    }
}
 8000994:	e002      	b.n	800099c <CustomTickHandler+0x7c>
            ServoIndex = 0;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <CustomTickHandler+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	2000002d 	.word	0x2000002d
 80009ac:	20000634 	.word	0x20000634
 80009b0:	51eb851f 	.word	0x51eb851f
 80009b4:	2000002c 	.word	0x2000002c
 80009b8:	20000138 	.word	0x20000138
 80009bc:	66666667 	.word	0x66666667
 80009c0:	20000030 	.word	0x20000030

080009c4 <HAL_SPI_TxRxCpltCallback>:
    my_motor_value[2] = x;
    my_motor_value[3] = x;
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

    memcpy(TX_Buffer, RX_Buffer, previousSpiSize);
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <HAL_SPI_TxRxCpltCallback+0x30>)
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <HAL_SPI_TxRxCpltCallback+0x34>)
 80009d6:	f004 fe25 	bl	8005624 <memcpy>

    SpiRxCplt = true;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_SPI_TxRxCpltCallback+0x38>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    SpiError = false;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000002 	.word	0x20000002
 80009f4:	20000038 	.word	0x20000038
 80009f8:	200000b8 	.word	0x200000b8
 80009fc:	20000141 	.word	0x20000141
 8000a00:	20000142 	.word	0x20000142

08000a04 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    // nextSpiSize = defaultSpiSize;
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_SPI_ErrorCallback+0x30>)
 8000a12:	f002 fd06 	bl	8003422 <HAL_GPIO_TogglePin>

    SpiRxCplt = true;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_SPI_ErrorCallback+0x34>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
    SpiErrorCode = hspi->ErrorCode;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_SPI_ErrorCallback+0x38>)
 8000a22:	6013      	str	r3, [r2, #0]
    SpiError = true;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_SPI_ErrorCallback+0x3c>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020800 	.word	0x40020800
 8000a38:	20000141 	.word	0x20000141
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	20000142 	.word	0x20000142

08000a44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	if(pin == ESP32_SPI_MODE_Pin){

	}
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint16_t itter = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	81fb      	strh	r3, [r7, #14]
    uint32_t badTransactions = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f001 f8e3 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f955 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f7ff feb9 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f7ff fe59 	bl	800072c <MX_DMA_Init>
  MX_SPI1_Init();
 8000a7a:	f000 f9b5 	bl	8000de8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000a7e:	f001 f83d 	bl	8001afc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000a82:	f000 fb8b 	bl	800119c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a86:	f000 fc99 	bl	80013bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a8a:	f000 fcf1 	bl	8001470 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a8e:	f000 fd5f 	bl	8001550 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000a92:	f7ff fd1b 	bl	80004cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a96:	f000 fc39 	bl	800130c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	488e      	ldr	r0, [pc, #568]	; (8000cd8 <main+0x27c>)
 8000aa0:	f002 fcbf 	bl	8003422 <HAL_GPIO_TogglePin>
    TX_Buffer[0] = 0;
 8000aa4:	4b8d      	ldr	r3, [pc, #564]	; (8000cdc <main+0x280>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
    TX_Buffer[1] = 1;
 8000aaa:	4b8c      	ldr	r3, [pc, #560]	; (8000cdc <main+0x280>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	705a      	strb	r2, [r3, #1]
    TX_Buffer[2] = 2;
 8000ab0:	4b8a      	ldr	r3, [pc, #552]	; (8000cdc <main+0x280>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	709a      	strb	r2, [r3, #2]
    TX_Buffer[3] = 3;
 8000ab6:	4b89      	ldr	r3, [pc, #548]	; (8000cdc <main+0x280>)
 8000ab8:	2203      	movs	r2, #3
 8000aba:	70da      	strb	r2, [r3, #3]
    TX_Buffer[4] = 4;
 8000abc:	4b87      	ldr	r3, [pc, #540]	; (8000cdc <main+0x280>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	711a      	strb	r2, [r3, #4]
    TX_Buffer[5] = 5;
 8000ac2:	4b86      	ldr	r3, [pc, #536]	; (8000cdc <main+0x280>)
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	715a      	strb	r2, [r3, #5]
    TX_Buffer[6] = 6;
 8000ac8:	4b84      	ldr	r3, [pc, #528]	; (8000cdc <main+0x280>)
 8000aca:	2206      	movs	r2, #6
 8000acc:	719a      	strb	r2, [r3, #6]
    TX_Buffer[7] = 7;
 8000ace:	4b83      	ldr	r3, [pc, #524]	; (8000cdc <main+0x280>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	71da      	strb	r2, [r3, #7]
    TX_Buffer[8] = 8;
 8000ad4:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <main+0x280>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	721a      	strb	r2, [r3, #8]
    // HAL_SPI_RegisterCallback();

    HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
 8000ada:	4b81      	ldr	r3, [pc, #516]	; (8000ce0 <main+0x284>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	4a80      	ldr	r2, [pc, #512]	; (8000ce4 <main+0x288>)
 8000ae2:	497e      	ldr	r1, [pc, #504]	; (8000cdc <main+0x280>)
 8000ae4:	4880      	ldr	r0, [pc, #512]	; (8000ce8 <main+0x28c>)
 8000ae6:	f003 f9a1 	bl	8003e2c <HAL_SPI_TransmitReceive_DMA>
    // HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
    // HAL_SPI_TransmitReceive_IT(&hspi1, TX_Buffer, RX_Buffer, BUFFER_SIZE);
    //  dshot_init(DSHOT600);
    uint8_t crcIn = 0, crcOut = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	2300      	movs	r3, #0
 8000af0:	71bb      	strb	r3, [r7, #6]
    bool switchc = false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	717b      	strb	r3, [r7, #5]
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //
        if (SpiRxCplt)
 8000af6:	4b7d      	ldr	r3, [pc, #500]	; (8000cec <main+0x290>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d07b      	beq.n	8000bf8 <main+0x19c>
        {
            SpiRxCplt = false;
 8000b00:	4b7a      	ldr	r3, [pc, #488]	; (8000cec <main+0x290>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
            SpiAvalable = true;
 8000b06:	4b7a      	ldr	r3, [pc, #488]	; (8000cf0 <main+0x294>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
            itter++;
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	81fb      	strh	r3, [r7, #14]
            crcIn = RX_Buffer[0];
 8000b12:	4b74      	ldr	r3, [pc, #464]	; (8000ce4 <main+0x288>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
            crcOut = calculate_cksum(RX_Buffer + 1, 4 - 1);
 8000b18:	4b76      	ldr	r3, [pc, #472]	; (8000cf4 <main+0x298>)
 8000b1a:	2103      	movs	r1, #3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fedd 	bl	80008dc <calculate_cksum>
 8000b22:	4603      	mov	r3, r0
 8000b24:	71bb      	strb	r3, [r7, #6]
            if (crcOut == crcIn && RX_Buffer[1] != 0)
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d122      	bne.n	8000b74 <main+0x118>
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <main+0x288>)
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01e      	beq.n	8000b74 <main+0x118>
            {
            	memcpy(&rxHeader, RX_Buffer, sizeof(SPI_ESP_PACKET_HEADER));
 8000b36:	4a6b      	ldr	r2, [pc, #428]	; (8000ce4 <main+0x288>)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b3e:	6018      	str	r0, [r3, #0]
 8000b40:	3304      	adds	r3, #4
 8000b42:	7019      	strb	r1, [r3, #0]
            	if(rxHeader.radioSendData == 1){
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <main+0xfa>
            		ESP32HasBus = true;
 8000b50:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <main+0x29c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
            	}

                nextSpiSize++;
 8000b56:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <main+0x284>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <main+0x284>)
 8000b60:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000b62:	4b5f      	ldr	r3, [pc, #380]	; (8000ce0 <main+0x284>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b1c      	cmp	r3, #28
 8000b68:	d90d      	bls.n	8000b86 <main+0x12a>
                {
                    nextSpiSize = defaultSpiSize;
 8000b6a:	4b64      	ldr	r3, [pc, #400]	; (8000cfc <main+0x2a0>)
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <main+0x284>)
 8000b70:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000b72:	e008      	b.n	8000b86 <main+0x12a>
                }
            }
            else
            {
                HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	4857      	ldr	r0, [pc, #348]	; (8000cd8 <main+0x27c>)
 8000b7a:	f002 fc52 	bl	8003422 <HAL_GPIO_TogglePin>
                nextSpiSize = defaultSpiSize;
 8000b7e:	4b5f      	ldr	r3, [pc, #380]	; (8000cfc <main+0x2a0>)
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <main+0x284>)
 8000b84:	701a      	strb	r2, [r3, #0]
            }
            if (crcOut != crcIn)
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d002      	beq.n	8000b94 <main+0x138>
            {
                badTransactions++;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
            }

            if (switchc)
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d010      	beq.n	8000bbc <main+0x160>
            {
                SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_16);
 8000b9a:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <main+0x28c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <main+0x28c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <main+0x28c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <main+0x28c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0218 	orr.w	r2, r2, #24
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e00f      	b.n	8000bdc <main+0x180>
            }
            else
            {
                SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_128);
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <main+0x28c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <main+0x28c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <main+0x28c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <main+0x28c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000bda:	601a      	str	r2, [r3, #0]
            }

            switchc = !switchc;
 8000bdc:	797b      	ldrb	r3, [r7, #5]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf14      	ite	ne
 8000be2:	2301      	movne	r3, #1
 8000be4:	2300      	moveq	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f083 0301 	eor.w	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	717b      	strb	r3, [r7, #5]
 8000bf0:	797b      	ldrb	r3, [r7, #5]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	717b      	strb	r3, [r7, #5]
        }

        if (SpiError)
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <main+0x2a4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00f      	beq.n	8000c22 <main+0x1c6>
        {
            SpiError = false;
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <main+0x2a4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
            // HAL_SPI_MspDeInit(&hspi1);
            //   MX_SPI1_Init();
            TX_Buffer[5] = (SpiRxCplt & 0xff00) >> 8;
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <main+0x290>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	121b      	asrs	r3, r3, #8
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <main+0x280>)
 8000c14:	715a      	strb	r2, [r3, #5]
            TX_Buffer[6] = (SpiRxCplt & 0x00ff);
 8000c16:	4b35      	ldr	r3, [pc, #212]	; (8000cec <main+0x290>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <main+0x280>)
 8000c20:	719a      	strb	r2, [r3, #6]
            // HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
        }

        if (SPI_REFRESH && SpiAvalable && !ESP32HasBus)
 8000c22:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <main+0x2a8>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d03f      	beq.n	8000caa <main+0x24e>
 8000c2a:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <main+0x294>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d03b      	beq.n	8000caa <main+0x24e>
 8000c32:	4b31      	ldr	r3, [pc, #196]	; (8000cf8 <main+0x29c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d034      	beq.n	8000caa <main+0x24e>
        {
            SPI_REFRESH = false;
 8000c40:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <main+0x2a8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
            SpiAvalable = false;
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <main+0x294>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
            TX_Buffer[9] = crcOut;
 8000c4c:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <main+0x280>)
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	7253      	strb	r3, [r2, #9]
            TX_Buffer[8] = crcIn;
 8000c52:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <main+0x280>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	7213      	strb	r3, [r2, #8]
            TX_Buffer[7] = (++itter & 0xff00) >> 8;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	81fb      	strh	r3, [r7, #14]
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	121b      	asrs	r3, r3, #8
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0x280>)
 8000c66:	71da      	strb	r2, [r3, #7]
            TX_Buffer[6] = itter & 0x00ff;
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <main+0x280>)
 8000c6e:	719a      	strb	r2, [r3, #6]
            TX_Buffer[2] = badTransactions;
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <main+0x280>)
 8000c76:	709a      	strb	r2, [r3, #2]
            TX_Buffer[1] = nextSpiSize;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <main+0x284>)
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <main+0x280>)
 8000c7e:	705a      	strb	r2, [r3, #1]
            TX_Buffer[0] = calculate_cksum(TX_Buffer + 1, 4 - 1);
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <main+0x2ac>)
 8000c82:	2103      	movs	r1, #3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe29 	bl	80008dc <calculate_cksum>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <main+0x280>)
 8000c90:	701a      	strb	r2, [r3, #0]

            HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, previousSpiSize);
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <main+0x2b0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <main+0x288>)
 8000c9a:	4910      	ldr	r1, [pc, #64]	; (8000cdc <main+0x280>)
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <main+0x28c>)
 8000c9e:	f003 f8c5 	bl	8003e2c <HAL_SPI_TransmitReceive_DMA>
            previousSpiSize = nextSpiSize;
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <main+0x284>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <main+0x2b0>)
 8000ca8:	701a      	strb	r2, [r3, #0]
        }

        if(DSHOT_MOTOR_REFRESH){
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <main+0x2b4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f43f af21 	beq.w	8000af6 <main+0x9a>
        	DSHOT_MOTOR_REFRESH = false;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <main+0x2b4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
        	//HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
			HAL_ADC_Start(&hadc1);
 8000cba:	4816      	ldr	r0, [pc, #88]	; (8000d14 <main+0x2b8>)
 8000cbc:	f001 f870 	bl	8001da0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000cc0:	2164      	movs	r1, #100	; 0x64
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <main+0x2b8>)
 8000cc4:	f001 f920 	bl	8001f08 <HAL_ADC_PollForConversion>
			AD_RES = HAL_ADC_GetValue(&hadc1);
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <main+0x2b8>)
 8000cca:	f001 f9a8 	bl	800201e <HAL_ADC_GetValue>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <main+0x2bc>)
 8000cd2:	6013      	str	r3, [r2, #0]
        if (SpiRxCplt)
 8000cd4:	e70f      	b.n	8000af6 <main+0x9a>
 8000cd6:	bf00      	nop
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	200000b8 	.word	0x200000b8
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000038 	.word	0x20000038
 8000ce8:	200001f0 	.word	0x200001f0
 8000cec:	20000141 	.word	0x20000141
 8000cf0:	20000003 	.word	0x20000003
 8000cf4:	20000039 	.word	0x20000039
 8000cf8:	20000140 	.word	0x20000140
 8000cfc:	20000001 	.word	0x20000001
 8000d00:	20000142 	.word	0x20000142
 8000d04:	2000002c 	.word	0x2000002c
 8000d08:	200000b9 	.word	0x200000b9
 8000d0c:	20000002 	.word	0x20000002
 8000d10:	2000002d 	.word	0x2000002d
 8000d14:	20000148 	.word	0x20000148
 8000d18:	20000144 	.word	0x20000144

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fc88 	bl	8005640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a22      	ldr	r2, [pc, #136]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <SystemClock_Config+0xb8>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <SystemClock_Config+0xbc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <SystemClock_Config+0xbc>)
 8000d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <SystemClock_Config+0xbc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d80:	2301      	movs	r3, #1
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d84:	2310      	movs	r3, #16
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0320 	add.w	r3, r7, #32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fb79 	bl	8003488 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d9c:	f000 f81e 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fddc 	bl	8003978 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dc6:	f000 f809 	bl	8000ddc <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <MX_SPI1_Init+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e1c:	2218      	movs	r2, #24
 8000e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e34:	220a      	movs	r2, #10
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_SPI1_Init+0x64>)
 8000e3a:	f002 ff6d 	bl	8003d18 <HAL_SPI_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e44:	f7ff ffca 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200001f0 	.word	0x200001f0
 8000e50:	40013000 	.word	0x40013000

08000e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a60      	ldr	r2, [pc, #384]	; (8000ff4 <HAL_SPI_MspInit+0x1a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	f040 80b9 	bne.w	8000fea <HAL_SPI_MspInit+0x196>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	4a5d      	ldr	r2, [pc, #372]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000e82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e86:	6453      	str	r3, [r2, #68]	; 0x44
 8000e88:	4b5b      	ldr	r3, [pc, #364]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b57      	ldr	r3, [pc, #348]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b54      	ldr	r3, [pc, #336]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <HAL_SPI_MspInit+0x1a4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000edc:	2305      	movs	r3, #5
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4845      	ldr	r0, [pc, #276]	; (8000ffc <HAL_SPI_MspInit+0x1a8>)
 8000ee8:	f002 f8fe 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_CLK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eec:	2338      	movs	r3, #56	; 0x38
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000efc:	2305      	movs	r3, #5
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	483e      	ldr	r0, [pc, #248]	; (8001000 <HAL_SPI_MspInit+0x1ac>)
 8000f08:	f002 f8ee 	bl	80030e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f0e:	4a3e      	ldr	r2, [pc, #248]	; (8001008 <HAL_SPI_MspInit+0x1b4>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f12:	4b3c      	ldr	r3, [pc, #240]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f14:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b38      	ldr	r3, [pc, #224]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f2e:	4b35      	ldr	r3, [pc, #212]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f34:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f46:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f4e:	482d      	ldr	r0, [pc, #180]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f50:	f001 fd38 	bl	80029c4 <HAL_DMA_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000f5a:	f7ff ff3f 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a28      	ldr	r2, [pc, #160]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f62:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <HAL_SPI_MspInit+0x1b0>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f6c:	4a28      	ldr	r2, [pc, #160]	; (8001010 <HAL_SPI_MspInit+0x1bc>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f72:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f76:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f84:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fa4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fc0:	f001 fd00 	bl	80029c4 <HAL_DMA_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_SPI_MspInit+0x17a>
    {
      Error_Handler();
 8000fca:	f7ff ff07 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fd2:	649a      	str	r2, [r3, #72]	; 0x48
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_SPI_MspInit+0x1b8>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2023      	movs	r0, #35	; 0x23
 8000fe0:	f001 fcb9 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fe4:	2023      	movs	r0, #35	; 0x23
 8000fe6:	f001 fcd2 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40013000 	.word	0x40013000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	20000248 	.word	0x20000248
 8001008:	40026440 	.word	0x40026440
 800100c:	200002a8 	.word	0x200002a8
 8001010:	40026458 	.word	0x40026458

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <NMI_Handler+0x4>

0800106a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler+0x4>

08001076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <BusFault_Handler+0x4>

0800107c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <UsageFault_Handler+0x4>

08001082 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 fe12 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  CustomTickHandler(uwTick);
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SysTick_Handler+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc31 	bl	8000920 <CustomTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000634 	.word	0x20000634

080010c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <DMA1_Stream0_IRQHandler+0x10>)
 80010ce:	f001 fda1 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000308 	.word	0x20000308

080010dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Stream1_IRQHandler+0x10>)
 80010e2:	f001 fd97 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003b0 	.word	0x200003b0

080010f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream2_IRQHandler+0x10>)
 80010f6:	f001 fd8d 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200004a0 	.word	0x200004a0

08001104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA1_Stream4_IRQHandler+0x10>)
 800110a:	f001 fd83 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000500 	.word	0x20000500

08001118 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <SPI1_IRQHandler+0x10>)
 800111e:	f002 ff87 	bl	8004030 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001f0 	.word	0x200001f0

0800112c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001130:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001134:	f002 f990 	bl	8003458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA2_Stream0_IRQHandler+0x10>)
 8001142:	f001 fd67 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190

08001150 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA2_Stream2_IRQHandler+0x10>)
 8001156:	f001 fd5d 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000248 	.word	0x20000248

08001164 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA2_Stream3_IRQHandler+0x10>)
 800116a:	f001 fd53 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002a8 	.word	0x200002a8

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fa33 	bl	8005640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <MX_TIM1_Init+0x168>)
 80011dc:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <MX_TIM1_Init+0x16c>)
 80011de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011e0:	4b48      	ldr	r3, [pc, #288]	; (8001304 <MX_TIM1_Init+0x168>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b47      	ldr	r3, [pc, #284]	; (8001304 <MX_TIM1_Init+0x168>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <MX_TIM1_Init+0x168>)
 80011ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b43      	ldr	r3, [pc, #268]	; (8001304 <MX_TIM1_Init+0x168>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fa:	4b42      	ldr	r3, [pc, #264]	; (8001304 <MX_TIM1_Init+0x168>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <MX_TIM1_Init+0x168>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001206:	483f      	ldr	r0, [pc, #252]	; (8001304 <MX_TIM1_Init+0x168>)
 8001208:	f003 fa4c 	bl	80046a4 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001212:	f7ff fde3 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001220:	4619      	mov	r1, r3
 8001222:	4838      	ldr	r0, [pc, #224]	; (8001304 <MX_TIM1_Init+0x168>)
 8001224:	f003 fb9a 	bl	800495c <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800122e:	f7ff fdd5 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001232:	4834      	ldr	r0, [pc, #208]	; (8001304 <MX_TIM1_Init+0x168>)
 8001234:	f003 fa85 	bl	8004742 <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800123e:	f7ff fdcd 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800124e:	4619      	mov	r1, r3
 8001250:	482c      	ldr	r0, [pc, #176]	; (8001304 <MX_TIM1_Init+0x168>)
 8001252:	f003 feed 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800125c:	f7ff fdbe 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	481f      	ldr	r0, [pc, #124]	; (8001304 <MX_TIM1_Init+0x168>)
 8001286:	f003 faab 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001290:	f7ff fda4 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	2204      	movs	r2, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4819      	ldr	r0, [pc, #100]	; (8001304 <MX_TIM1_Init+0x168>)
 800129e:	f003 fa9f 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012a8:	f7ff fd98 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	4813      	ldr	r0, [pc, #76]	; (8001304 <MX_TIM1_Init+0x168>)
 80012b6:	f003 fa93 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80012c0:	f7ff fd8c 	bl	8000ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM1_Init+0x168>)
 80012e8:	f003 ff10 	bl	800510c <HAL_TIMEx_ConfigBreakDeadTime>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012f2:	f7ff fd73 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM1_Init+0x168>)
 80012f8:	f000 fb2c 	bl	8001954 <HAL_TIM_MspPostInit>

}
 80012fc:	bf00      	nop
 80012fe:	3758      	adds	r7, #88	; 0x58
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000560 	.word	0x20000560
 8001308:	40010000 	.word	0x40010000

0800130c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM2_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2048;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM2_Init+0xac>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001358:	f003 f9f3 	bl	8004742 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001362:	f7ff fd3b 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4619      	mov	r1, r3
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <MX_TIM2_Init+0xac>)
 8001376:	f003 fe5b 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001380:	f7ff fd2c 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM2_Init+0xac>)
 800139c:	f003 fa20 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013a6:	f7ff fd19 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM2_Init+0xac>)
 80013ac:	f000 fad2 	bl	8001954 <HAL_TIM_MspPostInit>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200005a8 	.word	0x200005a8

080013bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_TIM3_Init+0xac>)
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <MX_TIM3_Init+0xb0>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <MX_TIM3_Init+0xac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_TIM3_Init+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_TIM3_Init+0xac>)
 80013f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_TIM3_Init+0xac>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_TIM3_Init+0xac>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001404:	4818      	ldr	r0, [pc, #96]	; (8001468 <MX_TIM3_Init+0xac>)
 8001406:	f003 f99c 	bl	8004742 <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001410:	f7ff fce4 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4619      	mov	r1, r3
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <MX_TIM3_Init+0xac>)
 8001424:	f003 fe04 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800142e:	f7ff fcd5 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	; 0x60
 8001434:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2208      	movs	r2, #8
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_TIM3_Init+0xac>)
 800144a:	f003 f9c9 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001454:	f7ff fcc2 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001458:	4803      	ldr	r0, [pc, #12]	; (8001468 <MX_TIM3_Init+0xac>)
 800145a:	f000 fa7b 	bl	8001954 <HAL_TIM_MspPostInit>

}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000458 	.word	0x20000458
 800146c:	40000400 	.word	0x40000400

08001470 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001476:	f107 0320 	add.w	r3, r7, #32
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <MX_TIM4_Init+0xd8>)
 8001494:	4a2d      	ldr	r2, [pc, #180]	; (800154c <MX_TIM4_Init+0xdc>)
 8001496:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <MX_TIM4_Init+0xd8>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2048;
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b26      	ldr	r3, [pc, #152]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b8:	4823      	ldr	r0, [pc, #140]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014ba:	f003 f942 	bl	8004742 <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014c4:	f7ff fc8a 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4619      	mov	r1, r3
 80014d6:	481c      	ldr	r0, [pc, #112]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014d8:	f003 fdaa 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80014e2:	f7ff fc7b 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e6:	2360      	movs	r3, #96	; 0x60
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <MX_TIM4_Init+0xd8>)
 80014fe:	f003 f96f 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001508:	f7ff fc68 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM4_Init+0xd8>)
 8001514:	f003 f964 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800151e:	f7ff fc5d 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_TIM4_Init+0xd8>)
 800152a:	f003 f959 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001534:	f7ff fc52 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <MX_TIM4_Init+0xd8>)
 800153a:	f000 fa0b 	bl	8001954 <HAL_TIM_MspPostInit>

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000368 	.word	0x20000368
 800154c:	40000800 	.word	0x40000800

08001550 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001572:	4b32      	ldr	r3, [pc, #200]	; (800163c <MX_TIM5_Init+0xec>)
 8001574:	4a32      	ldr	r2, [pc, #200]	; (8001640 <MX_TIM5_Init+0xf0>)
 8001576:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <MX_TIM5_Init+0xec>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <MX_TIM5_Init+0xec>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <MX_TIM5_Init+0xec>)
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <MX_TIM5_Init+0xec>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <MX_TIM5_Init+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001598:	4828      	ldr	r0, [pc, #160]	; (800163c <MX_TIM5_Init+0xec>)
 800159a:	f003 f8d2 	bl	8004742 <HAL_TIM_PWM_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80015a4:	f7ff fc1a 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4619      	mov	r1, r3
 80015b6:	4821      	ldr	r0, [pc, #132]	; (800163c <MX_TIM5_Init+0xec>)
 80015b8:	f003 fd3a 	bl	8005030 <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80015c2:	f7ff fc0b 	bl	8000ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c6:	2360      	movs	r3, #96	; 0x60
 80015c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4817      	ldr	r0, [pc, #92]	; (800163c <MX_TIM5_Init+0xec>)
 80015de:	f003 f8ff 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80015e8:	f7ff fbf8 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2204      	movs	r2, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM5_Init+0xec>)
 80015f4:	f003 f8f4 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80015fe:	f7ff fbed 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2208      	movs	r2, #8
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_TIM5_Init+0xec>)
 800160a:	f003 f8e9 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001614:	f7ff fbe2 	bl	8000ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	220c      	movs	r2, #12
 800161c:	4619      	mov	r1, r3
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <MX_TIM5_Init+0xec>)
 8001620:	f003 f8de 	bl	80047e0 <HAL_TIM_PWM_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 800162a:	f7ff fbd7 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <MX_TIM5_Init+0xec>)
 8001630:	f000 f990 	bl	8001954 <HAL_TIM_MspPostInit>

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000410 	.word	0x20000410
 8001640:	40000c00 	.word	0x40000c00

08001644 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_TIM_Base_MspInit+0x3c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10d      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_TIM_Base_MspInit+0x40>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_TIM_Base_MspInit+0x40>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_TIM_Base_MspInit+0x40>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d10e      	bne.n	80016b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80016b6:	e135      	b.n	8001924 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_TIM_PWM_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
}
 80016de:	e121      	b.n	8001924 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM4)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <HAL_TIM_PWM_MspInit+0x88>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d114      	bne.n	8001714 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_TIM_PWM_MspInit+0x80>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
}
 8001706:	e10d      	b.n	8001924 <HAL_TIM_PWM_MspInit+0x29c>
 8001708:	40023800 	.word	0x40023800
 800170c:	40000400 	.word	0x40000400
 8001710:	40000800 	.word	0x40000800
  else if(tim_pwmHandle->Instance==TIM5)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a84      	ldr	r2, [pc, #528]	; (800192c <HAL_TIM_PWM_MspInit+0x2a4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	f040 8102 	bne.w	8001924 <HAL_TIM_PWM_MspInit+0x29c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a81      	ldr	r2, [pc, #516]	; (8001930 <HAL_TIM_PWM_MspInit+0x2a8>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 800173c:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001740:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001742:	4b7c      	ldr	r3, [pc, #496]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001744:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001748:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174a:	4b7a      	ldr	r3, [pc, #488]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b78      	ldr	r3, [pc, #480]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800175e:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001764:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001768:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 800176e:	4b71      	ldr	r3, [pc, #452]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001776:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800177a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800177c:	4b6d      	ldr	r3, [pc, #436]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 800177e:	2204      	movs	r2, #4
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001782:	4b6c      	ldr	r3, [pc, #432]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 800178a:	2200      	movs	r2, #0
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800178e:	4b69      	ldr	r3, [pc, #420]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001794:	4867      	ldr	r0, [pc, #412]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001796:	f001 f915 	bl	80029c4 <HAL_DMA_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_TIM_PWM_MspInit+0x11c>
      Error_Handler();
 80017a0:	f7ff fb1c 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a63      	ldr	r2, [pc, #396]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
 80017aa:	4a62      	ldr	r2, [pc, #392]	; (8001934 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80017b0:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017b2:	4a63      	ldr	r2, [pc, #396]	; (8001940 <HAL_TIM_PWM_MspInit+0x2b8>)
 80017b4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017b8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80017bc:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017d2:	4b5a      	ldr	r3, [pc, #360]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017da:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017f0:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017f2:	2204      	movs	r2, #4
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80017f6:	4b51      	ldr	r3, [pc, #324]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001808:	484c      	ldr	r0, [pc, #304]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 800180a:	f001 f8db 	bl	80029c4 <HAL_DMA_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_TIM_PWM_MspInit+0x190>
      Error_Handler();
 8001814:	f7ff fae2 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a48      	ldr	r2, [pc, #288]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
 800181e:	4a47      	ldr	r2, [pc, #284]	; (800193c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001826:	4a48      	ldr	r2, [pc, #288]	; (8001948 <HAL_TIM_PWM_MspInit+0x2c0>)
 8001828:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800182c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001830:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001832:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001838:	4b42      	ldr	r3, [pc, #264]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001844:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001854:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800185e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001862:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001864:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001866:	2204      	movs	r2, #4
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 800187c:	4831      	ldr	r0, [pc, #196]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800187e:	f001 f8a1 	bl	80029c4 <HAL_DMA_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_TIM_PWM_MspInit+0x204>
      Error_Handler();
 8001888:	f7ff faa8 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
 8001892:	4a2c      	ldr	r2, [pc, #176]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a2a      	ldr	r2, [pc, #168]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 800189c:	621a      	str	r2, [r3, #32]
 800189e:	4a29      	ldr	r2, [pc, #164]	; (8001944 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_TIM_PWM_MspInit+0x2c8>)
 80018a8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018ac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018b0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018b4:	2240      	movs	r2, #64	; 0x40
 80018b6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80018fc:	4813      	ldr	r0, [pc, #76]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 80018fe:	f001 f861 	bl	80029c4 <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_TIM_PWM_MspInit+0x284>
      Error_Handler();
 8001908:	f7ff fa68 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40023800 	.word	0x40023800
 8001934:	200004a0 	.word	0x200004a0
 8001938:	40026040 	.word	0x40026040
 800193c:	20000500 	.word	0x20000500
 8001940:	40026070 	.word	0x40026070
 8001944:	20000308 	.word	0x20000308
 8001948:	40026010 	.word	0x40026010
 800194c:	200003b0 	.word	0x200003b0
 8001950:	40026028 	.word	0x40026028

08001954 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5b      	ldr	r2, [pc, #364]	; (8001ae0 <HAL_TIM_MspPostInit+0x18c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11f      	bne.n	80019b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M2N_Pin|M1P_Pin|M1N_Pin;
 8001992:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	484e      	ldr	r0, [pc, #312]	; (8001ae8 <HAL_TIM_MspPostInit+0x194>)
 80019b0:	f001 fb9a 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019b4:	e090      	b.n	8001ad8 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019be:	d11f      	bne.n	8001a00 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6313      	str	r3, [r2, #48]	; 0x30
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2P_Pin;
 80019dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2P_GPIO_Port, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	483b      	ldr	r0, [pc, #236]	; (8001ae8 <HAL_TIM_MspPostInit+0x194>)
 80019fa:	f001 fb75 	bl	80030e8 <HAL_GPIO_Init>
}
 80019fe:	e06b      	b.n	8001ad8 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a39      	ldr	r2, [pc, #228]	; (8001aec <HAL_TIM_MspPostInit+0x198>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d11e      	bne.n	8001a48 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3P_Pin;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3P_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	482b      	ldr	r0, [pc, #172]	; (8001af0 <HAL_TIM_MspPostInit+0x19c>)
 8001a42:	f001 fb51 	bl	80030e8 <HAL_GPIO_Init>
}
 8001a46:	e047      	b.n	8001ad8 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <HAL_TIM_MspPostInit+0x1a0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d11f      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3N_Pin|M4N_Pin|M4P_Pin;
 8001a6e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a80:	2302      	movs	r3, #2
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <HAL_TIM_MspPostInit+0x19c>)
 8001a8c:	f001 fb2c 	bl	80030e8 <HAL_GPIO_Init>
}
 8001a90:	e022      	b.n	8001ad8 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM5)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <HAL_TIM_MspPostInit+0x1a4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d11d      	bne.n	8001ad8 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_MspPostInit+0x190>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dshot1_Pin|Dshot2_Pin|Dshot3_Pin|Dshot4_Pin;
 8001ab8:	230f      	movs	r3, #15
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_TIM_MspPostInit+0x194>)
 8001ad4:	f001 fb08 	bl	80030e8 <HAL_GPIO_Init>
}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40000400 	.word	0x40000400
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40000800 	.word	0x40000800
 8001af8:	40000c00 	.word	0x40000c00

08001afc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_USART6_UART_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_USART6_UART_Init+0x4c>)
 8001b34:	f003 fb3c 	bl	80051b0 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f7ff f94d 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200005f0 	.word	0x200005f0
 8001b4c:	40011400 	.word	0x40011400

08001b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_UART_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001b7c:	f043 0320 	orr.w	r3, r3, #32
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001baa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <HAL_UART_MspInit+0x8c>)
 8001bc8:	f001 fa8e 	bl	80030e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40011400 	.word	0x40011400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff fab5 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f003 fce5 	bl	80055dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7fe ff23 	bl	8000a5c <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c24:	08005698 	.word	0x08005698
  ldr r2, =_sbss
 8001c28:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c2c:	20000638 	.word	0x20000638

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 fe6f 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff f9d4 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fe87 	bl	80029aa <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 fe4f 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000004 	.word	0x20000004
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000000c 	.word	0x2000000c
 8001cfc:	20000634 	.word	0x20000634

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000634 	.word	0x20000634

08001d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e033      	b.n	8001d96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fc80 	bl	800063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d5e:	f023 0302 	bic.w	r3, r3, #2
 8001d62:	f043 0202 	orr.w	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa86 	bl	800227c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
 8001d86:	e001      	b.n	8001d8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_Start+0x1a>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e097      	b.n	8001eea <HAL_ADC_Start+0x14a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d018      	beq.n	8001e02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001de0:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <HAL_ADC_Start+0x158>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_ADC_Start+0x15c>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0c9a      	lsrs	r2, r3, #18
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d15f      	bne.n	8001ed0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	d106      	bne.n	8001e5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	f023 0206 	bic.w	r2, r3, #6
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e5c:	e002      	b.n	8001e64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_ADC_Start+0x160>)
 8001e6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d129      	bne.n	8001ee8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e020      	b.n	8001ee8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_ADC_Start+0x164>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_ADC_Start+0x148>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d114      	bne.n	8001ee8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	431bde83 	.word	0x431bde83
 8001f00:	40012300 	.word	0x40012300
 8001f04:	40012000 	.word	0x40012000

08001f08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f24:	d113      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f34:	d10b      	bne.n	8001f4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e063      	b.n	8002016 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f4e:	f7ff fed7 	bl	8001d00 <HAL_GetTick>
 8001f52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f54:	e021      	b.n	8001f9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d01d      	beq.n	8001f9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x6c>
 8001f64:	f7ff fecc 	bl	8001d00 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d212      	bcs.n	8001f9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d00b      	beq.n	8001f9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f043 0204 	orr.w	r2, r3, #4
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e03d      	b.n	8002016 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d1d6      	bne.n	8001f56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0212 	mvn.w	r2, #18
 8001fb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d123      	bne.n	8002014 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11f      	bne.n	8002014 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d111      	bne.n	8002014 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1c>
 8002050:	2302      	movs	r3, #2
 8002052:	e105      	b.n	8002260 <HAL_ADC_ConfigChannel+0x228>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b09      	cmp	r3, #9
 8002062:	d925      	bls.n	80020b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68d9      	ldr	r1, [r3, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	3b1e      	subs	r3, #30
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	4603      	mov	r3, r0
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4403      	add	r3, r0
 80020a2:	3b1e      	subs	r3, #30
 80020a4:	409a      	lsls	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	e022      	b.n	80020f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6919      	ldr	r1, [r3, #16]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	2207      	movs	r2, #7
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4618      	mov	r0, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4403      	add	r3, r0
 80020ec:	409a      	lsls	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d824      	bhi.n	8002148 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b05      	subs	r3, #5
 8002110:	221f      	movs	r2, #31
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	400a      	ands	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	3b05      	subs	r3, #5
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	635a      	str	r2, [r3, #52]	; 0x34
 8002146:	e04c      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	d824      	bhi.n	800219a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	3b23      	subs	r3, #35	; 0x23
 8002162:	221f      	movs	r2, #31
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43da      	mvns	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	400a      	ands	r2, r1
 8002170:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3b23      	subs	r3, #35	; 0x23
 800218c:	fa00 f203 	lsl.w	r2, r0, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
 8002198:	e023      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b41      	subs	r3, #65	; 0x41
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b41      	subs	r3, #65	; 0x41
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_ADC_ConfigChannel+0x234>)
 80021e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_ADC_ConfigChannel+0x238>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1cc>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_ADC_ConfigChannel+0x238>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d123      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x21e>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d003      	beq.n	800221e <HAL_ADC_ConfigChannel+0x1e6>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b11      	cmp	r3, #17
 800221c:	d11b      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d111      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_ADC_ConfigChannel+0x23c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_ADC_ConfigChannel+0x240>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40012300 	.word	0x40012300
 8002270:	40012000 	.word	0x40012000
 8002274:	20000004 	.word	0x20000004
 8002278:	431bde83 	.word	0x431bde83

0800227c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002284:	4b79      	ldr	r3, [pc, #484]	; (800246c <ADC_Init+0x1f0>)
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	021a      	lsls	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	4a58      	ldr	r2, [pc, #352]	; (8002470 <ADC_Init+0x1f4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002322:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	e00f      	b.n	800237a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002378:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0202 	bic.w	r2, r2, #2
 8002388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e1b      	ldrb	r3, [r3, #24]
 8002394:	005a      	lsls	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	3b01      	subs	r3, #1
 80023d4:	035a      	lsls	r2, r3, #13
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e007      	b.n	80023f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	3b01      	subs	r3, #1
 800240c:	051a      	lsls	r2, r3, #20
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002432:	025a      	lsls	r2, r3, #9
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	029a      	lsls	r2, r3, #10
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40012300 	.word	0x40012300
 8002470:	0f000001 	.word	0x0f000001

08002474 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002488:	2302      	movs	r3, #2
 800248a:	e17d      	b.n	8002788 <HAL_ADCEx_InjectedConfigChannel+0x314>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b09      	cmp	r3, #9
 800249a:	d925      	bls.n	80024e8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68d9      	ldr	r1, [r3, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4613      	mov	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4413      	add	r3, r2
 80024b0:	3b1e      	subs	r3, #30
 80024b2:	2207      	movs	r2, #7
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43da      	mvns	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	400a      	ands	r2, r1
 80024c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68d9      	ldr	r1, [r3, #12]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4403      	add	r3, r0
 80024da:	3b1e      	subs	r3, #30
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	e022      	b.n	800252e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6919      	ldr	r1, [r3, #16]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	2207      	movs	r2, #7
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43da      	mvns	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	400a      	ands	r2, r1
 800250a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	4603      	mov	r3, r0
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4403      	add	r3, r0
 8002524:	409a      	lsls	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	3b01      	subs	r3, #1
 800254a:	051a      	lsls	r2, r3, #20
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3303      	adds	r3, #3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	221f      	movs	r2, #31
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43da      	mvns	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	400a      	ands	r2, r1
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3303      	adds	r3, #3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	fa00 f203 	lsl.w	r2, r0, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a74      	ldr	r2, [pc, #464]	; (8002794 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80025f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	e00f      	b.n	800262c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800261a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800262a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	7d5b      	ldrb	r3, [r3, #21]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	e007      	b.n	8002656 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7d1b      	ldrb	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	e007      	b.n	8002680 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800267e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d02e      	beq.n	80026e6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002688:	2b03      	cmp	r3, #3
 800268a:	d840      	bhi.n	800270e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800268c:	2b01      	cmp	r3, #1
 800268e:	d002      	beq.n	8002696 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002690:	2b02      	cmp	r3, #2
 8002692:	d014      	beq.n	80026be <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002694:	e03b      	b.n	800270e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026a4:	f023 030f 	bic.w	r3, r3, #15
 80026a8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
      break;
 80026bc:	e03b      	b.n	8002736 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026cc:	f023 030f 	bic.w	r3, r3, #15
 80026d0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6999      	ldr	r1, [r3, #24]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	619a      	str	r2, [r3, #24]
      break;
 80026e4:	e027      	b.n	8002736 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80026f4:	f023 030f 	bic.w	r3, r3, #15
 80026f8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69d9      	ldr	r1, [r3, #28]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	61da      	str	r2, [r3, #28]
      break;
 800270c:	e013      	b.n	8002736 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800271c:	f023 030f 	bic.w	r3, r3, #15
 8002720:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	621a      	str	r2, [r3, #32]
      break;
 8002734:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d109      	bne.n	8002758 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b12      	cmp	r3, #18
 800274a:	d105      	bne.n	8002758 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10d      	bne.n	800277e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d003      	beq.n	8002772 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b11      	cmp	r3, #17
 8002770:	d105      	bne.n	800277e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	000f0001 	.word	0x000f0001
 8002798:	40012300 	.word	0x40012300
 800279c:	40012000 	.word	0x40012000

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff f996 	bl	8001d00 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff f97d 	bl	8001d00 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa91 	bl	8002ff0 <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa48 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f010803f 	.word	0xf010803f

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e040      	b.n	8002bc8 <HAL_DMA_Start_IT+0xa8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12f      	bne.n	8002bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9da 	bl	8002f28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0216 	orr.w	r2, r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d004      	beq.n	8002bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00c      	b.n	8002c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_DMA_IRQHandler+0x258>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a92      	ldr	r2, [pc, #584]	; (8002e70 <HAL_DMA_IRQHandler+0x25c>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03c      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0e:	2210      	movs	r2, #16
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d024      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	e01f      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	2220      	movs	r2, #32
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 808e 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8086 	beq.w	8002eb2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002daa:	2220      	movs	r2, #32
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d136      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_IRQHandler+0x1da>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	223f      	movs	r2, #63	; 0x3f
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07d      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
        }
        return;
 8002e2a:	e078      	b.n	8002f1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01c      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d030      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e02b      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	4798      	blx	r3
 8002e6a:	e022      	b.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0210 	bic.w	r2, r2, #16
 8002e90:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d032      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d022      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d307      	bcc.n	8002efa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f2      	bne.n	8002ede <HAL_DMA_IRQHandler+0x2ca>
 8002ef8:	e000      	b.n	8002efc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002efa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e000      	b.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f1e:	bf00      	nop
    }
  }
}
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop

08002f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3b10      	subs	r3, #16
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <DMA_CalcBaseAndBitshift+0x68>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d909      	bls.n	8002fc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc4:	e007      	b.n	8002fd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	aaaaaaab 	.word	0xaaaaaaab
 8002fec:	08005680 	.word	0x08005680

08002ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11f      	bne.n	800304a <DMA_CheckFifoParam+0x5a>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d856      	bhi.n	80030be <DMA_CheckFifoParam+0xce>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <DMA_CheckFifoParam+0x28>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003029 	.word	0x08003029
 800301c:	0800303b 	.word	0x0800303b
 8003020:	08003029 	.word	0x08003029
 8003024:	080030bf 	.word	0x080030bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d046      	beq.n	80030c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e043      	b.n	80030c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003042:	d140      	bne.n	80030c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e03d      	b.n	80030c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d121      	bne.n	8003098 <DMA_CheckFifoParam+0xa8>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d837      	bhi.n	80030ca <DMA_CheckFifoParam+0xda>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <DMA_CheckFifoParam+0x70>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003077 	.word	0x08003077
 8003068:	08003071 	.word	0x08003071
 800306c:	08003089 	.word	0x08003089
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      break;
 8003074:	e030      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d025      	beq.n	80030ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e022      	b.n	80030ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003090:	d11f      	bne.n	80030d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003096:	e01c      	b.n	80030d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d903      	bls.n	80030a6 <DMA_CheckFifoParam+0xb6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d003      	beq.n	80030ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a4:	e018      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      break;
 80030aa:	e015      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e00b      	b.n	80030d6 <DMA_CheckFifoParam+0xe6>
      break;
 80030be:	bf00      	nop
 80030c0:	e00a      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
 80030c4:	e008      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e006      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
    }
  } 
  
  return status; 
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e159      	b.n	80033b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8148 	bne.w	80033b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a2 	beq.w	80033b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327c:	6453      	str	r3, [r2, #68]	; 0x44
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_GPIO_Init+0x2ec>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_GPIO_Init+0x2f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x202>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_GPIO_Init+0x2f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x1fe>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a47      	ldr	r2, [pc, #284]	; (80033e0 <HAL_GPIO_Init+0x2f8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a46      	ldr	r2, [pc, #280]	; (80033e4 <HAL_GPIO_Init+0x2fc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x1f6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a45      	ldr	r2, [pc, #276]	; (80033e8 <HAL_GPIO_Init+0x300>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x1f2>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032da:	2307      	movs	r3, #7
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4935      	ldr	r1, [pc, #212]	; (80033d4 <HAL_GPIO_Init+0x2ec>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_GPIO_Init+0x304>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332e:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <HAL_GPIO_Init+0x304>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_GPIO_Init+0x304>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <HAL_GPIO_Init+0x304>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <HAL_GPIO_Init+0x304>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_GPIO_Init+0x304>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_GPIO_Init+0x304>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_GPIO_Init+0x304>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f aea2 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3724      	adds	r7, #36	; 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40013c00 	.word	0x40013c00

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
 800342a:	460b      	mov	r3, r1
 800342c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003434:	887a      	ldrh	r2, [r7, #2]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	041a      	lsls	r2, r3, #16
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	43d9      	mvns	r1, r3
 8003440:	887b      	ldrh	r3, [r7, #2]
 8003442:	400b      	ands	r3, r1
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	619a      	str	r2, [r3, #24]
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d006      	beq.n	800347c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fae4 	bl	8000a44 <HAL_GPIO_EXTI_Callback>
  }
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40013c00 	.word	0x40013c00

08003488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e264      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d075      	beq.n	8003592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	4ba3      	ldr	r3, [pc, #652]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00c      	beq.n	80034cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4ba0      	ldr	r3, [pc, #640]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d112      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b9d      	ldr	r3, [pc, #628]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b99      	ldr	r3, [pc, #612]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05b      	beq.n	8003590 <HAL_RCC_OscConfig+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d157      	bne.n	8003590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e23f      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x74>
 80034ee:	4b91      	ldr	r3, [pc, #580]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a90      	ldr	r2, [pc, #576]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x98>
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a8a      	ldr	r2, [pc, #552]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a87      	ldr	r2, [pc, #540]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 8003520:	4b84      	ldr	r3, [pc, #528]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a83      	ldr	r2, [pc, #524]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a80      	ldr	r2, [pc, #512]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe fbde 	bl	8001d00 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fbda 	bl	8001d00 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e204      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xc0>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fbca 	bl	8001d00 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe fbc6 	bl	8001d00 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1f0      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0xe8>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b5f      	ldr	r3, [pc, #380]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c4      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b56      	ldr	r3, [pc, #344]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4952      	ldr	r1, [pc, #328]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b4f      	ldr	r3, [pc, #316]	; (8003738 <HAL_RCC_OscConfig+0x2b0>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fb7f 	bl	8001d00 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fb7b 	bl	8001d00 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a5      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b46      	ldr	r3, [pc, #280]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b43      	ldr	r3, [pc, #268]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4940      	ldr	r1, [pc, #256]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_OscConfig+0x2b0>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fb5e 	bl	8001d00 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fb5a 	bl	8001d00 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e184      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d030      	beq.n	80036d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_OscConfig+0x2b4>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe fb3e 	bl	8001d00 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003688:	f7fe fb3a 	bl	8001d00 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e164      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x200>
 80036a6:	e015      	b.n	80036d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x2b4>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fb27 	bl	8001d00 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fe fb23 	bl	8001d00 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e14d      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a0 	beq.w	8003822 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x2b8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d121      	bne.n	8003762 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_RCC_OscConfig+0x2b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_RCC_OscConfig+0x2b8>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7fe fae9 	bl	8001d00 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	e011      	b.n	8003756 <HAL_RCC_OscConfig+0x2ce>
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
 8003740:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003744:	f7fe fadc 	bl	8001d00 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e106      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b85      	ldr	r3, [pc, #532]	; (800396c <HAL_RCC_OscConfig+0x4e4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x2f0>
 800376a:	4b81      	ldr	r3, [pc, #516]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
 8003776:	e01c      	b.n	80037b2 <HAL_RCC_OscConfig+0x32a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b05      	cmp	r3, #5
 800377e:	d10c      	bne.n	800379a <HAL_RCC_OscConfig+0x312>
 8003780:	4b7b      	ldr	r3, [pc, #492]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	4a7a      	ldr	r2, [pc, #488]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003786:	f043 0304 	orr.w	r3, r3, #4
 800378a:	6713      	str	r3, [r2, #112]	; 0x70
 800378c:	4b78      	ldr	r3, [pc, #480]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a77      	ldr	r2, [pc, #476]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e00b      	b.n	80037b2 <HAL_RCC_OscConfig+0x32a>
 800379a:	4b75      	ldr	r3, [pc, #468]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a74      	ldr	r2, [pc, #464]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80037a0:	f023 0301 	bic.w	r3, r3, #1
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	4b72      	ldr	r3, [pc, #456]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a71      	ldr	r2, [pc, #452]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d015      	beq.n	80037e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fe faa1 	bl	8001d00 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fa9d 	bl	8001d00 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0c5      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ee      	beq.n	80037c2 <HAL_RCC_OscConfig+0x33a>
 80037e4:	e014      	b.n	8003810 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e6:	f7fe fa8b 	bl	8001d00 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fe fa87 	bl	8001d00 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e0af      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ee      	bne.n	80037ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d105      	bne.n	8003822 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003816:	4b56      	ldr	r3, [pc, #344]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a55      	ldr	r2, [pc, #340]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 800381c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 809b 	beq.w	8003962 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800382c:	4b50      	ldr	r3, [pc, #320]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b08      	cmp	r3, #8
 8003836:	d05c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d141      	bne.n	80038c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003840:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCC_OscConfig+0x4ec>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fe fa5b 	bl	8001d00 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe fa57 	bl	8001d00 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e081      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003860:	4b43      	ldr	r3, [pc, #268]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f0      	bne.n	800384e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	019b      	lsls	r3, r3, #6
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	3b01      	subs	r3, #1
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	4937      	ldr	r1, [pc, #220]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HAL_RCC_OscConfig+0x4ec>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe fa30 	bl	8001d00 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fa2c 	bl	8001d00 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e056      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x41c>
 80038c2:	e04e      	b.n	8003962 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCC_OscConfig+0x4ec>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fe fa19 	bl	8001d00 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fe fa15 	bl	8001d00 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e03f      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x44a>
 80038f0:	e037      	b.n	8003962 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e032      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <HAL_RCC_OscConfig+0x4e8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d028      	beq.n	800395e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003916:	429a      	cmp	r2, r3
 8003918:	d121      	bne.n	800395e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003924:	429a      	cmp	r2, r3
 8003926:	d11a      	bne.n	800395e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800392e:	4013      	ands	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003934:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003936:	4293      	cmp	r3, r2
 8003938:	d111      	bne.n	800395e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d107      	bne.n	800395e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40007000 	.word	0x40007000
 8003970:	40023800 	.word	0x40023800
 8003974:	42470060 	.word	0x42470060

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fe f94a 	bl	8001d00 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fe f946 	bl	8001d00 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe f8aa 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08005668 	.word	0x08005668
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	20000008 	.word	0x20000008

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	6079      	str	r1, [r7, #4]
 8003b4e:	2100      	movs	r1, #0
 8003b50:	60f9      	str	r1, [r7, #12]
 8003b52:	2100      	movs	r1, #0
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b56:	2100      	movs	r1, #0
 8003b58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5a:	4952      	ldr	r1, [pc, #328]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b5c:	6889      	ldr	r1, [r1, #8]
 8003b5e:	f001 010c 	and.w	r1, r1, #12
 8003b62:	2908      	cmp	r1, #8
 8003b64:	d00d      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b66:	2908      	cmp	r1, #8
 8003b68:	f200 8094 	bhi.w	8003c94 <HAL_RCC_GetSysClockFreq+0x150>
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x32>
 8003b70:	2904      	cmp	r1, #4
 8003b72:	d003      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x38>
 8003b74:	e08e      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b76:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b78:	60bb      	str	r3, [r7, #8]
       break;
 8003b7a:	e08e      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_RCC_GetSysClockFreq+0x168>)
 8003b7e:	60bb      	str	r3, [r7, #8]
      break;
 8003b80:	e08b      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b82:	4948      	ldr	r1, [pc, #288]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b84:	6849      	ldr	r1, [r1, #4]
 8003b86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8c:	4945      	ldr	r1, [pc, #276]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b8e:	6849      	ldr	r1, [r1, #4]
 8003b90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d024      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b98:	4942      	ldr	r1, [pc, #264]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b9a:	6849      	ldr	r1, [r1, #4]
 8003b9c:	0989      	lsrs	r1, r1, #6
 8003b9e:	4608      	mov	r0, r1
 8003ba0:	f04f 0100 	mov.w	r1, #0
 8003ba4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ba8:	f04f 0500 	mov.w	r5, #0
 8003bac:	ea00 0204 	and.w	r2, r0, r4
 8003bb0:	ea01 0305 	and.w	r3, r1, r5
 8003bb4:	493d      	ldr	r1, [pc, #244]	; (8003cac <HAL_RCC_GetSysClockFreq+0x168>)
 8003bb6:	fb01 f003 	mul.w	r0, r1, r3
 8003bba:	2100      	movs	r1, #0
 8003bbc:	fb01 f102 	mul.w	r1, r1, r2
 8003bc0:	1844      	adds	r4, r0, r1
 8003bc2:	493a      	ldr	r1, [pc, #232]	; (8003cac <HAL_RCC_GetSysClockFreq+0x168>)
 8003bc4:	fba2 0101 	umull	r0, r1, r2, r1
 8003bc8:	1863      	adds	r3, r4, r1
 8003bca:	4619      	mov	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	f7fc fafe 	bl	80001d4 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e04a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	461a      	mov	r2, r3
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bf2:	f04f 0100 	mov.w	r1, #0
 8003bf6:	ea02 0400 	and.w	r4, r2, r0
 8003bfa:	ea03 0501 	and.w	r5, r3, r1
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	014b      	lsls	r3, r1, #5
 8003c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c10:	0142      	lsls	r2, r0, #5
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	1b00      	subs	r0, r0, r4
 8003c18:	eb61 0105 	sbc.w	r1, r1, r5
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	018b      	lsls	r3, r1, #6
 8003c26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c2a:	0182      	lsls	r2, r0, #6
 8003c2c:	1a12      	subs	r2, r2, r0
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	00d9      	lsls	r1, r3, #3
 8003c3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c40:	00d0      	lsls	r0, r2, #3
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	1912      	adds	r2, r2, r4
 8003c48:	eb45 0303 	adc.w	r3, r5, r3
 8003c4c:	f04f 0000 	mov.w	r0, #0
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	0299      	lsls	r1, r3, #10
 8003c56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c5a:	0290      	lsls	r0, r2, #10
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f7fc fab2 	bl	80001d4 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	60bb      	str	r3, [r7, #8]
      break;
 8003c92:	e002      	b.n	8003c9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c96:	60bb      	str	r3, [r7, #8]
      break;
 8003c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	00f42400 	.word	0x00f42400
 8003cac:	017d7840 	.word	0x017d7840

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	20000004 	.word	0x20000004

08003cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ccc:	f7ff fff0 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0a9b      	lsrs	r3, r3, #10
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	08005678 	.word	0x08005678

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cf4:	f7ff ffdc 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08005678 	.word	0x08005678

08003d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07b      	b.n	8003e22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3a:	d009      	beq.n	8003d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
 8003d42:	e005      	b.n	8003d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd f872 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	ea42 0103 	orr.w	r1, r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0104 	and.w	r1, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0210 	and.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_SPI_TransmitReceive_DMA+0x20>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e0e3      	b.n	8004014 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e62:	7dbb      	ldrb	r3, [r7, #22]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d00d      	beq.n	8003e84 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d106      	bne.n	8003e7e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_TransmitReceive_DMA+0x52>
 8003e78:	7dbb      	ldrb	r3, [r7, #22]
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e82:	e0c2      	b.n	800400a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e9a:	e0b6      	b.n	800400a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d003      	beq.n	8003eb0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2205      	movs	r2, #5
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	887a      	ldrh	r2, [r7, #2]
 8003ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d108      	bne.n	8003f04 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	4a49      	ldr	r2, [pc, #292]	; (800401c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	4a48      	ldr	r2, [pc, #288]	; (8004020 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003f00:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f02:	e007      	b.n	8003f14 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	4a46      	ldr	r2, [pc, #280]	; (8004024 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f10:	4a45      	ldr	r2, [pc, #276]	; (8004028 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f18:	4a44      	ldr	r2, [pc, #272]	; (800402c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	2200      	movs	r2, #0
 8003f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f3c:	f7fe fdf0 	bl	8002b20 <HAL_DMA_Start_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f5e:	e054      	b.n	800400a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f74:	2200      	movs	r2, #0
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	2200      	movs	r2, #0
 8003f86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003fa8:	f7fe fdba 	bl	8002b20 <HAL_DMA_Start_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00c      	beq.n	8003fcc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	f043 0210 	orr.w	r2, r3, #16
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003fca:	e01e      	b.n	800400a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d007      	beq.n	8003fea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0220 	orr.w	r2, r2, #32
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0202 	orr.w	r2, r2, #2
 8004008:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	080043a5 	.word	0x080043a5
 8004020:	0800426d 	.word	0x0800426d
 8004024:	080043c1 	.word	0x080043c1
 8004028:	08004315 	.word	0x08004315
 800402c:	080043dd 	.word	0x080043dd

08004030 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10f      	bne.n	8004074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
    return;
 8004072:	e0d7      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_SPI_IRQHandler+0x66>
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	09db      	lsrs	r3, r3, #7
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
    return;
 8004094:	e0c6      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_SPI_IRQHandler+0x8c>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80b4 	beq.w	8004224 <HAL_SPI_IRQHandler+0x1f4>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80ad 	beq.w	8004224 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d023      	beq.n	800411e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d011      	beq.n	8004106 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	e00b      	b.n	800411e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]
        return;
 800411c:	e082      	b.n	8004224 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d014      	beq.n	8004154 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00c      	beq.n	800417a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0208 	orr.w	r2, r3, #8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800416c:	2300      	movs	r3, #0
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04f      	beq.n	8004222 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004190:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <HAL_SPI_IRQHandler+0x17e>
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d034      	beq.n	8004218 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0203 	bic.w	r2, r2, #3
 80041bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_SPI_IRQHandler+0x1fc>)
 80041cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fcfc 	bl	8002bd0 <HAL_DMA_Abort_IT>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	4a0d      	ldr	r2, [pc, #52]	; (800422c <HAL_SPI_IRQHandler+0x1fc>)
 80041f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fce6 	bl	8002bd0 <HAL_DMA_Abort_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004216:	e003      	b.n	8004220 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fc fbf3 	bl	8000a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800421e:	e000      	b.n	8004222 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004220:	bf00      	nop
    return;
 8004222:	bf00      	nop
  }
}
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	0800441d 	.word	0x0800441d

08004230 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800427a:	f7fd fd41 	bl	8001d00 <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d03b      	beq.n	8004308 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0220 	bic.w	r2, r2, #32
 800429e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <SPI_DMAReceiveCplt+0x58>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b0:	d108      	bne.n	80042c4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0203 	bic.w	r2, r2, #3
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e007      	b.n	80042d4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	2164      	movs	r1, #100	; 0x64
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f93b 	bl	8004554 <SPI_EndRxTransaction>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7fc fb7f 	bl	8000a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004306:	e002      	b.n	800430e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff91 	bl	8004230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004322:	f7fd fced 	bl	8001d00 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	d02f      	beq.n	8004398 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0220 	bic.w	r2, r2, #32
 8004346:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	2164      	movs	r1, #100	; 0x64
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f967 	bl	8004620 <SPI_EndRxTxTransaction>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0203 	bic.w	r2, r2, #3
 8004372:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7fc fb37 	bl	8000a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004396:	e002      	b.n	800439e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7fc fb13 	bl	80009c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff46 	bl	8004244 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff42 	bl	8004258 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0203 	bic.w	r2, r2, #3
 80043f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fe:	f043 0210 	orr.w	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f7fc faf8 	bl	8000a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7fc fae4 	bl	8000a04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004454:	f7fd fc54 	bl	8001d00 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	4413      	add	r3, r2
 8004462:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004464:	f7fd fc4c 	bl	8001d00 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	015b      	lsls	r3, r3, #5
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800447a:	e054      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d050      	beq.n	8004526 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004484:	f7fd fc3c 	bl	8001d00 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d902      	bls.n	800449a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13d      	bne.n	8004516 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b2:	d111      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044bc:	d004      	beq.n	80044c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c6:	d107      	bne.n	80044d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e0:	d10f      	bne.n	8004502 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004500:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e017      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d19b      	bne.n	800447c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000004 	.word	0x20000004

08004554 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004568:	d111      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004572:	d004      	beq.n	800457e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d107      	bne.n	800458e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d12a      	bne.n	80045ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a0:	d012      	beq.n	80045c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	; 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff ff49 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02d      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e026      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	2101      	movs	r1, #1
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff ff36 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01a      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e013      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2101      	movs	r1, #1
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ff23 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e000      	b.n	8004616 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <SPI_EndRxTxTransaction+0x7c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <SPI_EndRxTxTransaction+0x80>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0d5b      	lsrs	r3, r3, #21
 8004638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d112      	bne.n	8004672 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fef4 	bl	8004444 <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e00f      	b.n	8004692 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3b01      	subs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d0f2      	beq.n	8004672 <SPI_EndRxTxTransaction+0x52>
 800468c:	e000      	b.n	8004690 <SPI_EndRxTxTransaction+0x70>
        break;
 800468e:	bf00      	nop
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000004 	.word	0x20000004
 80046a0:	165e9f81 	.word	0x165e9f81

080046a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e041      	b.n	800473a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc ffba 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 f9fe 	bl	8004ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e041      	b.n	80047d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fc ff8d 	bl	8001688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 f9af 	bl	8004ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0ac      	b.n	8004954 <HAL_TIM_PWM_ConfigChannel+0x174>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b0c      	cmp	r3, #12
 8004806:	f200 809f 	bhi.w	8004948 <HAL_TIM_PWM_ConfigChannel+0x168>
 800480a:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004845 	.word	0x08004845
 8004814:	08004949 	.word	0x08004949
 8004818:	08004949 	.word	0x08004949
 800481c:	08004949 	.word	0x08004949
 8004820:	08004885 	.word	0x08004885
 8004824:	08004949 	.word	0x08004949
 8004828:	08004949 	.word	0x08004949
 800482c:	08004949 	.word	0x08004949
 8004830:	080048c7 	.word	0x080048c7
 8004834:	08004949 	.word	0x08004949
 8004838:	08004949 	.word	0x08004949
 800483c:	08004949 	.word	0x08004949
 8004840:	08004907 	.word	0x08004907
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f9ca 	bl	8004be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0208 	orr.w	r2, r2, #8
 800485e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6999      	ldr	r1, [r3, #24]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	619a      	str	r2, [r3, #24]
      break;
 8004882:	e062      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fa10 	bl	8004cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6999      	ldr	r1, [r3, #24]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	619a      	str	r2, [r3, #24]
      break;
 80048c4:	e041      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa5b 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0208 	orr.w	r2, r2, #8
 80048e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0204 	bic.w	r2, r2, #4
 80048f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	61da      	str	r2, [r3, #28]
      break;
 8004904:	e021      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 faa5 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69d9      	ldr	r1, [r3, #28]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	021a      	lsls	r2, r3, #8
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	61da      	str	r2, [r3, #28]
      break;
 8004946:	e000      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004948:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_TIM_ConfigClockSource+0x18>
 8004970:	2302      	movs	r3, #2
 8004972:	e0b3      	b.n	8004adc <HAL_TIM_ConfigClockSource+0x180>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800499a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ac:	d03e      	beq.n	8004a2c <HAL_TIM_ConfigClockSource+0xd0>
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b2:	f200 8087 	bhi.w	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	f000 8085 	beq.w	8004ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c2:	d87f      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049c4:	2b70      	cmp	r3, #112	; 0x70
 80049c6:	d01a      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0xa2>
 80049c8:	2b70      	cmp	r3, #112	; 0x70
 80049ca:	d87b      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049cc:	2b60      	cmp	r3, #96	; 0x60
 80049ce:	d050      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0x116>
 80049d0:	2b60      	cmp	r3, #96	; 0x60
 80049d2:	d877      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049d4:	2b50      	cmp	r3, #80	; 0x50
 80049d6:	d03c      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0xf6>
 80049d8:	2b50      	cmp	r3, #80	; 0x50
 80049da:	d873      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d058      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x136>
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d86f      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049e4:	2b30      	cmp	r3, #48	; 0x30
 80049e6:	d064      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x156>
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d86b      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d060      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x156>
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d867      	bhi.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d05c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x156>
 80049f8:	2b10      	cmp	r3, #16
 80049fa:	d05a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049fc:	e062      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f000 faef 	bl	8004ff0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	609a      	str	r2, [r3, #8]
      break;
 8004a2a:	e04e      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6899      	ldr	r1, [r3, #8]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f000 fad8 	bl	8004ff0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4e:	609a      	str	r2, [r3, #8]
      break;
 8004a50:	e03b      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f000 fa4c 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2150      	movs	r1, #80	; 0x50
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 faa5 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a70:	e02b      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 fa6b 	bl	8004f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2160      	movs	r1, #96	; 0x60
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fa95 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004a90:	e01b      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 fa2c 	bl	8004efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2140      	movs	r1, #64	; 0x40
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fa85 	bl	8004fba <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e00b      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f000 fa7c 	bl	8004fba <TIM_ITRx_SetConfig>
        break;
 8004ac2:	e002      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ac8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a34      	ldr	r2, [pc, #208]	; (8004bc8 <TIM_Base_SetConfig+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00f      	beq.n	8004b1c <TIM_Base_SetConfig+0x38>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b02:	d00b      	beq.n	8004b1c <TIM_Base_SetConfig+0x38>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a31      	ldr	r2, [pc, #196]	; (8004bcc <TIM_Base_SetConfig+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d007      	beq.n	8004b1c <TIM_Base_SetConfig+0x38>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <TIM_Base_SetConfig+0xec>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_Base_SetConfig+0x38>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <TIM_Base_SetConfig+0xf0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d108      	bne.n	8004b2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_Base_SetConfig+0xe4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01b      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3c:	d017      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <TIM_Base_SetConfig+0xe8>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a21      	ldr	r2, [pc, #132]	; (8004bd0 <TIM_Base_SetConfig+0xec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <TIM_Base_SetConfig+0xf0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <TIM_Base_SetConfig+0xf4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <TIM_Base_SetConfig+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0x8a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <TIM_Base_SetConfig+0xfc>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <TIM_Base_SetConfig+0xe4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d103      	bne.n	8004bb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	615a      	str	r2, [r3, #20]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800

08004be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f023 0201 	bic.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <TIM_OC1_SetConfig+0xc8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d10c      	bne.n	8004c5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0308 	bic.w	r3, r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <TIM_OC1_SetConfig+0xc8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d111      	bne.n	8004c86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000

08004cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0210 	bic.w	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0320 	bic.w	r3, r3, #32
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <TIM_OC2_SetConfig+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10d      	bne.n	8004d2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <TIM_OC2_SetConfig+0xd4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d113      	bne.n	8004e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40010000 	.word	0x40010000

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <TIM_OC4_SetConfig+0x9c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40010000 	.word	0x40010000

08004efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0201 	bic.w	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 030a 	bic.w	r3, r3, #10
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	621a      	str	r2, [r3, #32]
}
 8004f4e:	bf00      	nop
 8004f50:	371c      	adds	r7, #28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	031b      	lsls	r3, r3, #12
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f043 0307 	orr.w	r3, r3, #7
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	021a      	lsls	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	431a      	orrs	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4313      	orrs	r3, r2
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e050      	b.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d018      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d013      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d10c      	bne.n	80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005124:	2302      	movs	r3, #2
 8005126:	e03d      	b.n	80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e03f      	b.n	8005242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc fcba 	bl	8001b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f829 	bl	800524c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005250:	b09f      	sub	sp, #124	; 0x7c
 8005252:	af00      	add	r7, sp, #0
 8005254:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	68d9      	ldr	r1, [r3, #12]
 8005264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	ea40 0301 	orr.w	r3, r0, r1
 800526c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800526e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	431a      	orrs	r2, r3
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005290:	f021 010c 	bic.w	r1, r1, #12
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529a:	430b      	orrs	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052aa:	6999      	ldr	r1, [r3, #24]
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	ea40 0301 	orr.w	r3, r0, r1
 80052b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4bc5      	ldr	r3, [pc, #788]	; (80055d0 <UART_SetConfig+0x384>)
 80052bc:	429a      	cmp	r2, r3
 80052be:	d004      	beq.n	80052ca <UART_SetConfig+0x7e>
 80052c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4bc3      	ldr	r3, [pc, #780]	; (80055d4 <UART_SetConfig+0x388>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d103      	bne.n	80052d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ca:	f7fe fd11 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 80052ce:	6778      	str	r0, [r7, #116]	; 0x74
 80052d0:	e002      	b.n	80052d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052d2:	f7fe fcf9 	bl	8003cc8 <HAL_RCC_GetPCLK1Freq>
 80052d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e0:	f040 80b6 	bne.w	8005450 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e6:	461c      	mov	r4, r3
 80052e8:	f04f 0500 	mov.w	r5, #0
 80052ec:	4622      	mov	r2, r4
 80052ee:	462b      	mov	r3, r5
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	6439      	str	r1, [r7, #64]	; 0x40
 80052f4:	415b      	adcs	r3, r3
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
 80052f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052fc:	1912      	adds	r2, r2, r4
 80052fe:	eb45 0303 	adc.w	r3, r5, r3
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	00d9      	lsls	r1, r3, #3
 800530c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005310:	00d0      	lsls	r0, r2, #3
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	1911      	adds	r1, r2, r4
 8005318:	6639      	str	r1, [r7, #96]	; 0x60
 800531a:	416b      	adcs	r3, r5
 800531c:	667b      	str	r3, [r7, #100]	; 0x64
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	1891      	adds	r1, r2, r2
 800532a:	63b9      	str	r1, [r7, #56]	; 0x38
 800532c:	415b      	adcs	r3, r3
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005334:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005338:	f7fa ff4c 	bl	80001d4 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4ba5      	ldr	r3, [pc, #660]	; (80055d8 <UART_SetConfig+0x38c>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011e      	lsls	r6, r3, #4
 800534a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800534c:	461c      	mov	r4, r3
 800534e:	f04f 0500 	mov.w	r5, #0
 8005352:	4622      	mov	r2, r4
 8005354:	462b      	mov	r3, r5
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6339      	str	r1, [r7, #48]	; 0x30
 800535a:	415b      	adcs	r3, r3
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
 800535e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005362:	1912      	adds	r2, r2, r4
 8005364:	eb45 0303 	adc.w	r3, r5, r3
 8005368:	f04f 0000 	mov.w	r0, #0
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	00d9      	lsls	r1, r3, #3
 8005372:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005376:	00d0      	lsls	r0, r2, #3
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	1911      	adds	r1, r2, r4
 800537e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005380:	416b      	adcs	r3, r5
 8005382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	461a      	mov	r2, r3
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	1891      	adds	r1, r2, r2
 8005390:	62b9      	str	r1, [r7, #40]	; 0x28
 8005392:	415b      	adcs	r3, r3
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800539a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800539e:	f7fa ff19 	bl	80001d4 <__aeabi_uldivmod>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4b8c      	ldr	r3, [pc, #560]	; (80055d8 <UART_SetConfig+0x38c>)
 80053a8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	2164      	movs	r1, #100	; 0x64
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	3332      	adds	r3, #50	; 0x32
 80053ba:	4a87      	ldr	r2, [pc, #540]	; (80055d8 <UART_SetConfig+0x38c>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c8:	441e      	add	r6, r3
 80053ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053cc:	4618      	mov	r0, r3
 80053ce:	f04f 0100 	mov.w	r1, #0
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	1894      	adds	r4, r2, r2
 80053d8:	623c      	str	r4, [r7, #32]
 80053da:	415b      	adcs	r3, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e2:	1812      	adds	r2, r2, r0
 80053e4:	eb41 0303 	adc.w	r3, r1, r3
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	f04f 0500 	mov.w	r5, #0
 80053f0:	00dd      	lsls	r5, r3, #3
 80053f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053f6:	00d4      	lsls	r4, r2, #3
 80053f8:	4622      	mov	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	1814      	adds	r4, r2, r0
 80053fe:	653c      	str	r4, [r7, #80]	; 0x50
 8005400:	414b      	adcs	r3, r1
 8005402:	657b      	str	r3, [r7, #84]	; 0x54
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	461a      	mov	r2, r3
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	1891      	adds	r1, r2, r2
 8005410:	61b9      	str	r1, [r7, #24]
 8005412:	415b      	adcs	r3, r3
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800541e:	f7fa fed9 	bl	80001d4 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4b6c      	ldr	r3, [pc, #432]	; (80055d8 <UART_SetConfig+0x38c>)
 8005428:	fba3 1302 	umull	r1, r3, r3, r2
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	2164      	movs	r1, #100	; 0x64
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	3332      	adds	r3, #50	; 0x32
 800543a:	4a67      	ldr	r2, [pc, #412]	; (80055d8 <UART_SetConfig+0x38c>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4432      	add	r2, r6
 800544c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800544e:	e0b9      	b.n	80055c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	461c      	mov	r4, r3
 8005454:	f04f 0500 	mov.w	r5, #0
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	1891      	adds	r1, r2, r2
 800545e:	6139      	str	r1, [r7, #16]
 8005460:	415b      	adcs	r3, r3
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005468:	1912      	adds	r2, r2, r4
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	00d9      	lsls	r1, r3, #3
 8005478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547c:	00d0      	lsls	r0, r2, #3
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	eb12 0804 	adds.w	r8, r2, r4
 8005486:	eb43 0905 	adc.w	r9, r3, r5
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	008b      	lsls	r3, r1, #2
 800549e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054a2:	0082      	lsls	r2, r0, #2
 80054a4:	4640      	mov	r0, r8
 80054a6:	4649      	mov	r1, r9
 80054a8:	f7fa fe94 	bl	80001d4 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b49      	ldr	r3, [pc, #292]	; (80055d8 <UART_SetConfig+0x38c>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011e      	lsls	r6, r3, #4
 80054ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054bc:	4618      	mov	r0, r3
 80054be:	f04f 0100 	mov.w	r1, #0
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	1894      	adds	r4, r2, r2
 80054c8:	60bc      	str	r4, [r7, #8]
 80054ca:	415b      	adcs	r3, r3
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054d2:	1812      	adds	r2, r2, r0
 80054d4:	eb41 0303 	adc.w	r3, r1, r3
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	f04f 0500 	mov.w	r5, #0
 80054e0:	00dd      	lsls	r5, r3, #3
 80054e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054e6:	00d4      	lsls	r4, r2, #3
 80054e8:	4622      	mov	r2, r4
 80054ea:	462b      	mov	r3, r5
 80054ec:	1814      	adds	r4, r2, r0
 80054ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80054f0:	414b      	adcs	r3, r1
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	008b      	lsls	r3, r1, #2
 8005508:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800550c:	0082      	lsls	r2, r0, #2
 800550e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005512:	f7fa fe5f 	bl	80001d4 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <UART_SetConfig+0x38c>)
 800551c:	fba3 1302 	umull	r1, r3, r3, r2
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	2164      	movs	r1, #100	; 0x64
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	3332      	adds	r3, #50	; 0x32
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <UART_SetConfig+0x38c>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553a:	441e      	add	r6, r3
 800553c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800553e:	4618      	mov	r0, r3
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	1894      	adds	r4, r2, r2
 800554a:	603c      	str	r4, [r7, #0]
 800554c:	415b      	adcs	r3, r3
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005554:	1812      	adds	r2, r2, r0
 8005556:	eb41 0303 	adc.w	r3, r1, r3
 800555a:	f04f 0400 	mov.w	r4, #0
 800555e:	f04f 0500 	mov.w	r5, #0
 8005562:	00dd      	lsls	r5, r3, #3
 8005564:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005568:	00d4      	lsls	r4, r2, #3
 800556a:	4622      	mov	r2, r4
 800556c:	462b      	mov	r3, r5
 800556e:	eb12 0a00 	adds.w	sl, r2, r0
 8005572:	eb43 0b01 	adc.w	fp, r3, r1
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4618      	mov	r0, r3
 800557c:	f04f 0100 	mov.w	r1, #0
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	008b      	lsls	r3, r1, #2
 800558a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800558e:	0082      	lsls	r2, r0, #2
 8005590:	4650      	mov	r0, sl
 8005592:	4659      	mov	r1, fp
 8005594:	f7fa fe1e 	bl	80001d4 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <UART_SetConfig+0x38c>)
 800559e:	fba3 1302 	umull	r1, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2164      	movs	r1, #100	; 0x64
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	3332      	adds	r3, #50	; 0x32
 80055b0:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <UART_SetConfig+0x38c>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	f003 020f 	and.w	r2, r3, #15
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4432      	add	r2, r6
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	377c      	adds	r7, #124	; 0x7c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ce:	bf00      	nop
 80055d0:	40011000 	.word	0x40011000
 80055d4:	40011400 	.word	0x40011400
 80055d8:	51eb851f 	.word	0x51eb851f

080055dc <__libc_init_array>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4d0d      	ldr	r5, [pc, #52]	; (8005614 <__libc_init_array+0x38>)
 80055e0:	4c0d      	ldr	r4, [pc, #52]	; (8005618 <__libc_init_array+0x3c>)
 80055e2:	1b64      	subs	r4, r4, r5
 80055e4:	10a4      	asrs	r4, r4, #2
 80055e6:	2600      	movs	r6, #0
 80055e8:	42a6      	cmp	r6, r4
 80055ea:	d109      	bne.n	8005600 <__libc_init_array+0x24>
 80055ec:	4d0b      	ldr	r5, [pc, #44]	; (800561c <__libc_init_array+0x40>)
 80055ee:	4c0c      	ldr	r4, [pc, #48]	; (8005620 <__libc_init_array+0x44>)
 80055f0:	f000 f82e 	bl	8005650 <_init>
 80055f4:	1b64      	subs	r4, r4, r5
 80055f6:	10a4      	asrs	r4, r4, #2
 80055f8:	2600      	movs	r6, #0
 80055fa:	42a6      	cmp	r6, r4
 80055fc:	d105      	bne.n	800560a <__libc_init_array+0x2e>
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	f855 3b04 	ldr.w	r3, [r5], #4
 8005604:	4798      	blx	r3
 8005606:	3601      	adds	r6, #1
 8005608:	e7ee      	b.n	80055e8 <__libc_init_array+0xc>
 800560a:	f855 3b04 	ldr.w	r3, [r5], #4
 800560e:	4798      	blx	r3
 8005610:	3601      	adds	r6, #1
 8005612:	e7f2      	b.n	80055fa <__libc_init_array+0x1e>
 8005614:	08005690 	.word	0x08005690
 8005618:	08005690 	.word	0x08005690
 800561c:	08005690 	.word	0x08005690
 8005620:	08005694 	.word	0x08005694

08005624 <memcpy>:
 8005624:	440a      	add	r2, r1
 8005626:	4291      	cmp	r1, r2
 8005628:	f100 33ff 	add.w	r3, r0, #4294967295
 800562c:	d100      	bne.n	8005630 <memcpy+0xc>
 800562e:	4770      	bx	lr
 8005630:	b510      	push	{r4, lr}
 8005632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800563a:	4291      	cmp	r1, r2
 800563c:	d1f9      	bne.n	8005632 <memcpy+0xe>
 800563e:	bd10      	pop	{r4, pc}

08005640 <memset>:
 8005640:	4402      	add	r2, r0
 8005642:	4603      	mov	r3, r0
 8005644:	4293      	cmp	r3, r2
 8005646:	d100      	bne.n	800564a <memset+0xa>
 8005648:	4770      	bx	lr
 800564a:	f803 1b01 	strb.w	r1, [r3], #1
 800564e:	e7f9      	b.n	8005644 <memset+0x4>

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
