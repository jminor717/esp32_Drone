
STM32_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e4  080060e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060ec  080060ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000078  08006170  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08006170  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016aa8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a1  00000000  00000000  00036b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c02a  00000000  00000000  0003c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001654c  00000000  00000000  0005844a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa61  00000000  00000000  0006e996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e3f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  0010e44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800608c 	.word	0x0800608c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	0800608c 	.word	0x0800608c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f005 fd0c 	bl	8005f04 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ec:	4b50      	ldr	r3, [pc, #320]	; (8000630 <MX_ADC1_Init+0x164>)
 80004ee:	4a51      	ldr	r2, [pc, #324]	; (8000634 <MX_ADC1_Init+0x168>)
 80004f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f2:	4b4f      	ldr	r3, [pc, #316]	; (8000630 <MX_ADC1_Init+0x164>)
 80004f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <MX_ADC1_Init+0x164>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000500:	4b4b      	ldr	r3, [pc, #300]	; (8000630 <MX_ADC1_Init+0x164>)
 8000502:	2201      	movs	r2, #1
 8000504:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000506:	4b4a      	ldr	r3, [pc, #296]	; (8000630 <MX_ADC1_Init+0x164>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <MX_ADC1_Init+0x164>)
 800050e:	2201      	movs	r2, #1
 8000510:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000514:	4b46      	ldr	r3, [pc, #280]	; (8000630 <MX_ADC1_Init+0x164>)
 8000516:	2201      	movs	r2, #1
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b45      	ldr	r3, [pc, #276]	; (8000630 <MX_ADC1_Init+0x164>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <MX_ADC1_Init+0x164>)
 8000522:	4a45      	ldr	r2, [pc, #276]	; (8000638 <MX_ADC1_Init+0x16c>)
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b42      	ldr	r3, [pc, #264]	; (8000630 <MX_ADC1_Init+0x164>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800052c:	4b40      	ldr	r3, [pc, #256]	; (8000630 <MX_ADC1_Init+0x164>)
 800052e:	2203      	movs	r2, #3
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <MX_ADC1_Init+0x164>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <MX_ADC1_Init+0x164>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	483b      	ldr	r0, [pc, #236]	; (8000630 <MX_ADC1_Init+0x164>)
 8000542:	f001 ff19 	bl	8002378 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 800054c:	f000 fce6 	bl	8000f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000550:	2305      	movs	r3, #5
 8000552:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000558:	2301      	movs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4619      	mov	r1, r3
 8000562:	4833      	ldr	r0, [pc, #204]	; (8000630 <MX_ADC1_Init+0x164>)
 8000564:	f002 f898 	bl	8002698 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800056e:	f000 fcd5 	bl	8000f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000572:	2306      	movs	r3, #6
 8000574:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000576:	2302      	movs	r3, #2
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4619      	mov	r1, r3
 8000580:	482b      	ldr	r0, [pc, #172]	; (8000630 <MX_ADC1_Init+0x164>)
 8000582:	f002 f889 	bl	8002698 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800058c:	f000 fcc6 	bl	8000f1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000590:	2307      	movs	r3, #7
 8000592:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4619      	mov	r1, r3
 800059e:	4824      	ldr	r0, [pc, #144]	; (8000630 <MX_ADC1_Init+0x164>)
 80005a0:	f002 f87a 	bl	8002698 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005aa:	f000 fcb7 	bl	8000f1c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80005ae:	2305      	movs	r3, #5
 80005b0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80005b6:	2303      	movs	r3, #3
 80005b8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_ADC1_Init+0x170>)
 80005c4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	4619      	mov	r1, r3
 80005d6:	4816      	ldr	r0, [pc, #88]	; (8000630 <MX_ADC1_Init+0x164>)
 80005d8:	f002 fa7c 	bl	8002ad4 <HAL_ADCEx_InjectedConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80005e2:	f000 fc9b 	bl	8000f1c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80005e6:	2306      	movs	r3, #6
 80005e8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 3;
 80005ee:	2303      	movs	r3, #3
 80005f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <MX_ADC1_Init+0x164>)
 80005f8:	f002 fa6c 	bl	8002ad4 <HAL_ADCEx_InjectedConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000602:	f000 fc8b 	bl	8000f1c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000606:	2307      	movs	r3, #7
 8000608:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 6;
 800060e:	2306      	movs	r3, #6
 8000610:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <MX_ADC1_Init+0x164>)
 8000618:	f002 fa5c 	bl	8002ad4 <HAL_ADCEx_InjectedConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8000622:	f000 fc7b 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	; 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200001e4 	.word	0x200001e4
 8000634:	40012000 	.word	0x40012000
 8000638:	0f000001 	.word	0x0f000001
 800063c:	000f0001 	.word	0x000f0001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a2f      	ldr	r2, [pc, #188]	; (800071c <HAL_ADC_MspInit+0xdc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d157      	bne.n	8000712 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a2d      	ldr	r2, [pc, #180]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a26      	ldr	r2, [pc, #152]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <HAL_ADC_MspInit+0xe0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN3_Pin|AIN2_Pin;
 800069a:	23e0      	movs	r3, #224	; 0xe0
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <HAL_ADC_MspInit+0xe4>)
 80006ae:	f003 f84b 	bl	8003748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_ADC_MspInit+0xec>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 80006f8:	f002 fc94 	bl	8003024 <HAL_DMA_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000702:	f000 fc0b 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_ADC_MspInit+0xe8>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	2000022c 	.word	0x2000022c
 800072c:	40026410 	.word	0x40026410

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_DMA_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <MX_DMA_Init+0xb8>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_DMA_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_DMA_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <MX_DMA_Init+0xb8>)
 800075c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_DMA_Init+0xb8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	200b      	movs	r0, #11
 8000774:	f002 fc1f 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000778:	200b      	movs	r0, #11
 800077a:	f002 fc38 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200c      	movs	r0, #12
 8000784:	f002 fc17 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000788:	200c      	movs	r0, #12
 800078a:	f002 fc30 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	200d      	movs	r0, #13
 8000794:	f002 fc0f 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000798:	200d      	movs	r0, #13
 800079a:	f002 fc28 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	200f      	movs	r0, #15
 80007a4:	f002 fc07 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a8:	200f      	movs	r0, #15
 80007aa:	f002 fc20 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2038      	movs	r0, #56	; 0x38
 80007b4:	f002 fbff 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b8:	2038      	movs	r0, #56	; 0x38
 80007ba:	f002 fc18 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	203a      	movs	r0, #58	; 0x3a
 80007c4:	f002 fbf7 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007c8:	203a      	movs	r0, #58	; 0x3a
 80007ca:	f002 fc10 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	203b      	movs	r0, #59	; 0x3b
 80007d4:	f002 fbef 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007d8:	203b      	movs	r0, #59	; 0x3b
 80007da:	f002 fc08 	bl	8002fee <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a30      	ldr	r2, [pc, #192]	; (80008cc <MX_GPIO_Init+0xe0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a29      	ldr	r2, [pc, #164]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MX_GPIO_Init+0xe4>)
 800087a:	f003 f901 	bl	8003a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_GPIO_Init+0xe4>)
 8000898:	f002 ff56 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_SPI_MODE_Pin;
 800089c:	2304      	movs	r3, #4
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xe8>)
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP32_SPI_MODE_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_GPIO_Init+0xec>)
 80008b0:	f002 ff4a 	bl	8003748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2008      	movs	r0, #8
 80008ba:	f002 fb7c 	bl	8002fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008be:	2008      	movs	r0, #8
 80008c0:	f002 fb95 	bl	8002fee <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	; 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	10310000 	.word	0x10310000
 80008d8:	40020400 	.word	0x40020400

080008dc <Set_GPIO_Mode>:

/* USER CODE BEGIN 2 */

void Set_GPIO_Mode( GPIO_TypeDef * PORT, uint8_t pin, uint8_t direction )
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
 80008e8:	4613      	mov	r3, r2
 80008ea:	70bb      	strb	r3, [r7, #2]
   // PORT->MODER |= ( direction<< ( pin * 2 ) );

    uint32_t temp = 0x00U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
    temp = PORT->MODER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	60fb      	str	r3, [r7, #12]
    temp &= ~(GPIO_MODER_MODER0 << (pin * 2U));
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
    temp |= ((direction & GPIO_MODE) << (pin * 2U));
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	f003 0203 	and.w	r2, r3, #3
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4313      	orrs	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
    PORT->MODER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	601a      	str	r2, [r3, #0]
//    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
//
//    //if(iocurrent == ioposition)
//
//
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <calculate_cksum>:
#include <string.h>

#define CRTP_MAX_DATA_SIZE 30

static uint8_t calculate_cksum(uint8_t *data, size_t len)
{
 800092e:	b480      	push	{r7}
 8000930:	b087      	sub	sp, #28
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
    unsigned char *c = data;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	617b      	str	r3, [r7, #20]
    int i;
    unsigned char cksum = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < len; i++)
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	e009      	b.n	800095a <calculate_cksum+0x2c>
    {
        cksum += *(c++);
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	617a      	str	r2, [r7, #20]
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	4413      	add	r3, r2
 8000952:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < len; i++)
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	3301      	adds	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d8f1      	bhi.n	8000946 <calculate_cksum+0x18>
    }

    return cksum;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	371c      	adds	r7, #28
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <CustomTickHandler>:
    }
    return (x - in_min) * (out_max - out_min) / divisor + out_min;
}

void CustomTickHandler(uint32_t tick)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    DSHOT_MOTOR_REFRESH = true;
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <CustomTickHandler+0x90>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
    CHECK_SPI_MODE_PIN = true;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <CustomTickHandler+0x94>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
    if (uwTick % HUMAN_READABLE_SPI == 0)
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <CustomTickHandler+0x98>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <CustomTickHandler+0x9c>)
 800098a:	fba3 1302 	umull	r1, r3, r3, r2
 800098e:	095b      	lsrs	r3, r3, #5
 8000990:	2164      	movs	r1, #100	; 0x64
 8000992:	fb01 f303 	mul.w	r3, r1, r3
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <CustomTickHandler+0x32>
    {
        SPI_REFRESH = true;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <CustomTickHandler+0xa0>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
    }
    if (uwTick + (ServoIndex * SERVO_PID_OFFSET) % SERVO_PID_PERIOD == 0)
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <CustomTickHandler+0xa4>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	005a      	lsls	r2, r3, #1
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <CustomTickHandler+0xa8>)
 80009aa:	fb83 1302 	smull	r1, r3, r3, r2
 80009ae:	1099      	asrs	r1, r3, #2
 80009b0:	17d3      	asrs	r3, r2, #31
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	460b      	mov	r3, r1
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	440b      	add	r3, r1
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	1ad1      	subs	r1, r2, r3
 80009be:	460a      	mov	r2, r1
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <CustomTickHandler+0x98>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d113      	bne.n	80009f2 <CustomTickHandler+0x82>
    {
        SERVO_REFRESH[ServoIndex] = true;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <CustomTickHandler+0xa4>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <CustomTickHandler+0xac>)
 80009d2:	2101      	movs	r1, #1
 80009d4:	5499      	strb	r1, [r3, r2]
        if (ServoIndex < SERVO_NUM_DIVISIONS - 1)
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <CustomTickHandler+0xa4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d806      	bhi.n	80009ec <CustomTickHandler+0x7c>
        {
            ServoIndex++;
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <CustomTickHandler+0xa4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <CustomTickHandler+0xa4>)
 80009e8:	701a      	strb	r2, [r3, #0]
        else
        {
            ServoIndex = 0;
        }
    }
}
 80009ea:	e002      	b.n	80009f2 <CustomTickHandler+0x82>
            ServoIndex = 0;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <CustomTickHandler+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000095 	.word	0x20000095
 8000a04:	20000096 	.word	0x20000096
 8000a08:	200006d0 	.word	0x200006d0
 8000a0c:	51eb851f 	.word	0x51eb851f
 8000a10:	20000094 	.word	0x20000094
 8000a14:	200001a0 	.word	0x200001a0
 8000a18:	66666667 	.word	0x66666667
 8000a1c:	20000098 	.word	0x20000098

08000a20 <HAL_SPI_TxRxCpltCallback>:
    my_motor_value[2] = x;
    my_motor_value[3] = x;
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

    memcpy(TX_Buffer, RX_Buffer, previousSpiSize);
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <HAL_SPI_TxRxCpltCallback+0x30>)
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000a32:	f005 fa59 	bl	8005ee8 <memcpy>

    SpiRxCplt = true;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
    SpiError = false;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000002 	.word	0x20000002
 8000a50:	200000a0 	.word	0x200000a0
 8000a54:	20000120 	.word	0x20000120
 8000a58:	200001a9 	.word	0x200001a9
 8000a5c:	200001aa 	.word	0x200001aa

08000a60 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    // nextSpiSize = defaultSpiSize;
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6c:	4808      	ldr	r0, [pc, #32]	; (8000a90 <HAL_SPI_ErrorCallback+0x30>)
 8000a6e:	f003 f820 	bl	8003ab2 <HAL_GPIO_TogglePin>

    SpiRxCplt = true;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_SPI_ErrorCallback+0x34>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
    SpiErrorCode = hspi->ErrorCode;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_SPI_ErrorCallback+0x38>)
 8000a7e:	6013      	str	r3, [r2, #0]
    SpiError = true;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_SPI_ErrorCallback+0x3c>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020800 	.word	0x40020800
 8000a94:	200001a9 	.word	0x200001a9
 8000a98:	200001a4 	.word	0x200001a4
 8000a9c:	200001aa 	.word	0x200001aa

08000aa0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
//    if (HAL_GPIO_ReadPin(ESP32_SPI_MODE_GPIO_Port, ESP32_SPI_MODE_Pin) == GPIO_PIN_RESET)
//    	ESP32_MODE_LOW_TO_HIGH = true;
//    else
//    	ESP32_MODE_HIGH_TO_LOW = true;

}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <RELEASE_SPI_BUS>:

void RELEASE_SPI_BUS()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    Set_GPIO_Mode(SPI1_CLK_GPIO_Port, SPI1_CLK_Pin_NUM, GPIO_MODE_AF_OD);
 8000abc:	2212      	movs	r2, #18
 8000abe:	2103      	movs	r1, #3
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <RELEASE_SPI_BUS+0x1c>)
 8000ac2:	f7ff ff0b 	bl	80008dc <Set_GPIO_Mode>
    Set_GPIO_Mode(SPI1_MOSI_GPIO_Port, SPI1_MOSI_Pin_NUM, GPIO_MODE_AF_OD);
 8000ac6:	2212      	movs	r2, #18
 8000ac8:	2105      	movs	r1, #5
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <RELEASE_SPI_BUS+0x1c>)
 8000acc:	f7ff ff06 	bl	80008dc <Set_GPIO_Mode>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <Take_SPI_BUS>:

void Take_SPI_BUS()
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    Set_GPIO_Mode(SPI1_CLK_GPIO_Port, SPI1_CLK_Pin_NUM, GPIO_MODE_AF_PP);
 8000adc:	2202      	movs	r2, #2
 8000ade:	2103      	movs	r1, #3
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <Take_SPI_BUS+0x1c>)
 8000ae2:	f7ff fefb 	bl	80008dc <Set_GPIO_Mode>
    Set_GPIO_Mode(SPI1_MOSI_GPIO_Port, SPI1_MOSI_Pin_NUM, GPIO_MODE_AF_PP);
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	2105      	movs	r1, #5
 8000aea:	4802      	ldr	r0, [pc, #8]	; (8000af4 <Take_SPI_BUS+0x1c>)
 8000aec:	f7ff fef6 	bl	80008dc <Set_GPIO_Mode>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40020400 	.word	0x40020400

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint16_t itter = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	82fb      	strh	r3, [r7, #22]
    uint32_t badTransactions = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f001 fbc5 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f99d 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff fe6d 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000b12:	f7ff fe0d 	bl	8000730 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b16:	f000 fc3f 	bl	8001398 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000b1a:	f001 fb1f 	bl	800215c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000b1e:	f000 fe6d 	bl	80017fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b22:	f000 ff7b 	bl	8001a1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b26:	f000 ffd3 	bl	8001ad0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b2a:	f001 f841 	bl	8001bb0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000b2e:	f7ff fccd 	bl	80004cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b32:	f000 ff1b 	bl	800196c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	489e      	ldr	r0, [pc, #632]	; (8000db4 <main+0x2bc>)
 8000b3c:	f002 ffb9 	bl	8003ab2 <HAL_GPIO_TogglePin>
    TX_Buffer[0] = 0;
 8000b40:	4b9d      	ldr	r3, [pc, #628]	; (8000db8 <main+0x2c0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
    TX_Buffer[1] = 1;
 8000b46:	4b9c      	ldr	r3, [pc, #624]	; (8000db8 <main+0x2c0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	705a      	strb	r2, [r3, #1]
    TX_Buffer[2] = 2;
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <main+0x2c0>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	709a      	strb	r2, [r3, #2]
    TX_Buffer[3] = 3;
 8000b52:	4b99      	ldr	r3, [pc, #612]	; (8000db8 <main+0x2c0>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	70da      	strb	r2, [r3, #3]
    TX_Buffer[4] = 4;
 8000b58:	4b97      	ldr	r3, [pc, #604]	; (8000db8 <main+0x2c0>)
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	711a      	strb	r2, [r3, #4]
    TX_Buffer[5] = 5;
 8000b5e:	4b96      	ldr	r3, [pc, #600]	; (8000db8 <main+0x2c0>)
 8000b60:	2205      	movs	r2, #5
 8000b62:	715a      	strb	r2, [r3, #5]
    TX_Buffer[6] = 6;
 8000b64:	4b94      	ldr	r3, [pc, #592]	; (8000db8 <main+0x2c0>)
 8000b66:	2206      	movs	r2, #6
 8000b68:	719a      	strb	r2, [r3, #6]
    TX_Buffer[7] = 7;
 8000b6a:	4b93      	ldr	r3, [pc, #588]	; (8000db8 <main+0x2c0>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	71da      	strb	r2, [r3, #7]
    TX_Buffer[8] = 8;
 8000b70:	4b91      	ldr	r3, [pc, #580]	; (8000db8 <main+0x2c0>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	721a      	strb	r2, [r3, #8]
    // HAL_SPI_RegisterCallback();

    HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
 8000b76:	4b91      	ldr	r3, [pc, #580]	; (8000dbc <main+0x2c4>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4a90      	ldr	r2, [pc, #576]	; (8000dc0 <main+0x2c8>)
 8000b7e:	498e      	ldr	r1, [pc, #568]	; (8000db8 <main+0x2c0>)
 8000b80:	4890      	ldr	r0, [pc, #576]	; (8000dc4 <main+0x2cc>)
 8000b82:	f003 fc9b 	bl	80044bc <HAL_SPI_TransmitReceive_DMA>
    // HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
    // HAL_SPI_TransmitReceive_IT(&hspi1, TX_Buffer, RX_Buffer, BUFFER_SIZE);
    //  dshot_init(DSHOT600);
    uint8_t crcIn = 0, crcOut = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73bb      	strb	r3, [r7, #14]
    bool switchc = false;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	737b      	strb	r3, [r7, #13]
    SPI_ESP_PACKET_HEADER rxHeader;
    ServosInit();
 8000b92:	f000 fa6d 	bl	8001070 <ServosInit>
    int16_t CH1_DC = 0, incremnt = 8;
 8000b96:	2300      	movs	r3, #0
 8000b98:	817b      	strh	r3, [r7, #10]
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	813b      	strh	r3, [r7, #8]
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //
        if (SpiRxCplt)
 8000b9e:	4b8a      	ldr	r3, [pc, #552]	; (8000dc8 <main+0x2d0>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d06c      	beq.n	8000c82 <main+0x18a>
        {
            SpiRxCplt = false;
 8000ba8:	4b87      	ldr	r3, [pc, #540]	; (8000dc8 <main+0x2d0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
            SpiAvalable = true;
 8000bae:	4b87      	ldr	r3, [pc, #540]	; (8000dcc <main+0x2d4>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
            itter++;
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	82fb      	strh	r3, [r7, #22]
            crcIn = RX_Buffer[0];
 8000bba:	4b81      	ldr	r3, [pc, #516]	; (8000dc0 <main+0x2c8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	73fb      	strb	r3, [r7, #15]
            crcOut = calculate_cksum(RX_Buffer + 1, 4 - 1);
 8000bc0:	4b83      	ldr	r3, [pc, #524]	; (8000dd0 <main+0x2d8>)
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff feb2 	bl	800092e <calculate_cksum>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73bb      	strb	r3, [r7, #14]
            if (crcOut == crcIn && RX_Buffer[1] != 0)
 8000bce:	7bba      	ldrb	r2, [r7, #14]
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d124      	bne.n	8000c20 <main+0x128>
 8000bd6:	4b7a      	ldr	r3, [pc, #488]	; (8000dc0 <main+0x2c8>)
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d020      	beq.n	8000c20 <main+0x128>
            {
                memcpy(&rxHeader, RX_Buffer, sizeof(SPI_ESP_PACKET_HEADER));
 8000bde:	4a78      	ldr	r2, [pc, #480]	; (8000dc0 <main+0x2c8>)
 8000be0:	463b      	mov	r3, r7
 8000be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be6:	6018      	str	r0, [r3, #0]
 8000be8:	3304      	adds	r3, #4
 8000bea:	7019      	strb	r1, [r3, #0]
                if (rxHeader.radioSendData == 1)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d004      	beq.n	8000c02 <main+0x10a>
                {
                    ESP32HasBus = true;
 8000bf8:	4b76      	ldr	r3, [pc, #472]	; (8000dd4 <main+0x2dc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
                    RELEASE_SPI_BUS();
 8000bfe:	f7ff ff5b 	bl	8000ab8 <RELEASE_SPI_BUS>
                }

                nextSpiSize++;
 8000c02:	4b6e      	ldr	r3, [pc, #440]	; (8000dbc <main+0x2c4>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <main+0x2c4>)
 8000c0c:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000c0e:	4b6b      	ldr	r3, [pc, #428]	; (8000dbc <main+0x2c4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b1c      	cmp	r3, #28
 8000c14:	d90d      	bls.n	8000c32 <main+0x13a>
                {
                    nextSpiSize = defaultSpiSize;
 8000c16:	4b70      	ldr	r3, [pc, #448]	; (8000dd8 <main+0x2e0>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	4b68      	ldr	r3, [pc, #416]	; (8000dbc <main+0x2c4>)
 8000c1c:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000c1e:	e008      	b.n	8000c32 <main+0x13a>
                }
            }
            else
            {
                HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4863      	ldr	r0, [pc, #396]	; (8000db4 <main+0x2bc>)
 8000c26:	f002 ff44 	bl	8003ab2 <HAL_GPIO_TogglePin>
                nextSpiSize = defaultSpiSize;
 8000c2a:	4b6b      	ldr	r3, [pc, #428]	; (8000dd8 <main+0x2e0>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <main+0x2c4>)
 8000c30:	701a      	strb	r2, [r3, #0]
            }
            if (crcOut != crcIn)
 8000c32:	7bba      	ldrb	r2, [r7, #14]
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d002      	beq.n	8000c40 <main+0x148>
            {
                badTransactions++;
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
            }

            if (switchc)
 8000c40:	7b7b      	ldrb	r3, [r7, #13]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00f      	beq.n	8000c66 <main+0x16e>
            {
                SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_64);
 8000c46:	4b5f      	ldr	r3, [pc, #380]	; (8000dc4 <main+0x2cc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <main+0x2cc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	4b5b      	ldr	r3, [pc, #364]	; (8000dc4 <main+0x2cc>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <main+0x2cc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8000c64:	601a      	str	r2, [r3, #0]
            else
            {
               // SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_128);
            }

            switchc = !switchc;
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	737b      	strb	r3, [r7, #13]
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	737b      	strb	r3, [r7, #13]
        }

        if (SpiError)
 8000c82:	4b56      	ldr	r3, [pc, #344]	; (8000ddc <main+0x2e4>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00f      	beq.n	8000cac <main+0x1b4>
        {
            SpiError = false;
 8000c8c:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <main+0x2e4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
            // HAL_SPI_MspDeInit(&hspi1);
            //   MX_SPI1_Init();
            TX_Buffer[5] = (SpiRxCplt & 0xff00) >> 8;
 8000c92:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <main+0x2d0>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	121b      	asrs	r3, r3, #8
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <main+0x2c0>)
 8000c9e:	715a      	strb	r2, [r3, #5]
            TX_Buffer[6] = (SpiRxCplt & 0x00ff);
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <main+0x2d0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <main+0x2c0>)
 8000caa:	719a      	strb	r2, [r3, #6]
            // HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
        }

        if (SPI_REFRESH && SpiAvalable && !ESP32HasBus)
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <main+0x2e8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d03f      	beq.n	8000d34 <main+0x23c>
 8000cb4:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <main+0x2d4>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d03b      	beq.n	8000d34 <main+0x23c>
 8000cbc:	4b45      	ldr	r3, [pc, #276]	; (8000dd4 <main+0x2dc>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f083 0301 	eor.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d034      	beq.n	8000d34 <main+0x23c>
        {
            SPI_REFRESH = false;
 8000cca:	4b45      	ldr	r3, [pc, #276]	; (8000de0 <main+0x2e8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
            SpiAvalable = false;
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <main+0x2d4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
            TX_Buffer[9] = crcOut;
 8000cd6:	4a38      	ldr	r2, [pc, #224]	; (8000db8 <main+0x2c0>)
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	7253      	strb	r3, [r2, #9]
            TX_Buffer[8] = crcIn;
 8000cdc:	4a36      	ldr	r2, [pc, #216]	; (8000db8 <main+0x2c0>)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	7213      	strb	r3, [r2, #8]
            TX_Buffer[7] = (++itter & 0xff00) >> 8;
 8000ce2:	8afb      	ldrh	r3, [r7, #22]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	82fb      	strh	r3, [r7, #22]
 8000ce8:	8afb      	ldrh	r3, [r7, #22]
 8000cea:	121b      	asrs	r3, r3, #8
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b32      	ldr	r3, [pc, #200]	; (8000db8 <main+0x2c0>)
 8000cf0:	71da      	strb	r2, [r3, #7]
            TX_Buffer[6] = itter & 0x00ff;
 8000cf2:	8afb      	ldrh	r3, [r7, #22]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x2c0>)
 8000cf8:	719a      	strb	r2, [r3, #6]
            TX_Buffer[2] = badTransactions;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <main+0x2c0>)
 8000d00:	709a      	strb	r2, [r3, #2]
            TX_Buffer[1] = nextSpiSize;
 8000d02:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <main+0x2c4>)
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	4b2c      	ldr	r3, [pc, #176]	; (8000db8 <main+0x2c0>)
 8000d08:	705a      	strb	r2, [r3, #1]
            TX_Buffer[0] = calculate_cksum(TX_Buffer + 1, 4 - 1);
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <main+0x2ec>)
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fe0d 	bl	800092e <calculate_cksum>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <main+0x2c0>)
 8000d1a:	701a      	strb	r2, [r3, #0]

            HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, previousSpiSize);
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <main+0x2f0>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <main+0x2c8>)
 8000d24:	4924      	ldr	r1, [pc, #144]	; (8000db8 <main+0x2c0>)
 8000d26:	4827      	ldr	r0, [pc, #156]	; (8000dc4 <main+0x2cc>)
 8000d28:	f003 fbc8 	bl	80044bc <HAL_SPI_TransmitReceive_DMA>
            previousSpiSize = nextSpiSize;
 8000d2c:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <main+0x2c4>)
 8000d2e:	781a      	ldrb	r2, [r3, #0]
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <main+0x2f0>)
 8000d32:	701a      	strb	r2, [r3, #0]
        }
        if(ESP32_MODE_NOW_LOW){
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <main+0x2f4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <main+0x256>
        	ESP32_MODE_NOW_LOW = false;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x2f4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
        	RELEASE_SPI_BUS();
 8000d44:	f7ff feb8 	bl	8000ab8 <RELEASE_SPI_BUS>
        	ESP32HasBus = true;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <main+0x2dc>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
        }
        if(ESP32_MODE_NOW_HIGH){
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <main+0x2f8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d007      	beq.n	8000d68 <main+0x270>
        	ESP32_MODE_NOW_HIGH = false;
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <main+0x2f8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
        	Take_SPI_BUS();
 8000d5e:	f7ff febb 	bl	8000ad8 <Take_SPI_BUS>
        	ESP32HasBus = false;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <main+0x2dc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
        }

        if (DSHOT_MOTOR_REFRESH)
 8000d68:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <main+0x2fc>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00f      	beq.n	8000d90 <main+0x298>
        {
            DSHOT_MOTOR_REFRESH = false;
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <main+0x2fc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
            // HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
            HAL_ADC_Start(&hadc1);
 8000d76:	4820      	ldr	r0, [pc, #128]	; (8000df8 <main+0x300>)
 8000d78:	f001 fb42 	bl	8002400 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 100);
 8000d7c:	2164      	movs	r1, #100	; 0x64
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <main+0x300>)
 8000d80:	f001 fbf2 	bl	8002568 <HAL_ADC_PollForConversion>
            AD_RES = HAL_ADC_GetValue(&hadc1);
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <main+0x300>)
 8000d86:	f001 fc7a 	bl	800267e <HAL_ADC_GetValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <main+0x304>)
 8000d8e:	6013      	str	r3, [r2, #0]
        }
        if(CHECK_SPI_MODE_PIN){
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <main+0x308>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d03a      	beq.n	8000e0e <main+0x316>
        	CHECK_SPI_MODE_PIN = false;
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <main+0x308>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
            if (HAL_GPIO_ReadPin(ESP32_SPI_MODE_GPIO_Port, ESP32_SPI_MODE_Pin) == GPIO_PIN_RESET)
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <main+0x30c>)
 8000da2:	f002 fe55 	bl	8003a50 <HAL_GPIO_ReadPin>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d12d      	bne.n	8000e08 <main+0x310>
            	ESP32_MODE_NOW_LOW = true;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <main+0x2f4>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]
 8000db2:	e02c      	b.n	8000e0e <main+0x316>
 8000db4:	40020800 	.word	0x40020800
 8000db8:	20000120 	.word	0x20000120
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	200000a0 	.word	0x200000a0
 8000dc4:	2000028c 	.word	0x2000028c
 8000dc8:	200001a9 	.word	0x200001a9
 8000dcc:	20000003 	.word	0x20000003
 8000dd0:	200000a1 	.word	0x200000a1
 8000dd4:	200001a8 	.word	0x200001a8
 8000dd8:	20000001 	.word	0x20000001
 8000ddc:	200001aa 	.word	0x200001aa
 8000de0:	20000094 	.word	0x20000094
 8000de4:	20000121 	.word	0x20000121
 8000de8:	20000002 	.word	0x20000002
 8000dec:	200001ab 	.word	0x200001ab
 8000df0:	200001ac 	.word	0x200001ac
 8000df4:	20000095 	.word	0x20000095
 8000df8:	200001e4 	.word	0x200001e4
 8000dfc:	200001b0 	.word	0x200001b0
 8000e00:	20000096 	.word	0x20000096
 8000e04:	40020400 	.word	0x40020400
            else
            	ESP32_MODE_NOW_HIGH = true;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <main+0x34c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
        }


        if(CH1_DC > 2048)
 8000e0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e16:	dd02      	ble.n	8000e1e <main+0x326>
        {
        	incremnt = -8;
 8000e18:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e1c:	813b      	strh	r3, [r7, #8]
        }
        if(CH1_DC < -2048)
 8000e1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e22:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000e26:	da01      	bge.n	8000e2c <main+0x334>
        {
        	incremnt = 8;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	813b      	strh	r3, [r7, #8]

        }

        CH1_DC += incremnt;
 8000e2c:	897a      	ldrh	r2, [r7, #10]
 8000e2e:	893b      	ldrh	r3, [r7, #8]
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	817b      	strh	r3, [r7, #10]
        SetServoAngle(CH1_DC,1);
 8000e36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f943 	bl	80010c8 <SetServoAngle>
        if (SpiRxCplt)
 8000e42:	e6ac      	b.n	8000b9e <main+0xa6>
 8000e44:	200001ac 	.word	0x200001ac

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 f854 	bl	8005f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <SystemClock_Config+0xcc>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ec0:	23a0      	movs	r3, #160	; 0xa0
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ecc:	f107 0320 	add.w	r3, r7, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fe21 	bl	8003b18 <HAL_RCC_OscConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000edc:	f000 f81e 	bl	8000f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2102      	movs	r1, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f883 	bl	8004008 <HAL_RCC_ClockConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f08:	f000 f808 	bl	8000f1c <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3750      	adds	r7, #80	; 0x50
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000f24:	e7fe      	b.n	8000f24 <Error_Handler+0x8>
	...

08000f28 <_ZN13AbstractServoC1Es>:
{
public:
    int16_t Angle = 0;
    virtual void SetAngle(int16_t Angle) = 0;
    virtual void Init() = 0;
    AbstractServo(int16_t i) { Angle = i; }
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <_ZN13AbstractServoC1Es+0x2c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	809a      	strh	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	809a      	strh	r2, [r3, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	080060bc 	.word	0x080060bc

08000f58 <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_>:
    TIM_HandleTypeDef MN_Tim;
    uint32_t MN_Chan;
    volatile uint32_t *MN_CCR;

public:
    DirectControllServo(
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	f107 0014 	add.w	r0, r7, #20
 8000f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        TIM_HandleTypeDef _MP_Tim, uint32_t _MP_Chan, volatile uint32_t *_MP_CCR,
        TIM_HandleTypeDef _MN_Tim, uint32_t _MN_Chan, volatile uint32_t *_MN_CCR) : AbstractServo(0)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffda 	bl	8000f28 <_ZN13AbstractServoC1Es>
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
    {
        MP_Tim = _MP_Tim;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	f107 0114 	add.w	r1, r7, #20
 8000f82:	2248      	movs	r2, #72	; 0x48
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 ffaf 	bl	8005ee8 <memcpy>
        MP_Chan = _MP_Chan;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f8e:	651a      	str	r2, [r3, #80]	; 0x50
        MP_CCR = _MP_CCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f94:	655a      	str	r2, [r3, #84]	; 0x54
        MN_Tim = _MN_Tim;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3358      	adds	r3, #88	; 0x58
 8000f9a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000f9e:	2248      	movs	r2, #72	; 0x48
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f004 ffa1 	bl	8005ee8 <memcpy>
        MN_Chan = _MN_Chan;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000fac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        MN_CCR = _MN_CCR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000fb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    }
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc6:	b004      	add	sp, #16
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	080060ac 	.word	0x080060ac

08000fd0 <_ZN19DirectControllServo8SetAngleEs>:
    void SetAngle(int16_t Angle) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
//    	*MP_CCR = Angle;
//    	*MN_CCR = Angle;
    	//TIM1->CCR1 = Angle;
    	if(Angle > 0){
 8000fdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd0a      	ble.n	8000ffa <_ZN19DirectControllServo8SetAngleEs+0x2a>
    		*MN_CCR = Angle;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000fee:	601a      	str	r2, [r3, #0]
    		*MP_CCR = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    	}
    	else{
    		*MP_CCR = 0;
    		*MN_CCR = 0;
    	}
    }
 8000ff8:	e018      	b.n	800102c <_ZN19DirectControllServo8SetAngleEs+0x5c>
    	else if (Angle < 0)
 8000ffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da0b      	bge.n	800101a <_ZN19DirectControllServo8SetAngleEs+0x4a>
    		*MP_CCR = -Angle;
 8001002:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001006:	425a      	negs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100c:	601a      	str	r2, [r3, #0]
    		*MN_CCR = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
    }
 8001018:	e008      	b.n	800102c <_ZN19DirectControllServo8SetAngleEs+0x5c>
    		*MP_CCR = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
    		*MN_CCR = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
    }
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZN19DirectControllServo4InitEv>:
    void Init()
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    {
        HAL_TIM_PWM_Start(&MP_Tim, MP_Chan);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f103 0208 	add.w	r2, r3, #8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f003 ff0f 	bl	8004e70 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&MN_Tim, MN_Chan);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f003 ff05 	bl	8004e70 <HAL_TIM_PWM_Start>
    }
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <ServosInit>:
AbstractServo *Servos[STM32NumServos] = {M1, M2, M3, M4};

extern "C"
{
    void ServosInit()
    {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <ServosInit+0x4c>)
 800107a:	f003 fef9 	bl	8004e70 <HAL_TIM_PWM_Start>
         HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800107e:	2100      	movs	r1, #0
 8001080:	480f      	ldr	r0, [pc, #60]	; (80010c0 <ServosInit+0x50>)
 8001082:	f003 fef5 	bl	8004e70 <HAL_TIM_PWM_Start>
         for (size_t i = 0; i < STM32NumServos; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d810      	bhi.n	80010b2 <ServosInit+0x42>
         {
             Servos[i]->Init();
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <ServosInit+0x54>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001098:	490a      	ldr	r1, [pc, #40]	; (80010c4 <ServosInit+0x54>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4610      	mov	r0, r2
 80010a8:	4798      	blx	r3
         for (size_t i = 0; i < STM32NumServos; i++)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e7eb      	b.n	800108a <ServosInit+0x1a>
        }
    }
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200005fc 	.word	0x200005fc
 80010c0:	20000644 	.word	0x20000644
 80010c4:	200001c4 	.word	0x200001c4

080010c8 <SetServoAngle>:

    void SetServoAngle(int16_t angle, uint16_t servoNum)
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	80fb      	strh	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80bb      	strh	r3, [r7, #4]
    	Servos[servoNum]->SetAngle(angle);
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <SetServoAngle+0x34>)
 80010dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	4906      	ldr	r1, [pc, #24]	; (80010fc <SetServoAngle+0x34>)
 80010e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010f0:	4610      	mov	r0, r2
 80010f2:	4798      	blx	r3
    }
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001c4 	.word	0x200001c4

08001100 <_Z41__static_initialization_and_destruction_0ii>:

};
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8001106:	af26      	add	r7, sp, #152	; 0x98
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	6018      	str	r0, [r3, #0]
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	6019      	str	r1, [r3, #0]
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	f040 810c 	bne.w	8001338 <_Z41__static_initialization_and_destruction_0ii+0x238>
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112a:	4293      	cmp	r3, r2
 800112c:	f040 8104 	bne.w	8001338 <_Z41__static_initialization_and_destruction_0ii+0x238>
AbstractServo *M1 = new DirectControllServo(
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4a83      	ldr	r2, [pc, #524]	; (8001344 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8001136:	4618      	mov	r0, r3
 8001138:	4611      	mov	r1, r2
 800113a:	2348      	movs	r3, #72	; 0x48
 800113c:	461a      	mov	r2, r3
 800113e:	f004 fed3 	bl	8005ee8 <memcpy>
 8001142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001146:	4a7f      	ldr	r2, [pc, #508]	; (8001344 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8001148:	4618      	mov	r0, r3
 800114a:	4611      	mov	r1, r2
 800114c:	2348      	movs	r3, #72	; 0x48
 800114e:	461a      	mov	r2, r3
 8001150:	f004 feca 	bl	8005ee8 <memcpy>
    htim1, TIM_CHANNEL_3, &TIM1->CCR3);
 8001154:	20a8      	movs	r0, #168	; 0xa8
 8001156:	f004 fe5f 	bl	8005e18 <_Znwj>
 800115a:	4603      	mov	r3, r0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	f107 0610 	add.w	r6, r7, #16
 8001162:	4b79      	ldr	r3, [pc, #484]	; (8001348 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8001164:	9324      	str	r3, [sp, #144]	; 0x90
 8001166:	2308      	movs	r3, #8
 8001168:	9323      	str	r3, [sp, #140]	; 0x8c
 800116a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800116e:	ab11      	add	r3, sp, #68	; 0x44
 8001170:	4611      	mov	r1, r2
 8001172:	2248      	movs	r2, #72	; 0x48
 8001174:	4618      	mov	r0, r3
 8001176:	f004 feb7 	bl	8005ee8 <memcpy>
 800117a:	4b74      	ldr	r3, [pc, #464]	; (800134c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 800117c:	9310      	str	r3, [sp, #64]	; 0x40
 800117e:	2304      	movs	r3, #4
 8001180:	930f      	str	r3, [sp, #60]	; 0x3c
 8001182:	466d      	mov	r5, sp
 8001184:	f106 040c 	add.w	r4, r6, #12
 8001188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001194:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001198:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800119c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011a0:	687c      	ldr	r4, [r7, #4]
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fed8 	bl	8000f58 <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_>
AbstractServo *M1 = new DirectControllServo(
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80011aa:	4622      	mov	r2, r4
 80011ac:	601a      	str	r2, [r3, #0]
AbstractServo *M2 = new DirectControllServo(
 80011ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b2:	4a68      	ldr	r2, [pc, #416]	; (8001354 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	4611      	mov	r1, r2
 80011b8:	2348      	movs	r3, #72	; 0x48
 80011ba:	461a      	mov	r2, r3
 80011bc:	f004 fe94 	bl	8005ee8 <memcpy>
 80011c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011c4:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	4611      	mov	r1, r2
 80011ca:	2348      	movs	r3, #72	; 0x48
 80011cc:	461a      	mov	r2, r3
 80011ce:	f004 fe8b 	bl	8005ee8 <memcpy>
    htim1, TIM_CHANNEL_1, &TIM1->CCR1);
 80011d2:	20a8      	movs	r0, #168	; 0xa8
 80011d4:	f004 fe20 	bl	8005e18 <_Znwj>
 80011d8:	4603      	mov	r3, r0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	f107 06a0 	add.w	r6, r7, #160	; 0xa0
 80011e0:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80011e2:	9324      	str	r3, [sp, #144]	; 0x90
 80011e4:	2300      	movs	r3, #0
 80011e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80011e8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80011ec:	ab11      	add	r3, sp, #68	; 0x44
 80011ee:	4611      	mov	r1, r2
 80011f0:	2248      	movs	r2, #72	; 0x48
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fe78 	bl	8005ee8 <memcpy>
 80011f8:	4b58      	ldr	r3, [pc, #352]	; (800135c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80011fa:	9310      	str	r3, [sp, #64]	; 0x40
 80011fc:	2300      	movs	r3, #0
 80011fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001200:	466d      	mov	r5, sp
 8001202:	f106 040c 	add.w	r4, r6, #12
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001212:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001216:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800121a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800121e:	687c      	ldr	r4, [r7, #4]
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff fe99 	bl	8000f58 <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_>
AbstractServo *M2 = new DirectControllServo(
 8001226:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8001228:	4622      	mov	r2, r4
 800122a:	601a      	str	r2, [r3, #0]
AbstractServo *M3 = new DirectControllServo(
 800122c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001230:	4a4c      	ldr	r2, [pc, #304]	; (8001364 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8001232:	4618      	mov	r0, r3
 8001234:	4611      	mov	r1, r2
 8001236:	2348      	movs	r3, #72	; 0x48
 8001238:	461a      	mov	r2, r3
 800123a:	f004 fe55 	bl	8005ee8 <memcpy>
 800123e:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8001240:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001244:	4611      	mov	r1, r2
 8001246:	2248      	movs	r2, #72	; 0x48
 8001248:	4618      	mov	r0, r3
 800124a:	f004 fe4d 	bl	8005ee8 <memcpy>
    htim4, TIM_CHANNEL_1, &TIM4->CCR1);
 800124e:	20a8      	movs	r0, #168	; 0xa8
 8001250:	f004 fde2 	bl	8005e18 <_Znwj>
 8001254:	4603      	mov	r3, r0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	f507 7698 	add.w	r6, r7, #304	; 0x130
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800125e:	9324      	str	r3, [sp, #144]	; 0x90
 8001260:	2300      	movs	r3, #0
 8001262:	9323      	str	r3, [sp, #140]	; 0x8c
 8001264:	a811      	add	r0, sp, #68	; 0x44
 8001266:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800126a:	2248      	movs	r2, #72	; 0x48
 800126c:	4619      	mov	r1, r3
 800126e:	f004 fe3b 	bl	8005ee8 <memcpy>
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001274:	9310      	str	r3, [sp, #64]	; 0x40
 8001276:	2308      	movs	r3, #8
 8001278:	930f      	str	r3, [sp, #60]	; 0x3c
 800127a:	466d      	mov	r5, sp
 800127c:	f106 040c 	add.w	r4, r6, #12
 8001280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001290:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001294:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001298:	687c      	ldr	r4, [r7, #4]
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff fe5c 	bl	8000f58 <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_>
AbstractServo *M3 = new DirectControllServo(
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80012a2:	4622      	mov	r2, r4
 80012a4:	601a      	str	r2, [r3, #0]
AbstractServo *M4 = new DirectControllServo(
 80012a6:	4a30      	ldr	r2, [pc, #192]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80012a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80012ac:	4611      	mov	r1, r2
 80012ae:	2248      	movs	r2, #72	; 0x48
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fe19 	bl	8005ee8 <memcpy>
 80012b6:	4a2c      	ldr	r2, [pc, #176]	; (8001368 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80012b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012bc:	4611      	mov	r1, r2
 80012be:	2248      	movs	r2, #72	; 0x48
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fe11 	bl	8005ee8 <memcpy>
    htim4, TIM_CHANNEL_2, &TIM4->CCR2);
 80012c6:	20a8      	movs	r0, #168	; 0xa8
 80012c8:	f004 fda6 	bl	8005e18 <_Znwj>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461e      	mov	r6, r3
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80012d2:	9324      	str	r3, [sp, #144]	; 0x90
 80012d4:	2304      	movs	r3, #4
 80012d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80012d8:	a811      	add	r0, sp, #68	; 0x44
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	2248      	movs	r2, #72	; 0x48
 80012e0:	4619      	mov	r1, r3
 80012e2:	f004 fe01 	bl	8005ee8 <memcpy>
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80012e8:	9310      	str	r3, [sp, #64]	; 0x40
 80012ea:	2308      	movs	r3, #8
 80012ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80012ee:	466d      	mov	r5, sp
 80012f0:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001304:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001308:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800130c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130e:	4630      	mov	r0, r6
 8001310:	f7ff fe22 	bl	8000f58 <_ZN19DirectControllServoC1E17TIM_HandleTypeDefmPVmS0_mS2_>
AbstractServo *M4 = new DirectControllServo(
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8001316:	601e      	str	r6, [r3, #0]
AbstractServo *Servos[STM32NumServos] = {M1, M2, M3, M4};
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8001326:	6053      	str	r3, [r2, #4]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a15      	ldr	r2, [pc, #84]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 800132e:	6093      	str	r3, [r2, #8]
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8001336:	60d3      	str	r3, [r2, #12]
};
 8001338:	bf00      	nop
 800133a:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800133e:	46bd      	mov	sp, r7
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	bf00      	nop
 8001344:	200005fc 	.word	0x200005fc
 8001348:	4001003c 	.word	0x4001003c
 800134c:	40010038 	.word	0x40010038
 8001350:	200001b4 	.word	0x200001b4
 8001354:	20000644 	.word	0x20000644
 8001358:	40010034 	.word	0x40010034
 800135c:	40000034 	.word	0x40000034
 8001360:	200001b8 	.word	0x200001b8
 8001364:	200004f4 	.word	0x200004f4
 8001368:	20000404 	.word	0x20000404
 800136c:	40000834 	.word	0x40000834
 8001370:	4000043c 	.word	0x4000043c
 8001374:	200001bc 	.word	0x200001bc
 8001378:	40000838 	.word	0x40000838
 800137c:	4000083c 	.word	0x4000083c
 8001380:	200001c0 	.word	0x200001c0
 8001384:	200001c4 	.word	0x200001c4

08001388 <_GLOBAL__sub_I_M1>:
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
 800138c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff feb5 	bl	8001100 <_Z41__static_initialization_and_destruction_0ii>
 8001396:	bd80      	pop	{r7, pc}

08001398 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_SPI1_Init+0x64>)
 800139e:	4a18      	ldr	r2, [pc, #96]	; (8001400 <MX_SPI1_Init+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_SPI1_Init+0x64>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_SPI1_Init+0x64>)
 80013c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_SPI1_Init+0x64>)
 80013cc:	2228      	movs	r2, #40	; 0x28
 80013ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_SPI1_Init+0x64>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_SPI1_Init+0x64>)
 80013e4:	220a      	movs	r2, #10
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_SPI1_Init+0x64>)
 80013ea:	f002 ffdd 	bl	80043a8 <HAL_SPI_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013f4:	f7ff fd92 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000028c 	.word	0x2000028c
 8001400:	40013000 	.word	0x40013000

08001404 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a60      	ldr	r2, [pc, #384]	; (80015a4 <HAL_SPI_MspInit+0x1a0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	f040 80b9 	bne.w	800159a <HAL_SPI_MspInit+0x196>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 8001432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001436:	6453      	str	r3, [r2, #68]	; 0x44
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a56      	ldr	r2, [pc, #344]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b54      	ldr	r3, [pc, #336]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a4f      	ldr	r2, [pc, #316]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	6313      	str	r3, [r2, #48]	; 0x30
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <HAL_SPI_MspInit+0x1a4>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800147c:	2310      	movs	r3, #16
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001488:	2301      	movs	r3, #1
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800148c:	2305      	movs	r3, #5
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4845      	ldr	r0, [pc, #276]	; (80015ac <HAL_SPI_MspInit+0x1a8>)
 8001498:	f002 f956 	bl	8003748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_CLK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800149c:	2338      	movs	r3, #56	; 0x38
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ac:	2305      	movs	r3, #5
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	483e      	ldr	r0, [pc, #248]	; (80015b0 <HAL_SPI_MspInit+0x1ac>)
 80014b8:	f002 f946 	bl	8003748 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014be:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <HAL_SPI_MspInit+0x1b4>)
 80014c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014ea:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014fe:	482d      	ldr	r0, [pc, #180]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 8001500:	f001 fd90 	bl	8003024 <HAL_DMA_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 800150a:	f7ff fd07 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 8001512:	64da      	str	r2, [r3, #76]	; 0x4c
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_SPI_MspInit+0x1b0>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_SPI_MspInit+0x1bc>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001522:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001526:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001550:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001554:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001558:	2204      	movs	r2, #4
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800155e:	2202      	movs	r2, #2
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 800156a:	2200      	movs	r2, #0
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001570:	f001 fd58 	bl	8003024 <HAL_DMA_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_SPI_MspInit+0x17a>
    {
      Error_Handler();
 800157a:	f7ff fccf 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001582:	649a      	str	r2, [r3, #72]	; 0x48
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_SPI_MspInit+0x1b8>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	2023      	movs	r0, #35	; 0x23
 8001590:	f001 fd11 	bl	8002fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001594:	2023      	movs	r0, #35	; 0x23
 8001596:	f001 fd2a 	bl	8002fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013000 	.word	0x40013000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400
 80015b4:	200002e4 	.word	0x200002e4
 80015b8:	40026440 	.word	0x40026440
 80015bc:	20000344 	.word	0x20000344
 80015c0:	40026458 	.word	0x40026458

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 fe6a 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  CustomTickHandler(uwTick);
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <SysTick_Handler+0x18>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff f981 	bl	8000970 <CustomTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200006d0 	.word	0x200006d0

08001678 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800167c:	2004      	movs	r0, #4
 800167e:	f002 fa33 	bl	8003ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Stream0_IRQHandler+0x10>)
 800168e:	f001 fdf1 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200003a4 	.word	0x200003a4

0800169c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA1_Stream1_IRQHandler+0x10>)
 80016a2:	f001 fde7 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000044c 	.word	0x2000044c

080016b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <DMA1_Stream2_IRQHandler+0x10>)
 80016b6:	f001 fddd 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000053c 	.word	0x2000053c

080016c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Stream4_IRQHandler+0x10>)
 80016ca:	f001 fdd3 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000059c 	.word	0x2000059c

080016d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <SPI1_IRQHandler+0x10>)
 80016de:	f002 ffef 	bl	80046c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000028c 	.word	0x2000028c

080016ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA2_Stream0_IRQHandler+0x10>)
 80016f2:	f001 fdbf 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000022c 	.word	0x2000022c

08001700 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA2_Stream2_IRQHandler+0x10>)
 8001706:	f001 fdb5 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200002e4 	.word	0x200002e4

08001714 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA2_Stream3_IRQHandler+0x10>)
 800171a:	f001 fdab 	bl	8003274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000344 	.word	0x20000344

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_kill>:

int _kill(int pid, int sig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001742:	f004 fb9f 	bl	8005e84 <__errno>
 8001746:	4603      	mov	r3, r0
 8001748:	2216      	movs	r2, #22
 800174a:	601a      	str	r2, [r3, #0]
	return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_exit>:

void _exit (int status)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffe7 	bl	8001738 <_kill>
	while (1) {}		/* Make sure we hang here */
 800176a:	e7fe      	b.n	800176a <_exit+0x12>

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d207      	bcs.n	80017ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800179c:	f004 fb72 	bl	8005e84 <__errno>
 80017a0:	4603      	mov	r3, r0
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	e009      	b.n	80017c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <_sbrk+0x64>)
 80017bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20010000 	.word	0x20010000
 80017cc:	00000400 	.word	0x00000400
 80017d0:	200001d4 	.word	0x200001d4
 80017d4:	200006e8 	.word	0x200006e8

080017d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b096      	sub	sp, #88	; 0x58
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2220      	movs	r2, #32
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f004 fb65 	bl	8005f04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <MX_TIM1_Init+0x168>)
 800183c:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <MX_TIM1_Init+0x16c>)
 800183e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001840:	4b48      	ldr	r3, [pc, #288]	; (8001964 <MX_TIM1_Init+0x168>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <MX_TIM1_Init+0x168>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 800184c:	4b45      	ldr	r3, [pc, #276]	; (8001964 <MX_TIM1_Init+0x168>)
 800184e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001852:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <MX_TIM1_Init+0x168>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <MX_TIM1_Init+0x168>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b40      	ldr	r3, [pc, #256]	; (8001964 <MX_TIM1_Init+0x168>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001866:	483f      	ldr	r0, [pc, #252]	; (8001964 <MX_TIM1_Init+0x168>)
 8001868:	f003 fa64 	bl	8004d34 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001872:	f7ff fb53 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001880:	4619      	mov	r1, r3
 8001882:	4838      	ldr	r0, [pc, #224]	; (8001964 <MX_TIM1_Init+0x168>)
 8001884:	f003 fc62 	bl	800514c <HAL_TIM_ConfigClockSource>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800188e:	f7ff fb45 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001892:	4834      	ldr	r0, [pc, #208]	; (8001964 <MX_TIM1_Init+0x168>)
 8001894:	f003 fa9d 	bl	8004dd2 <HAL_TIM_PWM_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800189e:	f7ff fb3d 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ae:	4619      	mov	r1, r3
 80018b0:	482c      	ldr	r0, [pc, #176]	; (8001964 <MX_TIM1_Init+0x168>)
 80018b2:	f003 ffdb 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018bc:	f7ff fb2e 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	2200      	movs	r2, #0
 80018e2:	4619      	mov	r1, r3
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <MX_TIM1_Init+0x168>)
 80018e6:	f003 fb73 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018f0:	f7ff fb14 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	2204      	movs	r2, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4819      	ldr	r0, [pc, #100]	; (8001964 <MX_TIM1_Init+0x168>)
 80018fe:	f003 fb67 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001908:	f7ff fb08 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	2208      	movs	r2, #8
 8001912:	4619      	mov	r1, r3
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM1_Init+0x168>)
 8001916:	f003 fb5b 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001920:	f7ff fafc 	bl	8000f1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM1_Init+0x168>)
 8001948:	f003 fffe 	bl	8005948 <HAL_TIMEx_ConfigBreakDeadTime>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001952:	f7ff fae3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM1_Init+0x168>)
 8001958:	f000 fb2c 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 800195c:	bf00      	nop
 800195e:	3758      	adds	r7, #88	; 0x58
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200005fc 	.word	0x200005fc
 8001968:	40010000 	.word	0x40010000

0800196c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <MX_TIM2_Init+0xac>)
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_TIM2_Init+0xac>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_TIM2_Init+0xac>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2048;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019b6:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019b8:	f003 fa0b 	bl	8004dd2 <HAL_TIM_PWM_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019c2:	f7ff faab 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	4619      	mov	r1, r3
 80019d4:	4810      	ldr	r0, [pc, #64]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019d6:	f003 ff49 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019e0:	f7ff fa9c 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e4:	2360      	movs	r3, #96	; 0x60
 80019e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019fc:	f003 fae8 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a06:	f7ff fa89 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM2_Init+0xac>)
 8001a0c:	f000 fad2 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3728      	adds	r7, #40	; 0x28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000644 	.word	0x20000644

08001a1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3e:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a40:	4a22      	ldr	r2, [pc, #136]	; (8001acc <MX_TIM3_Init+0xb0>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a64:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a66:	f003 f9b4 	bl	8004dd2 <HAL_TIM_PWM_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a70:	f7ff fa54 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4619      	mov	r1, r3
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001a84:	f003 fef2 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a8e:	f7ff fa45 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	; 0x60
 8001a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001aaa:	f003 fa91 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ab4:	f7ff fa32 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <MX_TIM3_Init+0xac>)
 8001aba:	f000 fa7b 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200004f4 	.word	0x200004f4
 8001acc:	40000400 	.word	0x40000400

08001ad0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	f107 0320 	add.w	r3, r7, #32
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <MX_TIM4_Init+0xdc>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2048;
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b1a:	f003 f95a 	bl	8004dd2 <HAL_TIM_PWM_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001b24:	f7ff f9fa 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	4619      	mov	r1, r3
 8001b36:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b38:	f003 fe98 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001b42:	f7ff f9eb 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b46:	2360      	movs	r3, #96	; 0x60
 8001b48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b5e:	f003 fa37 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001b68:	f7ff f9d8 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b74:	f003 fa2c 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b7e:	f7ff f9cd 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2208      	movs	r2, #8
 8001b86:	4619      	mov	r1, r3
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b8a:	f003 fa21 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001b94:	f7ff f9c2 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM4_Init+0xd8>)
 8001b9a:	f000 fa0b 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000404 	.word	0x20000404
 8001bac:	40000800 	.word	0x40000800

08001bb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bd2:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <MX_TIM5_Init+0xf0>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bf8:	4828      	ldr	r0, [pc, #160]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001bfa:	f003 f8ea 	bl	8004dd2 <HAL_TIM_PWM_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c04:	f7ff f98a 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c10:	f107 0320 	add.w	r3, r7, #32
 8001c14:	4619      	mov	r1, r3
 8001c16:	4821      	ldr	r0, [pc, #132]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c18:	f003 fe28 	bl	800586c <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c22:	f7ff f97b 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c26:	2360      	movs	r3, #96	; 0x60
 8001c28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c3e:	f003 f9c7 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001c48:	f7ff f968 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4812      	ldr	r0, [pc, #72]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c54:	f003 f9bc 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c5e:	f7ff f95d 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2208      	movs	r2, #8
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c6a:	f003 f9b1 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001c74:	f7ff f952 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c80:	f003 f9a6 	bl	8004fd0 <HAL_TIM_PWM_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8001c8a:	f7ff f947 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM5_Init+0xec>)
 8001c90:	f000 f990 	bl	8001fb4 <HAL_TIM_MspPostInit>

}
 8001c94:	bf00      	nop
 8001c96:	3728      	adds	r7, #40	; 0x28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200004ac 	.word	0x200004ac
 8001ca0:	40000c00 	.word	0x40000c00

08001ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <HAL_TIM_Base_MspInit+0x3c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_TIM_Base_MspInit+0x40>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0x40>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_TIM_Base_MspInit+0x40>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d10e      	bne.n	8001d18 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001d16:	e135      	b.n	8001f84 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <HAL_TIM_PWM_MspInit+0x84>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
}
 8001d3e:	e121      	b.n	8001f84 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM4)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_TIM_PWM_MspInit+0x88>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d114      	bne.n	8001d74 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_TIM_PWM_MspInit+0x80>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	e10d      	b.n	8001f84 <HAL_TIM_PWM_MspInit+0x29c>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800
  else if(tim_pwmHandle->Instance==TIM5)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a84      	ldr	r2, [pc, #528]	; (8001f8c <HAL_TIM_PWM_MspInit+0x2a4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	f040 8102 	bne.w	8001f84 <HAL_TIM_PWM_MspInit+0x29c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	4a81      	ldr	r2, [pc, #516]	; (8001f90 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d90:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001d9c:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001d9e:	4a7e      	ldr	r2, [pc, #504]	; (8001f98 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001da0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001da2:	4b7c      	ldr	r3, [pc, #496]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001da4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001da8:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001daa:	4b7a      	ldr	r3, [pc, #488]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dac:	2240      	movs	r2, #64	; 0x40
 8001dae:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db0:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	4b77      	ldr	r3, [pc, #476]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbc:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dbe:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dc4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dcc:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8001dce:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dda:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001de2:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001dee:	4b69      	ldr	r3, [pc, #420]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001df4:	4867      	ldr	r0, [pc, #412]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001df6:	f001 f915 	bl	8003024 <HAL_DMA_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_PWM_MspInit+0x11c>
      Error_Handler();
 8001e00:	f7ff f88c 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
 8001e0a:	4a62      	ldr	r2, [pc, #392]	; (8001f94 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001e10:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e12:	4a63      	ldr	r2, [pc, #396]	; (8001fa0 <HAL_TIM_PWM_MspInit+0x2b8>)
 8001e14:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001e16:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e18:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001e1c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e20:	2240      	movs	r2, #64	; 0x40
 8001e22:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e38:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e3a:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e40:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001e42:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001e48:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e4e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e52:	2204      	movs	r2, #4
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001e56:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001e68:	484c      	ldr	r0, [pc, #304]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e6a:	f001 f8db 	bl	8003024 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_PWM_MspInit+0x190>
      Error_Handler();
 8001e74:	f7ff f852 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e7e:	4a47      	ldr	r2, [pc, #284]	; (8001f9c <HAL_TIM_PWM_MspInit+0x2b4>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x2c0>)
 8001e88:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001e8c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eac:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001eb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ed0:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ed6:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001edc:	4831      	ldr	r0, [pc, #196]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ede:	f001 f8a1 	bl	8003024 <HAL_DMA_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_PWM_MspInit+0x204>
      Error_Handler();
 8001ee8:	f7ff f818 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ef2:	4a2c      	ldr	r2, [pc, #176]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	4a29      	ldr	r2, [pc, #164]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f06:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x2c8>)
 8001f08:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f0c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001f10:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f14:	2240      	movs	r2, #64	; 0x40
 8001f16:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f24:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f2c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f34:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f42:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f46:	2204      	movs	r2, #4
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001f5c:	4813      	ldr	r0, [pc, #76]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f5e:	f001 f861 	bl	8003024 <HAL_DMA_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_TIM_PWM_MspInit+0x284>
      Error_Handler();
 8001f68:	f7fe ffd8 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <HAL_TIM_PWM_MspInit+0x2c4>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	2000053c 	.word	0x2000053c
 8001f98:	40026040 	.word	0x40026040
 8001f9c:	2000059c 	.word	0x2000059c
 8001fa0:	40026070 	.word	0x40026070
 8001fa4:	200003a4 	.word	0x200003a4
 8001fa8:	40026010 	.word	0x40026010
 8001fac:	2000044c 	.word	0x2000044c
 8001fb0:	40026028 	.word	0x40026028

08001fb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5b      	ldr	r2, [pc, #364]	; (8002140 <HAL_TIM_MspPostInit+0x18c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d11f      	bne.n	8002016 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	4b5a      	ldr	r3, [pc, #360]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a59      	ldr	r2, [pc, #356]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b57      	ldr	r3, [pc, #348]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M2N_Pin|M1P_Pin|M1N_Pin;
 8001ff2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002004:	2301      	movs	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	484e      	ldr	r0, [pc, #312]	; (8002148 <HAL_TIM_MspPostInit+0x194>)
 8002010:	f001 fb9a 	bl	8003748 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002014:	e090      	b.n	8002138 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d11f      	bne.n	8002060 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	; 0x30
 8002030:	4b44      	ldr	r3, [pc, #272]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2P_Pin;
 800203c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800204e:	2301      	movs	r3, #1
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2P_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	483b      	ldr	r0, [pc, #236]	; (8002148 <HAL_TIM_MspPostInit+0x194>)
 800205a:	f001 fb75 	bl	8003748 <HAL_GPIO_Init>
}
 800205e:	e06b      	b.n	8002138 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a39      	ldr	r2, [pc, #228]	; (800214c <HAL_TIM_MspPostInit+0x198>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d11e      	bne.n	80020a8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a34      	ldr	r2, [pc, #208]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3P_Pin;
 8002086:	2301      	movs	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002096:	2302      	movs	r3, #2
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3P_GPIO_Port, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	482b      	ldr	r0, [pc, #172]	; (8002150 <HAL_TIM_MspPostInit+0x19c>)
 80020a2:	f001 fb51 	bl	8003748 <HAL_GPIO_Init>
}
 80020a6:	e047      	b.n	8002138 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a29      	ldr	r2, [pc, #164]	; (8002154 <HAL_TIM_MspPostInit+0x1a0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d11f      	bne.n	80020f2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3N_Pin|M4N_Pin|M4P_Pin;
 80020ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e0:	2302      	movs	r3, #2
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4819      	ldr	r0, [pc, #100]	; (8002150 <HAL_TIM_MspPostInit+0x19c>)
 80020ec:	f001 fb2c 	bl	8003748 <HAL_GPIO_Init>
}
 80020f0:	e022      	b.n	8002138 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM5)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_MspPostInit+0x1a4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d11d      	bne.n	8002138 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_TIM_MspPostInit+0x190>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dshot1_Pin|Dshot2_Pin|Dshot3_Pin|Dshot4_Pin;
 8002118:	230f      	movs	r3, #15
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002128:	2302      	movs	r3, #2
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <HAL_TIM_MspPostInit+0x194>)
 8002134:	f001 fb08 	bl	8003748 <HAL_GPIO_Init>
}
 8002138:	bf00      	nop
 800213a:	3730      	adds	r7, #48	; 0x30
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40010000 	.word	0x40010000
 8002144:	40023800 	.word	0x40023800
 8002148:	40020000 	.word	0x40020000
 800214c:	40000400 	.word	0x40000400
 8002150:	40020400 	.word	0x40020400
 8002154:	40000800 	.word	0x40000800
 8002158:	40000c00 	.word	0x40000c00

0800215c <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_USART6_UART_Init+0x50>)
 8002164:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800216c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_USART6_UART_Init+0x4c>)
 8002194:	f003 fc2a 	bl	80059ec <HAL_UART_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800219e:	f7fe febd 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000068c 	.word	0x2000068c
 80021ac:	40011400 	.word	0x40011400

080021b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <HAL_UART_MspInit+0x84>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12c      	bne.n	800222c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021dc:	f043 0320 	orr.w	r3, r3, #32
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_UART_MspInit+0x88>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_UART_MspInit+0x88>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800220a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800221c:	2308      	movs	r3, #8
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	4805      	ldr	r0, [pc, #20]	; (800223c <HAL_UART_MspInit+0x8c>)
 8002228:	f001 fa8e 	bl	8003748 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40011400 	.word	0x40011400
 8002238:	40023800 	.word	0x40023800
 800223c:	40020000 	.word	0x40020000

08002240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002244:	480d      	ldr	r0, [pc, #52]	; (800227c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002246:	490e      	ldr	r1, [pc, #56]	; (8002280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002248:	4a0e      	ldr	r2, [pc, #56]	; (8002284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800225c:	4c0b      	ldr	r4, [pc, #44]	; (800228c <LoopFillZerobss+0x26>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800226a:	f7ff fab5 	bl	80017d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226e:	f003 fe0f 	bl	8005e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002272:	f7fe fc41 	bl	8000af8 <main>
  bx  lr    
 8002276:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002278:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002284:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 8002288:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800228c:	200006e4 	.word	0x200006e4

08002290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_Init+0x40>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_Init+0x40>)
 80022aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x40>)
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 fe6f 	bl	8002fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff f97c 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fe87 	bl	800300a <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 fe4f 	bl	8002fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000004 	.word	0x20000004
 8002330:	2000000c 	.word	0x2000000c
 8002334:	20000008 	.word	0x20000008

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2000000c 	.word	0x2000000c
 800235c:	200006d0 	.word	0x200006d0

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	200006d0 	.word	0x200006d0

08002378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e033      	b.n	80023f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe f952 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023be:	f023 0302 	bic.w	r3, r3, #2
 80023c2:	f043 0202 	orr.w	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa86 	bl	80028dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
 80023e6:	e001      	b.n	80023ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_ADC_Start+0x1a>
 8002416:	2302      	movs	r3, #2
 8002418:	e097      	b.n	800254a <HAL_ADC_Start+0x14a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d018      	beq.n	8002462 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002440:	4b45      	ldr	r3, [pc, #276]	; (8002558 <HAL_ADC_Start+0x158>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a45      	ldr	r2, [pc, #276]	; (800255c <HAL_ADC_Start+0x15c>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0c9a      	lsrs	r2, r3, #18
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002454:	e002      	b.n	800245c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	3b01      	subs	r3, #1
 800245a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d15f      	bne.n	8002530 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d106      	bne.n	80024be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f023 0206 	bic.w	r2, r3, #6
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_ADC_Start+0x160>)
 80024ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d129      	bne.n	8002548 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	e020      	b.n	8002548 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <HAL_ADC_Start+0x164>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d11b      	bne.n	8002548 <HAL_ADC_Start+0x148>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d114      	bne.n	8002548 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	e00b      	b.n	8002548 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000004 	.word	0x20000004
 800255c:	431bde83 	.word	0x431bde83
 8002560:	40012300 	.word	0x40012300
 8002564:	40012000 	.word	0x40012000

08002568 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d113      	bne.n	80025ae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	d10b      	bne.n	80025ae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e063      	b.n	8002676 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025ae:	f7ff fed7 	bl	8002360 <HAL_GetTick>
 80025b2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025b4:	e021      	b.n	80025fa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d01d      	beq.n	80025fa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_ADC_PollForConversion+0x6c>
 80025c4:	f7ff fecc 	bl	8002360 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d212      	bcs.n	80025fa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d00b      	beq.n	80025fa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e03d      	b.n	8002676 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b02      	cmp	r3, #2
 8002606:	d1d6      	bne.n	80025b6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0212 	mvn.w	r2, #18
 8002610:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d123      	bne.n	8002674 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11f      	bne.n	8002674 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800264c:	2b00      	cmp	r3, #0
 800264e:	d111      	bne.n	8002674 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x1c>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e105      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x228>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d925      	bls.n	8002710 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68d9      	ldr	r1, [r3, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b1e      	subs	r3, #30
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43da      	mvns	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	400a      	ands	r2, r1
 80026e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4403      	add	r3, r0
 8002702:	3b1e      	subs	r3, #30
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	e022      	b.n	8002756 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6919      	ldr	r1, [r3, #16]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	2207      	movs	r2, #7
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	4603      	mov	r3, r0
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4403      	add	r3, r0
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b06      	cmp	r3, #6
 800275c:	d824      	bhi.n	80027a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b05      	subs	r3, #5
 8002770:	221f      	movs	r2, #31
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b05      	subs	r3, #5
 800279a:	fa00 f203 	lsl.w	r2, r0, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
 80027a6:	e04c      	b.n	8002842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d824      	bhi.n	80027fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b23      	subs	r3, #35	; 0x23
 80027c2:	221f      	movs	r2, #31
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43da      	mvns	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	400a      	ands	r2, r1
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	3b23      	subs	r3, #35	; 0x23
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
 80027f8:	e023      	b.n	8002842 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	3b41      	subs	r3, #65	; 0x41
 800280c:	221f      	movs	r2, #31
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	400a      	ands	r2, r1
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b41      	subs	r3, #65	; 0x41
 8002836:	fa00 f203 	lsl.w	r2, r0, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_ADC_ConfigChannel+0x234>)
 8002844:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <HAL_ADC_ConfigChannel+0x238>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d109      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1cc>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b12      	cmp	r3, #18
 8002856:	d105      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_ADC_ConfigChannel+0x238>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d123      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x21e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b10      	cmp	r3, #16
 8002874:	d003      	beq.n	800287e <HAL_ADC_ConfigChannel+0x1e6>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b11      	cmp	r3, #17
 800287c:	d11b      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b10      	cmp	r3, #16
 8002890:	d111      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_ADC_ConfigChannel+0x240>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	0c9a      	lsrs	r2, r3, #18
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028a8:	e002      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f9      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	40012300 	.word	0x40012300
 80028d0:	40012000 	.word	0x40012000
 80028d4:	20000004 	.word	0x20000004
 80028d8:	431bde83 	.word	0x431bde83

080028dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e4:	4b79      	ldr	r3, [pc, #484]	; (8002acc <ADC_Init+0x1f0>)
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	021a      	lsls	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <ADC_Init+0x1f4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	e00f      	b.n	80029da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0202 	bic.w	r2, r2, #2
 80029e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7e1b      	ldrb	r3, [r3, #24]
 80029f4:	005a      	lsls	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	3b01      	subs	r3, #1
 8002a34:	035a      	lsls	r2, r3, #13
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	e007      	b.n	8002a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	051a      	lsls	r2, r3, #20
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a92:	025a      	lsls	r2, r3, #9
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	029a      	lsls	r2, r3, #10
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40012300 	.word	0x40012300
 8002ad0:	0f000001 	.word	0x0f000001

08002ad4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e17d      	b.n	8002de8 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d925      	bls.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68d9      	ldr	r1, [r3, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b1e      	subs	r3, #30
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	400a      	ands	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68d9      	ldr	r1, [r3, #12]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4403      	add	r3, r0
 8002b3a:	3b1e      	subs	r3, #30
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	e022      	b.n	8002b8e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6919      	ldr	r1, [r3, #16]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6919      	ldr	r1, [r3, #16]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4403      	add	r3, r0
 8002b84:	409a      	lsls	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	051a      	lsls	r2, r3, #20
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3303      	adds	r3, #3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	221f      	movs	r2, #31
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	400a      	ands	r2, r1
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3303      	adds	r3, #3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	fa00 f203 	lsl.w	r2, r0, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4a74      	ldr	r2, [pc, #464]	; (8002df4 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d022      	beq.n	8002c6c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6899      	ldr	r1, [r3, #8]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	e00f      	b.n	8002c8c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c8a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	7d5b      	ldrb	r3, [r3, #21]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e007      	b.n	8002cb6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	7d1b      	ldrb	r3, [r3, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	e007      	b.n	8002ce0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cde:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d02e      	beq.n	8002d46 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d840      	bhi.n	8002d6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d014      	beq.n	8002d1e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002cf4:	e03b      	b.n	8002d6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d04:	f023 030f 	bic.w	r3, r3, #15
 8002d08:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6959      	ldr	r1, [r3, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	615a      	str	r2, [r3, #20]
      break;
 8002d1c:	e03b      	b.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d2c:	f023 030f 	bic.w	r3, r3, #15
 8002d30:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6999      	ldr	r1, [r3, #24]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]
      break;
 8002d44:	e027      	b.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d54:	f023 030f 	bic.w	r3, r3, #15
 8002d58:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e013      	b.n	8002d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d7c:	f023 030f 	bic.w	r3, r3, #15
 8002d80:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a19      	ldr	r1, [r3, #32]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	621a      	str	r2, [r3, #32]
      break;
 8002d94:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	d105      	bne.n	8002db8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10d      	bne.n	8002dde <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d003      	beq.n	8002dd2 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b11      	cmp	r3, #17
 8002dd0:	d105      	bne.n	8002dde <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	000f0001 	.word	0x000f0001
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	40012000 	.word	0x40012000

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <__NVIC_EnableIRQ+0x38>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e100 	.word	0xe000e100

08002ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	db0a      	blt.n	8002eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	490c      	ldr	r1, [pc, #48]	; (8002eec <__NVIC_SetPriority+0x4c>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	0112      	lsls	r2, r2, #4
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec8:	e00a      	b.n	8002ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4908      	ldr	r1, [pc, #32]	; (8002ef0 <__NVIC_SetPriority+0x50>)
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3b04      	subs	r3, #4
 8002ed8:	0112      	lsls	r2, r2, #4
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	440b      	add	r3, r1
 8002ede:	761a      	strb	r2, [r3, #24]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f1c3 0307 	rsb	r3, r3, #7
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	bf28      	it	cs
 8002f12:	2304      	movcs	r3, #4
 8002f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d902      	bls.n	8002f24 <NVIC_EncodePriority+0x30>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3b03      	subs	r3, #3
 8002f22:	e000      	b.n	8002f26 <NVIC_EncodePriority+0x32>
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	401a      	ands	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	43d9      	mvns	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	4313      	orrs	r3, r2
         );
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6c:	d301      	bcc.n	8002f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00f      	b.n	8002f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f72:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <SysTick_Config+0x40>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f7a:	210f      	movs	r1, #15
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f7ff ff8e 	bl	8002ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <SysTick_Config+0x40>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <SysTick_Config+0x40>)
 8002f8c:	2207      	movs	r2, #7
 8002f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	e000e010 	.word	0xe000e010

08002fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff29 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc8:	f7ff ff3e 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6978      	ldr	r0, [r7, #20]
 8002fd4:	f7ff ff8e 	bl	8002ef4 <NVIC_EncodePriority>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff5d 	bl	8002ea0 <__NVIC_SetPriority>
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff31 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ffa2 	bl	8002f5c <SysTick_Config>
 8003018:	4603      	mov	r3, r0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003030:	f7ff f996 	bl	8002360 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e099      	b.n	8003174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003060:	e00f      	b.n	8003082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003062:	f7ff f97d 	bl	8002360 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b05      	cmp	r3, #5
 800306e:	d908      	bls.n	8003082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e078      	b.n	8003174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e8      	bne.n	8003062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4b38      	ldr	r3, [pc, #224]	; (800317c <HAL_DMA_Init+0x158>)
 800309c:	4013      	ands	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d107      	bne.n	80030ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4313      	orrs	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b04      	cmp	r3, #4
 8003114:	d117      	bne.n	8003146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa91 	bl	8003650 <DMA_CheckFifoParam>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003142:	2301      	movs	r3, #1
 8003144:	e016      	b.n	8003174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa48 	bl	80035e4 <DMA_CalcBaseAndBitshift>
 8003154:	4603      	mov	r3, r0
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	223f      	movs	r2, #63	; 0x3f
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	f010803f 	.word	0xf010803f

08003180 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_Start_IT+0x26>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e040      	b.n	8003228 <HAL_DMA_Start_IT+0xa8>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d12f      	bne.n	800321a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f9da 	bl	8003588 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	223f      	movs	r2, #63	; 0x3f
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0216 	orr.w	r2, r2, #22
 80031ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0208 	orr.w	r2, r2, #8
 8003206:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e005      	b.n	8003226 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003226:	7dfb      	ldrb	r3, [r7, #23]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e00c      	b.n	8003268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2205      	movs	r2, #5
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003280:	4b92      	ldr	r3, [pc, #584]	; (80034cc <HAL_DMA_IRQHandler+0x258>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a92      	ldr	r2, [pc, #584]	; (80034d0 <HAL_DMA_IRQHandler+0x25c>)
 8003286:	fba2 2303 	umull	r2, r3, r2, r3
 800328a:	0a9b      	lsrs	r3, r3, #10
 800328c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	2208      	movs	r2, #8
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01a      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0204 	bic.w	r2, r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	2208      	movs	r2, #8
 80032ce:	409a      	lsls	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00b      	beq.n	8003316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2201      	movs	r2, #1
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f043 0202 	orr.w	r2, r3, #2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	2204      	movs	r2, #4
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003344:	f043 0204 	orr.w	r2, r3, #4
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	2210      	movs	r2, #16
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d043      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d03c      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2210      	movs	r2, #16
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d018      	beq.n	80033b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d108      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d024      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e01f      	b.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0208 	bic.w	r2, r2, #8
 80033d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	2220      	movs	r2, #32
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808e 	beq.w	8003512 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8086 	beq.w	8003512 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340a:	2220      	movs	r2, #32
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d136      	bne.n	800348c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0216 	bic.w	r2, r2, #22
 800342c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_DMA_IRQHandler+0x1da>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0208 	bic.w	r2, r2, #8
 800345c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	223f      	movs	r2, #63	; 0x3f
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347e:	2b00      	cmp	r3, #0
 8003480:	d07d      	beq.n	800357e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
        }
        return;
 800348a:	e078      	b.n	800357e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01c      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d108      	bne.n	80034ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d030      	beq.n	8003512 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e02b      	b.n	8003512 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d027      	beq.n	8003512 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	e022      	b.n	8003512 <HAL_DMA_IRQHandler+0x29e>
 80034cc:	20000004 	.word	0x20000004
 80034d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10f      	bne.n	8003502 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0210 	bic.w	r2, r2, #16
 80034f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d032      	beq.n	8003580 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d022      	beq.n	800356c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2205      	movs	r2, #5
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d307      	bcc.n	800355a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f2      	bne.n	800353e <HAL_DMA_IRQHandler+0x2ca>
 8003558:	e000      	b.n	800355c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800355a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e000      	b.n	8003580 <HAL_DMA_IRQHandler+0x30c>
        return;
 800357e:	bf00      	nop
    }
  }
}
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop

08003588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d108      	bne.n	80035c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035c6:	e007      	b.n	80035d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3b10      	subs	r3, #16
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <DMA_CalcBaseAndBitshift+0x64>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <DMA_CalcBaseAndBitshift+0x68>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d909      	bls.n	8003626 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	659a      	str	r2, [r3, #88]	; 0x58
 8003624:	e007      	b.n	8003636 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	aaaaaaab 	.word	0xaaaaaaab
 800364c:	080060dc 	.word	0x080060dc

08003650 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d11f      	bne.n	80036aa <DMA_CheckFifoParam+0x5a>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b03      	cmp	r3, #3
 800366e:	d856      	bhi.n	800371e <DMA_CheckFifoParam+0xce>
 8003670:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <DMA_CheckFifoParam+0x28>)
 8003672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003676:	bf00      	nop
 8003678:	08003689 	.word	0x08003689
 800367c:	0800369b 	.word	0x0800369b
 8003680:	08003689 	.word	0x08003689
 8003684:	0800371f 	.word	0x0800371f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d046      	beq.n	8003722 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003698:	e043      	b.n	8003722 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036a2:	d140      	bne.n	8003726 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e03d      	b.n	8003726 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	d121      	bne.n	80036f8 <DMA_CheckFifoParam+0xa8>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d837      	bhi.n	800372a <DMA_CheckFifoParam+0xda>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <DMA_CheckFifoParam+0x70>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036d7 	.word	0x080036d7
 80036c8:	080036d1 	.word	0x080036d1
 80036cc:	080036e9 	.word	0x080036e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      break;
 80036d4:	e030      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d025      	beq.n	800372e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e6:	e022      	b.n	800372e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036f0:	d11f      	bne.n	8003732 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036f6:	e01c      	b.n	8003732 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d903      	bls.n	8003706 <DMA_CheckFifoParam+0xb6>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d003      	beq.n	800370c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003704:	e018      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      break;
 800370a:	e015      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00e      	beq.n	8003736 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e00b      	b.n	8003736 <DMA_CheckFifoParam+0xe6>
      break;
 800371e:	bf00      	nop
 8003720:	e00a      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e008      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003726:	bf00      	nop
 8003728:	e006      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
 800372c:	e004      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;   
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
    }
  } 
  
  return status; 
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e159      	b.n	8003a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	429a      	cmp	r2, r3
 800377e:	f040 8148 	bne.w	8003a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d005      	beq.n	800379a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	2b02      	cmp	r3, #2
 8003798:	d130      	bne.n	80037fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b03      	cmp	r3, #3
 8003806:	d017      	beq.n	8003838 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d123      	bne.n	800388c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	08da      	lsrs	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3208      	adds	r2, #8
 800384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	08da      	lsrs	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3208      	adds	r2, #8
 8003886:	69b9      	ldr	r1, [r7, #24]
 8003888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	2203      	movs	r2, #3
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0203 	and.w	r2, r3, #3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a2 	beq.w	8003a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_GPIO_Init+0x2e8>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <HAL_GPIO_Init+0x2e8>)
 80038d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b54      	ldr	r3, [pc, #336]	; (8003a30 <HAL_GPIO_Init+0x2e8>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ea:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <HAL_GPIO_Init+0x2ec>)
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	3302      	adds	r3, #2
 80038f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	220f      	movs	r2, #15
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a49      	ldr	r2, [pc, #292]	; (8003a38 <HAL_GPIO_Init+0x2f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d019      	beq.n	800394a <HAL_GPIO_Init+0x202>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <HAL_GPIO_Init+0x2f4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_Init+0x1fe>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a47      	ldr	r2, [pc, #284]	; (8003a40 <HAL_GPIO_Init+0x2f8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00d      	beq.n	8003942 <HAL_GPIO_Init+0x1fa>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a46      	ldr	r2, [pc, #280]	; (8003a44 <HAL_GPIO_Init+0x2fc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_GPIO_Init+0x1f6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a45      	ldr	r2, [pc, #276]	; (8003a48 <HAL_GPIO_Init+0x300>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_GPIO_Init+0x1f2>
 8003936:	2304      	movs	r3, #4
 8003938:	e008      	b.n	800394c <HAL_GPIO_Init+0x204>
 800393a:	2307      	movs	r3, #7
 800393c:	e006      	b.n	800394c <HAL_GPIO_Init+0x204>
 800393e:	2303      	movs	r3, #3
 8003940:	e004      	b.n	800394c <HAL_GPIO_Init+0x204>
 8003942:	2302      	movs	r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x204>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_GPIO_Init+0x204>
 800394a:	2300      	movs	r3, #0
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f002 0203 	and.w	r2, r2, #3
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	4093      	lsls	r3, r2
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395c:	4935      	ldr	r1, [pc, #212]	; (8003a34 <HAL_GPIO_Init+0x2ec>)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	3302      	adds	r3, #2
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <HAL_GPIO_Init+0x304>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800398e:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <HAL_GPIO_Init+0x304>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_GPIO_Init+0x304>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b8:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <HAL_GPIO_Init+0x304>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039be:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <HAL_GPIO_Init+0x304>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e2:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <HAL_GPIO_Init+0x304>)
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <HAL_GPIO_Init+0x304>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <HAL_GPIO_Init+0x304>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	2b0f      	cmp	r3, #15
 8003a1c:	f67f aea2 	bls.w	8003764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40013c00 	.word	0x40013c00

08003a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
 8003a6c:	e001      	b.n	8003a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a90:	787b      	ldrb	r3, [r7, #1]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a9c:	e003      	b.n	8003aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	041a      	lsls	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	619a      	str	r2, [r3, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	041a      	lsls	r2, r3, #16
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43d9      	mvns	r1, r3
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	619a      	str	r2, [r3, #24]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003afe:	4a05      	ldr	r2, [pc, #20]	; (8003b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc ffca 	bl	8000aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40013c00 	.word	0x40013c00

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e264      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d075      	beq.n	8003c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b36:	4ba3      	ldr	r3, [pc, #652]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d00c      	beq.n	8003b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	4ba0      	ldr	r3, [pc, #640]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d112      	bne.n	8003b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4e:	4b9d      	ldr	r3, [pc, #628]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5a:	d10b      	bne.n	8003b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	4b99      	ldr	r3, [pc, #612]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d05b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x108>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d157      	bne.n	8003c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e23f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCC_OscConfig+0x74>
 8003b7e:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a90      	ldr	r2, [pc, #576]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e01d      	b.n	8003bc8 <HAL_RCC_OscConfig+0xb0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x98>
 8003b96:	4b8b      	ldr	r3, [pc, #556]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a8a      	ldr	r2, [pc, #552]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a87      	ldr	r2, [pc, #540]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xb0>
 8003bb0:	4b84      	ldr	r3, [pc, #528]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a83      	ldr	r2, [pc, #524]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a80      	ldr	r2, [pc, #512]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fbc6 	bl	8002360 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fbc2 	bl	8002360 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e204      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0xc0>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fbb2 	bl	8002360 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fbae 	bl	8002360 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1f0      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c12:	4b6c      	ldr	r3, [pc, #432]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0xe8>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d063      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2e:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x152>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e1c4      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4952      	ldr	r1, [pc, #328]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	e03a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d020      	beq.n	8003cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b4f      	ldr	r3, [pc, #316]	; (8003dc8 <HAL_RCC_OscConfig+0x2b0>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fb67 	bl	8002360 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe fb63 	bl	8002360 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e1a5      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	4b46      	ldr	r3, [pc, #280]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4940      	ldr	r1, [pc, #256]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <HAL_RCC_OscConfig+0x2b0>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fb46 	bl	8002360 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7fe fb42 	bl	8002360 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e184      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cea:	4b36      	ldr	r3, [pc, #216]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d030      	beq.n	8003d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <HAL_RCC_OscConfig+0x2b4>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe fb26 	bl	8002360 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fe fb22 	bl	8002360 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e164      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x200>
 8003d36:	e015      	b.n	8003d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_OscConfig+0x2b4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe fb0f 	bl	8002360 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d46:	f7fe fb0b 	bl	8002360 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e14d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a0 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d76:	4b13      	ldr	r3, [pc, #76]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x2b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d121      	bne.n	8003df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCC_OscConfig+0x2b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_RCC_OscConfig+0x2b8>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dba:	f7fe fad1 	bl	8002360 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	e011      	b.n	8003de6 <HAL_RCC_OscConfig+0x2ce>
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	42470000 	.word	0x42470000
 8003dcc:	42470e80 	.word	0x42470e80
 8003dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd4:	f7fe fac4 	bl	8002360 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e106      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de6:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_RCC_OscConfig+0x4e4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2f0>
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	e01c      	b.n	8003e42 <HAL_RCC_OscConfig+0x32a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x312>
 8003e10:	4b7b      	ldr	r3, [pc, #492]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	4b78      	ldr	r3, [pc, #480]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a77      	ldr	r2, [pc, #476]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x32a>
 8003e2a:	4b75      	ldr	r3, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a74      	ldr	r2, [pc, #464]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b72      	ldr	r3, [pc, #456]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a71      	ldr	r2, [pc, #452]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d015      	beq.n	8003e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fa89 	bl	8002360 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe fa85 	bl	8002360 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0c5      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0ee      	beq.n	8003e52 <HAL_RCC_OscConfig+0x33a>
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fe fa73 	bl	8002360 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00a      	b.n	8003e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe fa6f 	bl	8002360 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e0af      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1ee      	bne.n	8003e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d105      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a55      	ldr	r2, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 809b 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d05c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d141      	bne.n	8003f54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <HAL_RCC_OscConfig+0x4ec>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fe fa43 	bl	8002360 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ede:	f7fe fa3f 	bl	8002360 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e081      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f0      	bne.n	8003ede <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	019b      	lsls	r3, r3, #6
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4937      	ldr	r1, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f26:	4b37      	ldr	r3, [pc, #220]	; (8004004 <HAL_RCC_OscConfig+0x4ec>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fa18 	bl	8002360 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe fa14 	bl	8002360 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e056      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x41c>
 8003f52:	e04e      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x4ec>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fa01 	bl	8002360 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe f9fd 	bl	8002360 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x44a>
 8003f80:	e037      	b.n	8003ff2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e032      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d028      	beq.n	8003fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d121      	bne.n	8003fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d11a      	bne.n	8003fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d111      	bne.n	8003fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	085b      	lsrs	r3, r3, #1
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40007000 	.word	0x40007000
 8004000:	40023800 	.word	0x40023800
 8004004:	42470060 	.word	0x42470060

08004008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0cc      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d90c      	bls.n	8004044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0b8      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800405c:	4b59      	ldr	r3, [pc, #356]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800407e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	494d      	ldr	r1, [pc, #308]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d044      	beq.n	8004128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d107      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d119      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e07f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d003      	beq.n	80040c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e067      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4934      	ldr	r1, [pc, #208]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f8:	f7fe f932 	bl	8002360 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fe f92e 	bl	8002360 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e04f      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 020c 	and.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1eb      	bne.n	8004100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d20c      	bcs.n	8004150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d001      	beq.n	8004150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e032      	b.n	80041b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4916      	ldr	r1, [pc, #88]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d009      	beq.n	800418e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	490e      	ldr	r1, [pc, #56]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800418e:	f000 f821 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8004192:	4602      	mov	r2, r0
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	490a      	ldr	r1, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	5ccb      	ldrb	r3, [r1, r3]
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe f892 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023c00 	.word	0x40023c00
 80041c4:	40023800 	.word	0x40023800
 80041c8:	080060c4 	.word	0x080060c4
 80041cc:	20000004 	.word	0x20000004
 80041d0:	20000008 	.word	0x20000008

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041da:	2100      	movs	r1, #0
 80041dc:	6079      	str	r1, [r7, #4]
 80041de:	2100      	movs	r1, #0
 80041e0:	60f9      	str	r1, [r7, #12]
 80041e2:	2100      	movs	r1, #0
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041e6:	2100      	movs	r1, #0
 80041e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ea:	4952      	ldr	r1, [pc, #328]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ec:	6889      	ldr	r1, [r1, #8]
 80041ee:	f001 010c 	and.w	r1, r1, #12
 80041f2:	2908      	cmp	r1, #8
 80041f4:	d00d      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x3e>
 80041f6:	2908      	cmp	r1, #8
 80041f8:	f200 8094 	bhi.w	8004324 <HAL_RCC_GetSysClockFreq+0x150>
 80041fc:	2900      	cmp	r1, #0
 80041fe:	d002      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x32>
 8004200:	2904      	cmp	r1, #4
 8004202:	d003      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x38>
 8004204:	e08e      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <HAL_RCC_GetSysClockFreq+0x164>)
 8004208:	60bb      	str	r3, [r7, #8]
       break;
 800420a:	e08e      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800420c:	4b4b      	ldr	r3, [pc, #300]	; (800433c <HAL_RCC_GetSysClockFreq+0x168>)
 800420e:	60bb      	str	r3, [r7, #8]
      break;
 8004210:	e08b      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004212:	4948      	ldr	r1, [pc, #288]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 8004214:	6849      	ldr	r1, [r1, #4]
 8004216:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800421a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800421c:	4945      	ldr	r1, [pc, #276]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 800421e:	6849      	ldr	r1, [r1, #4]
 8004220:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004224:	2900      	cmp	r1, #0
 8004226:	d024      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004228:	4942      	ldr	r1, [pc, #264]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 800422a:	6849      	ldr	r1, [r1, #4]
 800422c:	0989      	lsrs	r1, r1, #6
 800422e:	4608      	mov	r0, r1
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004238:	f04f 0500 	mov.w	r5, #0
 800423c:	ea00 0204 	and.w	r2, r0, r4
 8004240:	ea01 0305 	and.w	r3, r1, r5
 8004244:	493d      	ldr	r1, [pc, #244]	; (800433c <HAL_RCC_GetSysClockFreq+0x168>)
 8004246:	fb01 f003 	mul.w	r0, r1, r3
 800424a:	2100      	movs	r1, #0
 800424c:	fb01 f102 	mul.w	r1, r1, r2
 8004250:	1844      	adds	r4, r0, r1
 8004252:	493a      	ldr	r1, [pc, #232]	; (800433c <HAL_RCC_GetSysClockFreq+0x168>)
 8004254:	fba2 0101 	umull	r0, r1, r2, r1
 8004258:	1863      	adds	r3, r4, r1
 800425a:	4619      	mov	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	461a      	mov	r2, r3
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	f7fb ffb6 	bl	80001d4 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e04a      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b30      	ldr	r3, [pc, #192]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	461a      	mov	r2, r3
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	ea02 0400 	and.w	r4, r2, r0
 800428a:	ea03 0501 	and.w	r5, r3, r1
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	014b      	lsls	r3, r1, #5
 800429c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042a0:	0142      	lsls	r2, r0, #5
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	1b00      	subs	r0, r0, r4
 80042a8:	eb61 0105 	sbc.w	r1, r1, r5
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	018b      	lsls	r3, r1, #6
 80042b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042ba:	0182      	lsls	r2, r0, #6
 80042bc:	1a12      	subs	r2, r2, r0
 80042be:	eb63 0301 	sbc.w	r3, r3, r1
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	00d9      	lsls	r1, r3, #3
 80042cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d0:	00d0      	lsls	r0, r2, #3
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	1912      	adds	r2, r2, r4
 80042d8:	eb45 0303 	adc.w	r3, r5, r3
 80042dc:	f04f 0000 	mov.w	r0, #0
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	0299      	lsls	r1, r3, #10
 80042e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042ea:	0290      	lsls	r0, r2, #10
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4610      	mov	r0, r2
 80042f2:	4619      	mov	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	461a      	mov	r2, r3
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	f7fb ff6a 	bl	80001d4 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4613      	mov	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <HAL_RCC_GetSysClockFreq+0x160>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	3301      	adds	r3, #1
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004320:	60bb      	str	r3, [r7, #8]
      break;
 8004322:	e002      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <HAL_RCC_GetSysClockFreq+0x164>)
 8004326:	60bb      	str	r3, [r7, #8]
      break;
 8004328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800432a:	68bb      	ldr	r3, [r7, #8]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bdb0      	pop	{r4, r5, r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	00f42400 	.word	0x00f42400
 800433c:	017d7840 	.word	0x017d7840

08004340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <HAL_RCC_GetHCLKFreq+0x14>)
 8004346:	681b      	ldr	r3, [r3, #0]
}
 8004348:	4618      	mov	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800435c:	f7ff fff0 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0a9b      	lsrs	r3, r3, #10
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK1Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	080060d4 	.word	0x080060d4

08004380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004384:	f7ff ffdc 	bl	8004340 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0b5b      	lsrs	r3, r3, #13
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	080060d4 	.word	0x080060d4

080043a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07b      	b.n	80044b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d108      	bne.n	80043d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ca:	d009      	beq.n	80043e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	61da      	str	r2, [r3, #28]
 80043d2:	e005      	b.n	80043e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd f802 	bl	8001404 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	ea42 0103 	orr.w	r1, r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 0104 	and.w	r1, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0210 	and.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80044d8:	2302      	movs	r3, #2
 80044da:	e0e3      	b.n	80046a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80044f2:	7dbb      	ldrb	r3, [r7, #22]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d00d      	beq.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x58>
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d106      	bne.n	800450e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004508:	7dbb      	ldrb	r3, [r7, #22]
 800450a:	2b04      	cmp	r3, #4
 800450c:	d002      	beq.n	8004514 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004512:	e0c2      	b.n	800469a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800452a:	e0b6      	b.n	800469a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b04      	cmp	r3, #4
 8004536:	d003      	beq.n	8004540 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2205      	movs	r2, #5
 800453c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b04      	cmp	r3, #4
 8004580:	d108      	bne.n	8004594 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	4a49      	ldr	r2, [pc, #292]	; (80046ac <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
 8004592:	e007      	b.n	80045a4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	4a46      	ldr	r2, [pc, #280]	; (80046b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	4a45      	ldr	r2, [pc, #276]	; (80046b8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a8:	4a44      	ldr	r2, [pc, #272]	; (80046bc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80045aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b0:	2200      	movs	r2, #0
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	4619      	mov	r1, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045cc:	f7fe fdd8 	bl	8003180 <HAL_DMA_Start_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 0210 	orr.w	r2, r3, #16
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80045ee:	e054      	b.n	800469a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	2200      	movs	r2, #0
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	2200      	movs	r2, #0
 8004616:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	2200      	movs	r2, #0
 800461e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4619      	mov	r1, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004636:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004638:	f7fe fda2 	bl	8003180 <HAL_DMA_Start_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f043 0210 	orr.w	r2, r3, #16
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800465a:	e01e      	b.n	800469a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d007      	beq.n	800467a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004678:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0202 	orr.w	r2, r2, #2
 8004698:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08004a35 	.word	0x08004a35
 80046b0:	080048fd 	.word	0x080048fd
 80046b4:	08004a51 	.word	0x08004a51
 80046b8:	080049a5 	.word	0x080049a5
 80046bc:	08004a6d 	.word	0x08004a6d

080046c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	099b      	lsrs	r3, r3, #6
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d004      	beq.n	8004704 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	4798      	blx	r3
    return;
 8004702:	e0d7      	b.n	80048b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_SPI_IRQHandler+0x66>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
    return;
 8004724:	e0c6      	b.n	80048b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_SPI_IRQHandler+0x8c>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80b4 	beq.w	80048b4 <HAL_SPI_IRQHandler+0x1f4>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80ad 	beq.w	80048b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	099b      	lsrs	r3, r3, #6
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d023      	beq.n	80047ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d011      	beq.n	8004796 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	e00b      	b.n	80047ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	693b      	ldr	r3, [r7, #16]
        return;
 80047ac:	e082      	b.n	80048b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d014      	beq.n	80047e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f043 0208 	orr.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	2b00      	cmp	r3, #0
 8004810:	d04f      	beq.n	80048b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004820:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d104      	bne.n	800483e <HAL_SPI_IRQHandler+0x17e>
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d034      	beq.n	80048a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0203 	bic.w	r2, r2, #3
 800484c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d011      	beq.n	800487a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_SPI_IRQHandler+0x1fc>)
 800485c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fce4 	bl	8003230 <HAL_DMA_Abort_IT>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	2b00      	cmp	r3, #0
 8004880:	d016      	beq.n	80048b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <HAL_SPI_IRQHandler+0x1fc>)
 8004888:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fcce 	bl	8003230 <HAL_DMA_Abort_IT>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80048a6:	e003      	b.n	80048b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fc f8d9 	bl	8000a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048ae:	e000      	b.n	80048b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048b0:	bf00      	nop
    return;
 80048b2:	bf00      	nop
  }
}
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08004aad 	.word	0x08004aad

080048c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800490a:	f7fd fd29 	bl	8002360 <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	d03b      	beq.n	8004998 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0220 	bic.w	r2, r2, #32
 800492e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <SPI_DMAReceiveCplt+0x58>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004940:	d108      	bne.n	8004954 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0203 	bic.w	r2, r2, #3
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e007      	b.n	8004964 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f93b 	bl	8004be4 <SPI_EndRxTransaction>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7fc f865 	bl	8000a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004996:	e002      	b.n	800499e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff ff91 	bl	80048c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b2:	f7fd fcd5 	bl	8002360 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d02f      	beq.n	8004a28 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0220 	bic.w	r2, r2, #32
 80049d6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	2164      	movs	r1, #100	; 0x64
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f967 	bl	8004cb0 <SPI_EndRxTxTransaction>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0203 	bic.w	r2, r2, #3
 8004a02:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7fc f81d 	bl	8000a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a26:	e002      	b.n	8004a2e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7fb fff9 	bl	8000a20 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff46 	bl	80048d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff42 	bl	80048e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0203 	bic.w	r2, r2, #3
 8004a88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0210 	orr.w	r2, r3, #16
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7fb ffde 	bl	8000a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7fb ffca 	bl	8000a60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae4:	f7fd fc3c 	bl	8002360 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	4413      	add	r3, r2
 8004af2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af4:	f7fd fc34 	bl	8002360 <HAL_GetTick>
 8004af8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	015b      	lsls	r3, r3, #5
 8004b00:	0d1b      	lsrs	r3, r3, #20
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
 8004b08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0a:	e054      	b.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d050      	beq.n	8004bb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b14:	f7fd fc24 	bl	8002360 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d902      	bls.n	8004b2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d13d      	bne.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b42:	d111      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4c:	d004      	beq.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d107      	bne.n	8004b68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b70:	d10f      	bne.n	8004b92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e017      	b.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d19b      	bne.n	8004b0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000004 	.word	0x20000004

08004be4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf8:	d111      	bne.n	8004c1e <SPI_EndRxTransaction+0x3a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c02:	d004      	beq.n	8004c0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0c:	d107      	bne.n	8004c1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c26:	d12a      	bne.n	8004c7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c30:	d012      	beq.n	8004c58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff ff49 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02d      	beq.n	8004ca4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f043 0220 	orr.w	r2, r3, #32
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e026      	b.n	8004ca6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2101      	movs	r1, #1
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff ff36 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e013      	b.n	8004ca6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2200      	movs	r2, #0
 8004c86:	2101      	movs	r1, #1
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff23 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e000      	b.n	8004ca6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <SPI_EndRxTxTransaction+0x7c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <SPI_EndRxTxTransaction+0x80>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	0d5b      	lsrs	r3, r3, #21
 8004cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cda:	d112      	bne.n	8004d02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff fef4 	bl	8004ad4 <SPI_WaitFlagStateUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d016      	beq.n	8004d20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e00f      	b.n	8004d22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d0f2      	beq.n	8004d02 <SPI_EndRxTxTransaction+0x52>
 8004d1c:	e000      	b.n	8004d20 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d1e:	bf00      	nop
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000004 	.word	0x20000004
 8004d30:	165e9f81 	.word	0x165e9f81

08004d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e041      	b.n	8004dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc ffa2 	bl	8001ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 faae 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e041      	b.n	8004e68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fc ff75 	bl	8001ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 fa5f 	bl	80052d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_TIM_PWM_Start+0x24>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	bf14      	ite	ne
 8004e8c:	2301      	movne	r3, #1
 8004e8e:	2300      	moveq	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e022      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d109      	bne.n	8004eae <HAL_TIM_PWM_Start+0x3e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e015      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d109      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0x58>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e008      	b.n	8004eda <HAL_TIM_PWM_Start+0x6a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e068      	b.n	8004fb4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x82>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0x92>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0xa2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_PWM_Start+0xaa>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	6839      	ldr	r1, [r7, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fc7c 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIM_PWM_Start+0x14c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d107      	bne.n	8004f42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1d      	ldr	r2, [pc, #116]	; (8004fbc <HAL_TIM_PWM_Start+0x14c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d018      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x10e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f54:	d013      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x10e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	; (8004fc0 <HAL_TIM_PWM_Start+0x150>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x10e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_TIM_PWM_Start+0x154>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d009      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x10e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_TIM_PWM_Start+0x158>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d004      	beq.n	8004f7e <HAL_TIM_PWM_Start+0x10e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <HAL_TIM_PWM_Start+0x15c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d010      	beq.n	8004fb2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	e007      	b.n	8004fb2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40014000 	.word	0x40014000

08004fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0ac      	b.n	8005144 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b0c      	cmp	r3, #12
 8004ff6:	f200 809f 	bhi.w	8005138 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005035 	.word	0x08005035
 8005004:	08005139 	.word	0x08005139
 8005008:	08005139 	.word	0x08005139
 800500c:	08005139 	.word	0x08005139
 8005010:	08005075 	.word	0x08005075
 8005014:	08005139 	.word	0x08005139
 8005018:	08005139 	.word	0x08005139
 800501c:	08005139 	.word	0x08005139
 8005020:	080050b7 	.word	0x080050b7
 8005024:	08005139 	.word	0x08005139
 8005028:	08005139 	.word	0x08005139
 800502c:	08005139 	.word	0x08005139
 8005030:	080050f7 	.word	0x080050f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f9ca 	bl	80053d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0208 	orr.w	r2, r2, #8
 800504e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0204 	bic.w	r2, r2, #4
 800505e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6999      	ldr	r1, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	619a      	str	r2, [r3, #24]
      break;
 8005072:	e062      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fa10 	bl	80054a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6999      	ldr	r1, [r3, #24]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	021a      	lsls	r2, r3, #8
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	619a      	str	r2, [r3, #24]
      break;
 80050b4:	e041      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fa5b 	bl	8005578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0208 	orr.w	r2, r2, #8
 80050d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0204 	bic.w	r2, r2, #4
 80050e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69d9      	ldr	r1, [r3, #28]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	61da      	str	r2, [r3, #28]
      break;
 80050f4:	e021      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 faa5 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	021a      	lsls	r2, r3, #8
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	61da      	str	r2, [r3, #28]
      break;
 8005136:	e000      	b.n	800513a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e0b3      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x180>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005182:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d03e      	beq.n	800521c <HAL_TIM_ConfigClockSource+0xd0>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a2:	f200 8087 	bhi.w	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	f000 8085 	beq.w	80052b8 <HAL_TIM_ConfigClockSource+0x16c>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d87f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051b4:	2b70      	cmp	r3, #112	; 0x70
 80051b6:	d01a      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0xa2>
 80051b8:	2b70      	cmp	r3, #112	; 0x70
 80051ba:	d87b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051bc:	2b60      	cmp	r3, #96	; 0x60
 80051be:	d050      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x116>
 80051c0:	2b60      	cmp	r3, #96	; 0x60
 80051c2:	d877      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051c4:	2b50      	cmp	r3, #80	; 0x50
 80051c6:	d03c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0xf6>
 80051c8:	2b50      	cmp	r3, #80	; 0x50
 80051ca:	d873      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d058      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x136>
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d86f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051d4:	2b30      	cmp	r3, #48	; 0x30
 80051d6:	d064      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x156>
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	d86b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d060      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x156>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d867      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05c      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x156>
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d05a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051ec:	e062      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f000 faef 	bl	80057e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005210:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	609a      	str	r2, [r3, #8]
      break;
 800521a:	e04e      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6899      	ldr	r1, [r3, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f000 fad8 	bl	80057e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800523e:	609a      	str	r2, [r3, #8]
      break;
 8005240:	e03b      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	461a      	mov	r2, r3
 8005250:	f000 fa4c 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2150      	movs	r1, #80	; 0x50
 800525a:	4618      	mov	r0, r3
 800525c:	f000 faa5 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005260:	e02b      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6859      	ldr	r1, [r3, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	461a      	mov	r2, r3
 8005270:	f000 fa6b 	bl	800574a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2160      	movs	r1, #96	; 0x60
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fa95 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005280:	e01b      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	461a      	mov	r2, r3
 8005290:	f000 fa2c 	bl	80056ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2140      	movs	r1, #64	; 0x40
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fa85 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 80052a0:	e00b      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f000 fa7c 	bl	80057aa <TIM_ITRx_SetConfig>
        break;
 80052b2:	e002      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052b4:	bf00      	nop
 80052b6:	e000      	b.n	80052ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a34      	ldr	r2, [pc, #208]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f2:	d00b      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a31      	ldr	r2, [pc, #196]	; (80053bc <TIM_Base_SetConfig+0xe8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a30      	ldr	r2, [pc, #192]	; (80053c0 <TIM_Base_SetConfig+0xec>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_Base_SetConfig+0x38>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <TIM_Base_SetConfig+0xf0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532c:	d017      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a22      	ldr	r2, [pc, #136]	; (80053bc <TIM_Base_SetConfig+0xe8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d013      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <TIM_Base_SetConfig+0xec>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <TIM_Base_SetConfig+0xf0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <TIM_Base_SetConfig+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <TIM_Base_SetConfig+0xf8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x8a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_Base_SetConfig+0xfc>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <TIM_Base_SetConfig+0xe4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0201 	bic.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f023 0302 	bic.w	r3, r3, #2
 800541c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1c      	ldr	r2, [pc, #112]	; (800549c <TIM_OC1_SetConfig+0xc8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d10c      	bne.n	800544a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0308 	bic.w	r3, r3, #8
 8005436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 0304 	bic.w	r3, r3, #4
 8005448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a13      	ldr	r2, [pc, #76]	; (800549c <TIM_OC1_SetConfig+0xc8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d111      	bne.n	8005476 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	621a      	str	r2, [r3, #32]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40010000 	.word	0x40010000

080054a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0210 	bic.w	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <TIM_OC2_SetConfig+0xd4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10d      	bne.n	800551c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a15      	ldr	r2, [pc, #84]	; (8005574 <TIM_OC2_SetConfig+0xd4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10d      	bne.n	80055f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <TIM_OC4_SetConfig+0x9c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000

080056ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 030a 	bic.w	r3, r3, #10
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574a:	b480      	push	{r7}
 800574c:	b087      	sub	sp, #28
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0210 	bic.w	r2, r3, #16
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005774:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	031b      	lsls	r3, r3, #12
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005786:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 0307 	orr.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2201      	movs	r2, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005880:	2302      	movs	r3, #2
 8005882:	e050      	b.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d018      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d013      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10c      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40014000 	.word	0x40014000

08005948 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005960:	2302      	movs	r3, #2
 8005962:	e03d      	b.n	80059e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e03f      	b.n	8005a7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fbcc 	bl	80021b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f829 	bl	8005a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8c:	b09f      	sub	sp, #124	; 0x7c
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	68d9      	ldr	r1, [r3, #12]
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	ea40 0301 	orr.w	r3, r0, r1
 8005aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005acc:	f021 010c 	bic.w	r1, r1, #12
 8005ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae6:	6999      	ldr	r1, [r3, #24]
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	ea40 0301 	orr.w	r3, r0, r1
 8005af0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4bc5      	ldr	r3, [pc, #788]	; (8005e0c <UART_SetConfig+0x384>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d004      	beq.n	8005b06 <UART_SetConfig+0x7e>
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4bc3      	ldr	r3, [pc, #780]	; (8005e10 <UART_SetConfig+0x388>)
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d103      	bne.n	8005b0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b06:	f7fe fc3b 	bl	8004380 <HAL_RCC_GetPCLK2Freq>
 8005b0a:	6778      	str	r0, [r7, #116]	; 0x74
 8005b0c:	e002      	b.n	8005b14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b0e:	f7fe fc23 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8005b12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1c:	f040 80b6 	bne.w	8005c8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b22:	461c      	mov	r4, r3
 8005b24:	f04f 0500 	mov.w	r5, #0
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	6439      	str	r1, [r7, #64]	; 0x40
 8005b30:	415b      	adcs	r3, r3
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
 8005b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b38:	1912      	adds	r2, r2, r4
 8005b3a:	eb45 0303 	adc.w	r3, r5, r3
 8005b3e:	f04f 0000 	mov.w	r0, #0
 8005b42:	f04f 0100 	mov.w	r1, #0
 8005b46:	00d9      	lsls	r1, r3, #3
 8005b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b4c:	00d0      	lsls	r0, r2, #3
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	1911      	adds	r1, r2, r4
 8005b54:	6639      	str	r1, [r7, #96]	; 0x60
 8005b56:	416b      	adcs	r3, r5
 8005b58:	667b      	str	r3, [r7, #100]	; 0x64
 8005b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b74:	f7fa fb2e 	bl	80001d4 <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4ba5      	ldr	r3, [pc, #660]	; (8005e14 <UART_SetConfig+0x38c>)
 8005b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	011e      	lsls	r6, r3, #4
 8005b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b88:	461c      	mov	r4, r3
 8005b8a:	f04f 0500 	mov.w	r5, #0
 8005b8e:	4622      	mov	r2, r4
 8005b90:	462b      	mov	r3, r5
 8005b92:	1891      	adds	r1, r2, r2
 8005b94:	6339      	str	r1, [r7, #48]	; 0x30
 8005b96:	415b      	adcs	r3, r3
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b9e:	1912      	adds	r2, r2, r4
 8005ba0:	eb45 0303 	adc.w	r3, r5, r3
 8005ba4:	f04f 0000 	mov.w	r0, #0
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	00d9      	lsls	r1, r3, #3
 8005bae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bb2:	00d0      	lsls	r0, r2, #3
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	1911      	adds	r1, r2, r4
 8005bba:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bbc:	416b      	adcs	r3, r5
 8005bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005bda:	f7fa fafb 	bl	80001d4 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b8c      	ldr	r3, [pc, #560]	; (8005e14 <UART_SetConfig+0x38c>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a87      	ldr	r2, [pc, #540]	; (8005e14 <UART_SetConfig+0x38c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	441e      	add	r6, r3
 8005c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	1894      	adds	r4, r2, r2
 8005c14:	623c      	str	r4, [r7, #32]
 8005c16:	415b      	adcs	r3, r3
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c1e:	1812      	adds	r2, r2, r0
 8005c20:	eb41 0303 	adc.w	r3, r1, r3
 8005c24:	f04f 0400 	mov.w	r4, #0
 8005c28:	f04f 0500 	mov.w	r5, #0
 8005c2c:	00dd      	lsls	r5, r3, #3
 8005c2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c32:	00d4      	lsls	r4, r2, #3
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	1814      	adds	r4, r2, r0
 8005c3a:	653c      	str	r4, [r7, #80]	; 0x50
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	61b9      	str	r1, [r7, #24]
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005c5a:	f7fa fabb 	bl	80001d4 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4b6c      	ldr	r3, [pc, #432]	; (8005e14 <UART_SetConfig+0x38c>)
 8005c64:	fba3 1302 	umull	r1, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2164      	movs	r1, #100	; 0x64
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	3332      	adds	r3, #50	; 0x32
 8005c76:	4a67      	ldr	r2, [pc, #412]	; (8005e14 <UART_SetConfig+0x38c>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f003 0207 	and.w	r2, r3, #7
 8005c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4432      	add	r2, r6
 8005c88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c8a:	e0b9      	b.n	8005e00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c8e:	461c      	mov	r4, r3
 8005c90:	f04f 0500 	mov.w	r5, #0
 8005c94:	4622      	mov	r2, r4
 8005c96:	462b      	mov	r3, r5
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	6139      	str	r1, [r7, #16]
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ca4:	1912      	adds	r2, r2, r4
 8005ca6:	eb45 0303 	adc.w	r3, r5, r3
 8005caa:	f04f 0000 	mov.w	r0, #0
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	00d9      	lsls	r1, r3, #3
 8005cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cb8:	00d0      	lsls	r0, r2, #3
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	eb12 0804 	adds.w	r8, r2, r4
 8005cc2:	eb43 0905 	adc.w	r9, r3, r5
 8005cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	008b      	lsls	r3, r1, #2
 8005cda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cde:	0082      	lsls	r2, r0, #2
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	f7fa fa76 	bl	80001d4 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <UART_SetConfig+0x38c>)
 8005cee:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	011e      	lsls	r6, r3, #4
 8005cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f04f 0100 	mov.w	r1, #0
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	1894      	adds	r4, r2, r2
 8005d04:	60bc      	str	r4, [r7, #8]
 8005d06:	415b      	adcs	r3, r3
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0e:	1812      	adds	r2, r2, r0
 8005d10:	eb41 0303 	adc.w	r3, r1, r3
 8005d14:	f04f 0400 	mov.w	r4, #0
 8005d18:	f04f 0500 	mov.w	r5, #0
 8005d1c:	00dd      	lsls	r5, r3, #3
 8005d1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d22:	00d4      	lsls	r4, r2, #3
 8005d24:	4622      	mov	r2, r4
 8005d26:	462b      	mov	r3, r5
 8005d28:	1814      	adds	r4, r2, r0
 8005d2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005d2c:	414b      	adcs	r3, r1
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f04f 0100 	mov.w	r1, #0
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	008b      	lsls	r3, r1, #2
 8005d44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d48:	0082      	lsls	r2, r0, #2
 8005d4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005d4e:	f7fa fa41 	bl	80001d4 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <UART_SetConfig+0x38c>)
 8005d58:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	2164      	movs	r1, #100	; 0x64
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	3332      	adds	r3, #50	; 0x32
 8005d6a:	4a2a      	ldr	r2, [pc, #168]	; (8005e14 <UART_SetConfig+0x38c>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d76:	441e      	add	r6, r3
 8005d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f04f 0100 	mov.w	r1, #0
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	1894      	adds	r4, r2, r2
 8005d86:	603c      	str	r4, [r7, #0]
 8005d88:	415b      	adcs	r3, r3
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d90:	1812      	adds	r2, r2, r0
 8005d92:	eb41 0303 	adc.w	r3, r1, r3
 8005d96:	f04f 0400 	mov.w	r4, #0
 8005d9a:	f04f 0500 	mov.w	r5, #0
 8005d9e:	00dd      	lsls	r5, r3, #3
 8005da0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005da4:	00d4      	lsls	r4, r2, #3
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	eb12 0a00 	adds.w	sl, r2, r0
 8005dae:	eb43 0b01 	adc.w	fp, r3, r1
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f04f 0100 	mov.w	r1, #0
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	008b      	lsls	r3, r1, #2
 8005dc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dca:	0082      	lsls	r2, r0, #2
 8005dcc:	4650      	mov	r0, sl
 8005dce:	4659      	mov	r1, fp
 8005dd0:	f7fa fa00 	bl	80001d4 <__aeabi_uldivmod>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <UART_SetConfig+0x38c>)
 8005dda:	fba3 1302 	umull	r1, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2164      	movs	r1, #100	; 0x64
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	3332      	adds	r3, #50	; 0x32
 8005dec:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <UART_SetConfig+0x38c>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4432      	add	r2, r6
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	bf00      	nop
 8005e02:	377c      	adds	r7, #124	; 0x7c
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40011000 	.word	0x40011000
 8005e10:	40011400 	.word	0x40011400
 8005e14:	51eb851f 	.word	0x51eb851f

08005e18 <_Znwj>:
 8005e18:	2801      	cmp	r0, #1
 8005e1a:	bf38      	it	cc
 8005e1c:	2001      	movcc	r0, #1
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f858 	bl	8005ed8 <malloc>
 8005e28:	b930      	cbnz	r0, 8005e38 <_Znwj+0x20>
 8005e2a:	f000 f81b 	bl	8005e64 <_ZSt15get_new_handlerv>
 8005e2e:	b908      	cbnz	r0, 8005e34 <_Znwj+0x1c>
 8005e30:	f000 f820 	bl	8005e74 <abort>
 8005e34:	4780      	blx	r0
 8005e36:	e7f4      	b.n	8005e22 <_Znwj+0xa>
 8005e38:	bd10      	pop	{r4, pc}

08005e3a <__cxa_pure_virtual>:
 8005e3a:	b508      	push	{r3, lr}
 8005e3c:	f000 f80c 	bl	8005e58 <_ZSt9terminatev>

08005e40 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005e40:	b508      	push	{r3, lr}
 8005e42:	4780      	blx	r0
 8005e44:	f000 f816 	bl	8005e74 <abort>

08005e48 <_ZSt13get_terminatev>:
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <_ZSt13get_terminatev+0xc>)
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	f3bf 8f5b 	dmb	ish
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000010 	.word	0x20000010

08005e58 <_ZSt9terminatev>:
 8005e58:	b508      	push	{r3, lr}
 8005e5a:	f7ff fff5 	bl	8005e48 <_ZSt13get_terminatev>
 8005e5e:	f7ff ffef 	bl	8005e40 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08005e64 <_ZSt15get_new_handlerv>:
 8005e64:	4b02      	ldr	r3, [pc, #8]	; (8005e70 <_ZSt15get_new_handlerv+0xc>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	f3bf 8f5b 	dmb	ish
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200001d8 	.word	0x200001d8

08005e74 <abort>:
 8005e74:	b508      	push	{r3, lr}
 8005e76:	2006      	movs	r0, #6
 8005e78:	f000 f8de 	bl	8006038 <raise>
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	f7fb fc6b 	bl	8001758 <_exit>
	...

08005e84 <__errno>:
 8005e84:	4b01      	ldr	r3, [pc, #4]	; (8005e8c <__errno+0x8>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000014 	.word	0x20000014

08005e90 <__libc_init_array>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4d0d      	ldr	r5, [pc, #52]	; (8005ec8 <__libc_init_array+0x38>)
 8005e94:	4c0d      	ldr	r4, [pc, #52]	; (8005ecc <__libc_init_array+0x3c>)
 8005e96:	1b64      	subs	r4, r4, r5
 8005e98:	10a4      	asrs	r4, r4, #2
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	42a6      	cmp	r6, r4
 8005e9e:	d109      	bne.n	8005eb4 <__libc_init_array+0x24>
 8005ea0:	4d0b      	ldr	r5, [pc, #44]	; (8005ed0 <__libc_init_array+0x40>)
 8005ea2:	4c0c      	ldr	r4, [pc, #48]	; (8005ed4 <__libc_init_array+0x44>)
 8005ea4:	f000 f8f2 	bl	800608c <_init>
 8005ea8:	1b64      	subs	r4, r4, r5
 8005eaa:	10a4      	asrs	r4, r4, #2
 8005eac:	2600      	movs	r6, #0
 8005eae:	42a6      	cmp	r6, r4
 8005eb0:	d105      	bne.n	8005ebe <__libc_init_array+0x2e>
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb8:	4798      	blx	r3
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7ee      	b.n	8005e9c <__libc_init_array+0xc>
 8005ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec2:	4798      	blx	r3
 8005ec4:	3601      	adds	r6, #1
 8005ec6:	e7f2      	b.n	8005eae <__libc_init_array+0x1e>
 8005ec8:	080060ec 	.word	0x080060ec
 8005ecc:	080060ec 	.word	0x080060ec
 8005ed0:	080060ec 	.word	0x080060ec
 8005ed4:	080060f4 	.word	0x080060f4

08005ed8 <malloc>:
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <malloc+0xc>)
 8005eda:	4601      	mov	r1, r0
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	f000 b819 	b.w	8005f14 <_malloc_r>
 8005ee2:	bf00      	nop
 8005ee4:	20000014 	.word	0x20000014

08005ee8 <memcpy>:
 8005ee8:	440a      	add	r2, r1
 8005eea:	4291      	cmp	r1, r2
 8005eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef0:	d100      	bne.n	8005ef4 <memcpy+0xc>
 8005ef2:	4770      	bx	lr
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005efe:	4291      	cmp	r1, r2
 8005f00:	d1f9      	bne.n	8005ef6 <memcpy+0xe>
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <memset>:
 8005f04:	4402      	add	r2, r0
 8005f06:	4603      	mov	r3, r0
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d100      	bne.n	8005f0e <memset+0xa>
 8005f0c:	4770      	bx	lr
 8005f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f12:	e7f9      	b.n	8005f08 <memset+0x4>

08005f14 <_malloc_r>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	1ccd      	adds	r5, r1, #3
 8005f18:	f025 0503 	bic.w	r5, r5, #3
 8005f1c:	3508      	adds	r5, #8
 8005f1e:	2d0c      	cmp	r5, #12
 8005f20:	bf38      	it	cc
 8005f22:	250c      	movcc	r5, #12
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	4606      	mov	r6, r0
 8005f28:	db01      	blt.n	8005f2e <_malloc_r+0x1a>
 8005f2a:	42a9      	cmp	r1, r5
 8005f2c:	d903      	bls.n	8005f36 <_malloc_r+0x22>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	2000      	movs	r0, #0
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f36:	f000 f89b 	bl	8006070 <__malloc_lock>
 8005f3a:	4921      	ldr	r1, [pc, #132]	; (8005fc0 <_malloc_r+0xac>)
 8005f3c:	680a      	ldr	r2, [r1, #0]
 8005f3e:	4614      	mov	r4, r2
 8005f40:	b99c      	cbnz	r4, 8005f6a <_malloc_r+0x56>
 8005f42:	4f20      	ldr	r7, [pc, #128]	; (8005fc4 <_malloc_r+0xb0>)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b923      	cbnz	r3, 8005f52 <_malloc_r+0x3e>
 8005f48:	4621      	mov	r1, r4
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f000 f83c 	bl	8005fc8 <_sbrk_r>
 8005f50:	6038      	str	r0, [r7, #0]
 8005f52:	4629      	mov	r1, r5
 8005f54:	4630      	mov	r0, r6
 8005f56:	f000 f837 	bl	8005fc8 <_sbrk_r>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d123      	bne.n	8005fa6 <_malloc_r+0x92>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	4630      	mov	r0, r6
 8005f64:	f000 f88a 	bl	800607c <__malloc_unlock>
 8005f68:	e7e3      	b.n	8005f32 <_malloc_r+0x1e>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	1b5b      	subs	r3, r3, r5
 8005f6e:	d417      	bmi.n	8005fa0 <_malloc_r+0x8c>
 8005f70:	2b0b      	cmp	r3, #11
 8005f72:	d903      	bls.n	8005f7c <_malloc_r+0x68>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	441c      	add	r4, r3
 8005f78:	6025      	str	r5, [r4, #0]
 8005f7a:	e004      	b.n	8005f86 <_malloc_r+0x72>
 8005f7c:	6863      	ldr	r3, [r4, #4]
 8005f7e:	42a2      	cmp	r2, r4
 8005f80:	bf0c      	ite	eq
 8005f82:	600b      	streq	r3, [r1, #0]
 8005f84:	6053      	strne	r3, [r2, #4]
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f878 	bl	800607c <__malloc_unlock>
 8005f8c:	f104 000b 	add.w	r0, r4, #11
 8005f90:	1d23      	adds	r3, r4, #4
 8005f92:	f020 0007 	bic.w	r0, r0, #7
 8005f96:	1ac2      	subs	r2, r0, r3
 8005f98:	d0cc      	beq.n	8005f34 <_malloc_r+0x20>
 8005f9a:	1a1b      	subs	r3, r3, r0
 8005f9c:	50a3      	str	r3, [r4, r2]
 8005f9e:	e7c9      	b.n	8005f34 <_malloc_r+0x20>
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	6864      	ldr	r4, [r4, #4]
 8005fa4:	e7cc      	b.n	8005f40 <_malloc_r+0x2c>
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d0e3      	beq.n	8005f78 <_malloc_r+0x64>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f000 f808 	bl	8005fc8 <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d1dd      	bne.n	8005f78 <_malloc_r+0x64>
 8005fbc:	e7cf      	b.n	8005f5e <_malloc_r+0x4a>
 8005fbe:	bf00      	nop
 8005fc0:	200001dc 	.word	0x200001dc
 8005fc4:	200001e0 	.word	0x200001e0

08005fc8 <_sbrk_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d06      	ldr	r5, [pc, #24]	; (8005fe4 <_sbrk_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fb fbca 	bl	800176c <_sbrk>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_sbrk_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_sbrk_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200006d4 	.word	0x200006d4

08005fe8 <_raise_r>:
 8005fe8:	291f      	cmp	r1, #31
 8005fea:	b538      	push	{r3, r4, r5, lr}
 8005fec:	4604      	mov	r4, r0
 8005fee:	460d      	mov	r5, r1
 8005ff0:	d904      	bls.n	8005ffc <_raise_r+0x14>
 8005ff2:	2316      	movs	r3, #22
 8005ff4:	6003      	str	r3, [r0, #0]
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ffe:	b112      	cbz	r2, 8006006 <_raise_r+0x1e>
 8006000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006004:	b94b      	cbnz	r3, 800601a <_raise_r+0x32>
 8006006:	4620      	mov	r0, r4
 8006008:	f000 f830 	bl	800606c <_getpid_r>
 800600c:	462a      	mov	r2, r5
 800600e:	4601      	mov	r1, r0
 8006010:	4620      	mov	r0, r4
 8006012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006016:	f000 b817 	b.w	8006048 <_kill_r>
 800601a:	2b01      	cmp	r3, #1
 800601c:	d00a      	beq.n	8006034 <_raise_r+0x4c>
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	d103      	bne.n	800602a <_raise_r+0x42>
 8006022:	2316      	movs	r3, #22
 8006024:	6003      	str	r3, [r0, #0]
 8006026:	2001      	movs	r0, #1
 8006028:	e7e7      	b.n	8005ffa <_raise_r+0x12>
 800602a:	2400      	movs	r4, #0
 800602c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006030:	4628      	mov	r0, r5
 8006032:	4798      	blx	r3
 8006034:	2000      	movs	r0, #0
 8006036:	e7e0      	b.n	8005ffa <_raise_r+0x12>

08006038 <raise>:
 8006038:	4b02      	ldr	r3, [pc, #8]	; (8006044 <raise+0xc>)
 800603a:	4601      	mov	r1, r0
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f7ff bfd3 	b.w	8005fe8 <_raise_r>
 8006042:	bf00      	nop
 8006044:	20000014 	.word	0x20000014

08006048 <_kill_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	; (8006068 <_kill_r+0x20>)
 800604c:	2300      	movs	r3, #0
 800604e:	4604      	mov	r4, r0
 8006050:	4608      	mov	r0, r1
 8006052:	4611      	mov	r1, r2
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	f7fb fb6f 	bl	8001738 <_kill>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	d102      	bne.n	8006064 <_kill_r+0x1c>
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	b103      	cbz	r3, 8006064 <_kill_r+0x1c>
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	bd38      	pop	{r3, r4, r5, pc}
 8006066:	bf00      	nop
 8006068:	200006d4 	.word	0x200006d4

0800606c <_getpid_r>:
 800606c:	f7fb bb5c 	b.w	8001728 <_getpid>

08006070 <__malloc_lock>:
 8006070:	4801      	ldr	r0, [pc, #4]	; (8006078 <__malloc_lock+0x8>)
 8006072:	f000 b809 	b.w	8006088 <__retarget_lock_acquire_recursive>
 8006076:	bf00      	nop
 8006078:	200006dc 	.word	0x200006dc

0800607c <__malloc_unlock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_unlock+0x8>)
 800607e:	f000 b804 	b.w	800608a <__retarget_lock_release_recursive>
 8006082:	bf00      	nop
 8006084:	200006dc 	.word	0x200006dc

08006088 <__retarget_lock_acquire_recursive>:
 8006088:	4770      	bx	lr

0800608a <__retarget_lock_release_recursive>:
 800608a:	4770      	bx	lr

0800608c <_init>:
 800608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800608e:	bf00      	nop
 8006090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006092:	bc08      	pop	{r3}
 8006094:	469e      	mov	lr, r3
 8006096:	4770      	bx	lr

08006098 <_fini>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	bf00      	nop
 800609c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609e:	bc08      	pop	{r3}
 80060a0:	469e      	mov	lr, r3
 80060a2:	4770      	bx	lr
