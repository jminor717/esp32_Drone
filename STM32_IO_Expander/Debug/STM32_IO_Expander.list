
STM32_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800578c  0800578c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005794  08005794  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800579c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000010  080057ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  080057ac  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013301  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca6  00000000  00000000  00033341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00035fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f8f  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146a1  00000000  00000000  0005008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af38  00000000  00000000  00064730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  000ff6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005754 	.word	0x08005754

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005754 	.word	0x08005754

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2220      	movs	r2, #32
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f005 f92c 	bl	8005744 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ec:	4b4f      	ldr	r3, [pc, #316]	; (800062c <MX_ADC1_Init+0x160>)
 80004ee:	4a50      	ldr	r2, [pc, #320]	; (8000630 <MX_ADC1_Init+0x164>)
 80004f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f2:	4b4e      	ldr	r3, [pc, #312]	; (800062c <MX_ADC1_Init+0x160>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f8:	4b4c      	ldr	r3, [pc, #304]	; (800062c <MX_ADC1_Init+0x160>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004fe:	4b4b      	ldr	r3, [pc, #300]	; (800062c <MX_ADC1_Init+0x160>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b49      	ldr	r3, [pc, #292]	; (800062c <MX_ADC1_Init+0x160>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800050a:	4b48      	ldr	r3, [pc, #288]	; (800062c <MX_ADC1_Init+0x160>)
 800050c:	2201      	movs	r2, #1
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000512:	4b46      	ldr	r3, [pc, #280]	; (800062c <MX_ADC1_Init+0x160>)
 8000514:	2201      	movs	r2, #1
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b44      	ldr	r3, [pc, #272]	; (800062c <MX_ADC1_Init+0x160>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <MX_ADC1_Init+0x160>)
 8000520:	4a44      	ldr	r2, [pc, #272]	; (8000634 <MX_ADC1_Init+0x168>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b41      	ldr	r3, [pc, #260]	; (800062c <MX_ADC1_Init+0x160>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800052a:	4b40      	ldr	r3, [pc, #256]	; (800062c <MX_ADC1_Init+0x160>)
 800052c:	2203      	movs	r2, #3
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000530:	4b3e      	ldr	r3, [pc, #248]	; (800062c <MX_ADC1_Init+0x160>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000538:	4b3c      	ldr	r3, [pc, #240]	; (800062c <MX_ADC1_Init+0x160>)
 800053a:	2200      	movs	r2, #0
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053e:	483b      	ldr	r0, [pc, #236]	; (800062c <MX_ADC1_Init+0x160>)
 8000540:	f001 fc54 	bl	8001dec <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 800054a:	f000 fc8d 	bl	8000e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800054e:	2305      	movs	r3, #5
 8000550:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	4619      	mov	r1, r3
 8000560:	4832      	ldr	r0, [pc, #200]	; (800062c <MX_ADC1_Init+0x160>)
 8000562:	f001 fdd3 	bl	800210c <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 800056c:	f000 fc7c 	bl	8000e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000570:	2306      	movs	r3, #6
 8000572:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4619      	mov	r1, r3
 800057e:	482b      	ldr	r0, [pc, #172]	; (800062c <MX_ADC1_Init+0x160>)
 8000580:	f001 fdc4 	bl	800210c <HAL_ADC_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800058a:	f000 fc6d 	bl	8000e68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800058e:	2307      	movs	r3, #7
 8000590:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8000592:	2303      	movs	r3, #3
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4619      	mov	r1, r3
 800059c:	4823      	ldr	r0, [pc, #140]	; (800062c <MX_ADC1_Init+0x160>)
 800059e:	f001 fdb5 	bl	800210c <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005a8:	f000 fc5e 	bl	8000e68 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80005ac:	2305      	movs	r3, #5
 80005ae:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80005b4:	2303      	movs	r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MX_ADC1_Init+0x16c>)
 80005c2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	4619      	mov	r1, r3
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <MX_ADC1_Init+0x160>)
 80005d6:	f001 ffb7 	bl	8002548 <HAL_ADCEx_InjectedConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80005e0:	f000 fc42 	bl	8000e68 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80005e4:	2306      	movs	r3, #6
 80005e6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 3;
 80005ec:	2303      	movs	r3, #3
 80005ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x160>)
 80005f6:	f001 ffa7 	bl	8002548 <HAL_ADCEx_InjectedConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000600:	f000 fc32 	bl	8000e68 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000604:	2307      	movs	r3, #7
 8000606:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedOffset = 6;
 800060c:	2306      	movs	r3, #6
 800060e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x160>)
 8000616:	f001 ff97 	bl	8002548 <HAL_ADCEx_InjectedConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000620:	f000 fc22 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000014c 	.word	0x2000014c
 8000630:	40012000 	.word	0x40012000
 8000634:	0f000001 	.word	0x0f000001
 8000638:	000f0001 	.word	0x000f0001

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <HAL_ADC_MspInit+0xdc>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d157      	bne.n	800070e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <HAL_ADC_MspInit+0xe0>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <HAL_ADC_MspInit+0xe0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = AIN1_Pin|AIN3_Pin|AIN2_Pin;
 8000696:	23e0      	movs	r3, #224	; 0xe0
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <HAL_ADC_MspInit+0xe4>)
 80006aa:	f002 fd87 	bl	80031bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_ADC_MspInit+0xec>)
 80006b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 80006f4:	f002 f9d0 	bl	8002a98 <HAL_DMA_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006fe:	f000 fbb3 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 8000706:	639a      	str	r2, [r3, #56]	; 0x38
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_ADC_MspInit+0xe8>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	; 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012000 	.word	0x40012000
 800071c:	40023800 	.word	0x40023800
 8000720:	40020000 	.word	0x40020000
 8000724:	20000194 	.word	0x20000194
 8000728:	40026410 	.word	0x40026410

0800072c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <MX_DMA_Init+0xb8>)
 800073c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_DMA_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200b      	movs	r0, #11
 8000770:	f002 f95b 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000774:	200b      	movs	r0, #11
 8000776:	f002 f974 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200c      	movs	r0, #12
 8000780:	f002 f953 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000784:	200c      	movs	r0, #12
 8000786:	f002 f96c 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200d      	movs	r0, #13
 8000790:	f002 f94b 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000794:	200d      	movs	r0, #13
 8000796:	f002 f964 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200f      	movs	r0, #15
 80007a0:	f002 f943 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a4:	200f      	movs	r0, #15
 80007a6:	f002 f95c 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	2038      	movs	r0, #56	; 0x38
 80007b0:	f002 f93b 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b4:	2038      	movs	r0, #56	; 0x38
 80007b6:	f002 f954 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	203a      	movs	r0, #58	; 0x3a
 80007c0:	f002 f933 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007c4:	203a      	movs	r0, #58	; 0x3a
 80007c6:	f002 f94c 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	203b      	movs	r0, #59	; 0x3b
 80007d0:	f002 f92b 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007d4:	203b      	movs	r0, #59	; 0x3b
 80007d6:	f002 f944 	bl	8002a62 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a31      	ldr	r2, [pc, #196]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_GPIO_Init+0xe4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xe4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0xe4>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0xe4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xe8>)
 8000876:	f002 fe3d 	bl	80034f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0xe8>)
 8000894:	f002 fc92 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_SPI_MODE_Pin;
 8000898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_GPIO_Init+0xec>)
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP32_SPI_MODE_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_GPIO_Init+0xf0>)
 80008ae:	f002 fc85 	bl	80031bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f002 f8b7 	bl	8002a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008bc:	2028      	movs	r0, #40	; 0x28
 80008be:	f002 f8d0 	bl	8002a62 <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	10310000 	.word	0x10310000
 80008d8:	40020400 	.word	0x40020400

080008dc <Set_GPIO_Mode>:

/* USER CODE BEGIN 2 */

void Set_GPIO_Mode( GPIO_TypeDef * PORT, uint8_t pin, uint8_t direction )
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
 80008e8:	4613      	mov	r3, r2
 80008ea:	70bb      	strb	r3, [r7, #2]
    PORT->MODER |= ( direction<< ( pin * 2 ) );
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	78b9      	ldrb	r1, [r7, #2]
 80008f2:	78fa      	ldrb	r2, [r7, #3]
 80008f4:	0052      	lsls	r2, r2, #1
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	431a      	orrs	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
//    temp = GPIOx->MODER;
//    temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
//    temp |= ((direction & GPIO_MODE) << (position * 2U));
//    GPIOx->MODER = temp;

}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <calculate_cksum>:
#include <string.h>

#define CRTP_MAX_DATA_SIZE 30

static uint8_t calculate_cksum(uint8_t *data, size_t len)
{
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
    unsigned char *c = data;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	617b      	str	r3, [r7, #20]
    int i;
    unsigned char cksum = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]

    for (i = 0; i < len; i++)
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	e009      	b.n	8000938 <calculate_cksum+0x2c>
    {
        cksum += *(c++);
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	617a      	str	r2, [r7, #20]
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4413      	add	r3, r2
 8000930:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < len; i++)
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	3301      	adds	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	683a      	ldr	r2, [r7, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f1      	bhi.n	8000924 <calculate_cksum+0x18>
    }

    return cksum;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
}
 8000942:	4618      	mov	r0, r3
 8000944:	371c      	adds	r7, #28
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <CustomTickHandler>:
    }
    return (x - in_min) * (out_max - out_min) / divisor + out_min;
}

void CustomTickHandler(uint32_t tick)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
    DSHOT_MOTOR_REFRESH = true;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <CustomTickHandler+0x88>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
    if (uwTick % HUMAN_READABLE_SPI == 0)
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <CustomTickHandler+0x8c>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <CustomTickHandler+0x90>)
 8000964:	fba3 1302 	umull	r1, r3, r3, r2
 8000968:	095b      	lsrs	r3, r3, #5
 800096a:	2164      	movs	r1, #100	; 0x64
 800096c:	fb01 f303 	mul.w	r3, r1, r3
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <CustomTickHandler+0x2c>
    {
        SPI_REFRESH = true;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <CustomTickHandler+0x94>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
    }
    if (uwTick + (ServoIndex * SERVO_PID_OFFSET) % SERVO_PID_PERIOD == 0)
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <CustomTickHandler+0x98>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	005a      	lsls	r2, r3, #1
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <CustomTickHandler+0x9c>)
 8000984:	fb83 1302 	smull	r1, r3, r3, r2
 8000988:	1099      	asrs	r1, r3, #2
 800098a:	17d3      	asrs	r3, r2, #31
 800098c:	1ac9      	subs	r1, r1, r3
 800098e:	460b      	mov	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	1ad1      	subs	r1, r2, r3
 8000998:	460a      	mov	r2, r1
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <CustomTickHandler+0x8c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d113      	bne.n	80009cc <CustomTickHandler+0x7c>
    {
        SERVO_REFRESH[ServoIndex] = true;
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <CustomTickHandler+0x98>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <CustomTickHandler+0xa0>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	5499      	strb	r1, [r3, r2]
        if (ServoIndex < SERVO_NUM_DIVISIONS - 1)
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <CustomTickHandler+0x98>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d806      	bhi.n	80009c6 <CustomTickHandler+0x76>
        {
            ServoIndex++;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <CustomTickHandler+0x98>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <CustomTickHandler+0x98>)
 80009c2:	701a      	strb	r2, [r3, #0]
        else
        {
            ServoIndex = 0;
        }
    }
}
 80009c4:	e002      	b.n	80009cc <CustomTickHandler+0x7c>
            ServoIndex = 0;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <CustomTickHandler+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	2000002d 	.word	0x2000002d
 80009dc:	20000638 	.word	0x20000638
 80009e0:	51eb851f 	.word	0x51eb851f
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	20000138 	.word	0x20000138
 80009ec:	66666667 	.word	0x66666667
 80009f0:	20000030 	.word	0x20000030

080009f4 <HAL_SPI_TxRxCpltCallback>:
    my_motor_value[2] = x;
    my_motor_value[3] = x;
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

    memcpy(TX_Buffer, RX_Buffer, previousSpiSize);
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <HAL_SPI_TxRxCpltCallback+0x30>)
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000a06:	f004 fe8f 	bl	8005728 <memcpy>

    SpiRxCplt = true;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_SPI_TxRxCpltCallback+0x38>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
    SpiError = false;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000002 	.word	0x20000002
 8000a24:	20000038 	.word	0x20000038
 8000a28:	200000b8 	.word	0x200000b8
 8000a2c:	20000141 	.word	0x20000141
 8000a30:	20000142 	.word	0x20000142

08000a34 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    // nextSpiSize = defaultSpiSize;
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <HAL_SPI_ErrorCallback+0x30>)
 8000a42:	f002 fd70 	bl	8003526 <HAL_GPIO_TogglePin>

    SpiRxCplt = true;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_SPI_ErrorCallback+0x34>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
    SpiErrorCode = hspi->ErrorCode;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a50:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_SPI_ErrorCallback+0x38>)
 8000a52:	6013      	str	r3, [r2, #0]
    SpiError = true;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_SPI_ErrorCallback+0x3c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020800 	.word	0x40020800
 8000a68:	20000141 	.word	0x20000141
 8000a6c:	2000013c 	.word	0x2000013c
 8000a70:	20000142 	.word	0x20000142

08000a74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
//    if (pin == ESP32_SPI_MODE_Pin)
//    {
//    }
	// this assumes that when we read the GPIO state the result will represent the value after the transition
    if (HAL_GPIO_ReadPin(ESP32_SPI_MODE_GPIO_Port, ESP32_SPI_MODE_Pin) == GPIO_PIN_SET)
 8000a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a84:	f002 fd1e 	bl	80034c4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d103      	bne.n	8000a96 <HAL_GPIO_EXTI_Callback+0x22>
    	ESP32_MODE_LOW_TO_HIGH = true;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
    else
    	ESP32_MODE_HIGH_TO_LOW = true;

}
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_EXTI_Callback+0x28>
    	ESP32_MODE_HIGH_TO_LOW = true;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_GPIO_EXTI_Callback+0x38>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	20000143 	.word	0x20000143
 8000aac:	20000144 	.word	0x20000144

08000ab0 <RELEASE_SPI_BUS>:

void RELEASE_SPI_BUS()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    Set_GPIO_Mode(SPI1_CLK_GPIO_Port, SPI1_CLK_Pin_NUM, GPIO_MODE_INPUT);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <RELEASE_SPI_BUS+0x1c>)
 8000aba:	f7ff ff0f 	bl	80008dc <Set_GPIO_Mode>
    Set_GPIO_Mode(SPI1_MOSI_GPIO_Port, SPI1_MOSI_Pin_NUM, GPIO_MODE_INPUT);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	4802      	ldr	r0, [pc, #8]	; (8000acc <RELEASE_SPI_BUS+0x1c>)
 8000ac4:	f7ff ff0a 	bl	80008dc <Set_GPIO_Mode>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40020400 	.word	0x40020400

08000ad0 <Take_SPI_BUS>:

void Take_SPI_BUS()
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint16_t itter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	81fb      	strh	r3, [r7, #14]
    uint32_t badTransactions = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f001 f8e7 	bl	8001cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f959 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af6:	f7ff fe77 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000afa:	f7ff fe17 	bl	800072c <MX_DMA_Init>
  MX_SPI1_Init();
 8000afe:	f000 f9b9 	bl	8000e74 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000b02:	f001 f841 	bl	8001b88 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000b06:	f000 fb8f 	bl	8001228 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b0a:	f000 fc9d 	bl	8001448 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b0e:	f000 fcf5 	bl	80014fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b12:	f000 fd63 	bl	80015dc <MX_TIM5_Init>
  MX_ADC1_Init();
 8000b16:	f7ff fcd9 	bl	80004cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b1a:	f000 fc3d 	bl	8001398 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	488e      	ldr	r0, [pc, #568]	; (8000d5c <main+0x27c>)
 8000b24:	f002 fcff 	bl	8003526 <HAL_GPIO_TogglePin>
    TX_Buffer[0] = 0;
 8000b28:	4b8d      	ldr	r3, [pc, #564]	; (8000d60 <main+0x280>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    TX_Buffer[1] = 1;
 8000b2e:	4b8c      	ldr	r3, [pc, #560]	; (8000d60 <main+0x280>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	705a      	strb	r2, [r3, #1]
    TX_Buffer[2] = 2;
 8000b34:	4b8a      	ldr	r3, [pc, #552]	; (8000d60 <main+0x280>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	709a      	strb	r2, [r3, #2]
    TX_Buffer[3] = 3;
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <main+0x280>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	70da      	strb	r2, [r3, #3]
    TX_Buffer[4] = 4;
 8000b40:	4b87      	ldr	r3, [pc, #540]	; (8000d60 <main+0x280>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	711a      	strb	r2, [r3, #4]
    TX_Buffer[5] = 5;
 8000b46:	4b86      	ldr	r3, [pc, #536]	; (8000d60 <main+0x280>)
 8000b48:	2205      	movs	r2, #5
 8000b4a:	715a      	strb	r2, [r3, #5]
    TX_Buffer[6] = 6;
 8000b4c:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <main+0x280>)
 8000b4e:	2206      	movs	r2, #6
 8000b50:	719a      	strb	r2, [r3, #6]
    TX_Buffer[7] = 7;
 8000b52:	4b83      	ldr	r3, [pc, #524]	; (8000d60 <main+0x280>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	71da      	strb	r2, [r3, #7]
    TX_Buffer[8] = 8;
 8000b58:	4b81      	ldr	r3, [pc, #516]	; (8000d60 <main+0x280>)
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	721a      	strb	r2, [r3, #8]
    // HAL_SPI_RegisterCallback();

    HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
 8000b5e:	4b81      	ldr	r3, [pc, #516]	; (8000d64 <main+0x284>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	4a80      	ldr	r2, [pc, #512]	; (8000d68 <main+0x288>)
 8000b66:	497e      	ldr	r1, [pc, #504]	; (8000d60 <main+0x280>)
 8000b68:	4880      	ldr	r0, [pc, #512]	; (8000d6c <main+0x28c>)
 8000b6a:	f003 f9e1 	bl	8003f30 <HAL_SPI_TransmitReceive_DMA>
    // HAL_SPI_Receive_IT(&hspi1, RX_Buffer, BUFFER_SIZE);
    // HAL_SPI_TransmitReceive_IT(&hspi1, TX_Buffer, RX_Buffer, BUFFER_SIZE);
    //  dshot_init(DSHOT600);
    uint8_t crcIn = 0, crcOut = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	2300      	movs	r3, #0
 8000b74:	71bb      	strb	r3, [r7, #6]
    bool switchc = false;
 8000b76:	2300      	movs	r3, #0
 8000b78:	717b      	strb	r3, [r7, #5]
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //
        if (SpiRxCplt)
 8000b7a:	4b7d      	ldr	r3, [pc, #500]	; (8000d70 <main+0x290>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d06c      	beq.n	8000c5e <main+0x17e>
        {
            SpiRxCplt = false;
 8000b84:	4b7a      	ldr	r3, [pc, #488]	; (8000d70 <main+0x290>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
            SpiAvalable = true;
 8000b8a:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <main+0x294>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
            itter++;
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	3301      	adds	r3, #1
 8000b94:	81fb      	strh	r3, [r7, #14]
            crcIn = RX_Buffer[0];
 8000b96:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <main+0x288>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
            crcOut = calculate_cksum(RX_Buffer + 1, 4 - 1);
 8000b9c:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <main+0x298>)
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff feb3 	bl	800090c <calculate_cksum>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71bb      	strb	r3, [r7, #6]
            if (crcOut == crcIn && RX_Buffer[1] != 0)
 8000baa:	79ba      	ldrb	r2, [r7, #6]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d124      	bne.n	8000bfc <main+0x11c>
 8000bb2:	4b6d      	ldr	r3, [pc, #436]	; (8000d68 <main+0x288>)
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d020      	beq.n	8000bfc <main+0x11c>
            {
                memcpy(&rxHeader, RX_Buffer, sizeof(SPI_ESP_PACKET_HEADER));
 8000bba:	4a6b      	ldr	r2, [pc, #428]	; (8000d68 <main+0x288>)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc2:	6018      	str	r0, [r3, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	7019      	strb	r1, [r3, #0]
                if (rxHeader.radioSendData == 1)
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d004      	beq.n	8000bde <main+0xfe>
                {
                    ESP32HasBus = true;
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <main+0x29c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
                    RELEASE_SPI_BUS();
 8000bda:	f7ff ff69 	bl	8000ab0 <RELEASE_SPI_BUS>
                }

                nextSpiSize++;
 8000bde:	4b61      	ldr	r3, [pc, #388]	; (8000d64 <main+0x284>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b5f      	ldr	r3, [pc, #380]	; (8000d64 <main+0x284>)
 8000be8:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000bea:	4b5e      	ldr	r3, [pc, #376]	; (8000d64 <main+0x284>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b1c      	cmp	r3, #28
 8000bf0:	d90d      	bls.n	8000c0e <main+0x12e>
                {
                    nextSpiSize = defaultSpiSize;
 8000bf2:	4b63      	ldr	r3, [pc, #396]	; (8000d80 <main+0x2a0>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <main+0x284>)
 8000bf8:	701a      	strb	r2, [r3, #0]
                if (nextSpiSize >= 30 - 1)
 8000bfa:	e008      	b.n	8000c0e <main+0x12e>
                }
            }
            else
            {
                HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4856      	ldr	r0, [pc, #344]	; (8000d5c <main+0x27c>)
 8000c02:	f002 fc90 	bl	8003526 <HAL_GPIO_TogglePin>
                nextSpiSize = defaultSpiSize;
 8000c06:	4b5e      	ldr	r3, [pc, #376]	; (8000d80 <main+0x2a0>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <main+0x284>)
 8000c0c:	701a      	strb	r2, [r3, #0]
            }
            if (crcOut != crcIn)
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d002      	beq.n	8000c1c <main+0x13c>
            {
                badTransactions++;
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
            }

            if (switchc)
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00f      	beq.n	8000c42 <main+0x162>
            {
                SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_16);
 8000c22:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <main+0x28c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <main+0x28c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <main+0x28c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <main+0x28c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f042 0218 	orr.w	r2, r2, #24
 8000c40:	601a      	str	r2, [r3, #0]
            else
            {
               // SET_SPI_SPEED(hspi1, SPI_BAUDRATEPRESCALER_128);
            }

            switchc = !switchc;
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf14      	ite	ne
 8000c48:	2301      	movne	r3, #1
 8000c4a:	2300      	moveq	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f083 0301 	eor.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	717b      	strb	r3, [r7, #5]
 8000c56:	797b      	ldrb	r3, [r7, #5]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	717b      	strb	r3, [r7, #5]
        }

        if (SpiError)
 8000c5e:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <main+0x2a4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00f      	beq.n	8000c88 <main+0x1a8>
        {
            SpiError = false;
 8000c68:	4b46      	ldr	r3, [pc, #280]	; (8000d84 <main+0x2a4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
            // HAL_SPI_MspDeInit(&hspi1);
            //   MX_SPI1_Init();
            TX_Buffer[5] = (SpiRxCplt & 0xff00) >> 8;
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <main+0x290>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	121b      	asrs	r3, r3, #8
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <main+0x280>)
 8000c7a:	715a      	strb	r2, [r3, #5]
            TX_Buffer[6] = (SpiRxCplt & 0x00ff);
 8000c7c:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <main+0x290>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <main+0x280>)
 8000c86:	719a      	strb	r2, [r3, #6]
            // HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, nextSpiSize);
        }

        if (SPI_REFRESH && SpiAvalable && !ESP32HasBus)
 8000c88:	4b3f      	ldr	r3, [pc, #252]	; (8000d88 <main+0x2a8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d03f      	beq.n	8000d10 <main+0x230>
 8000c90:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <main+0x294>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d03b      	beq.n	8000d10 <main+0x230>
 8000c98:	4b38      	ldr	r3, [pc, #224]	; (8000d7c <main+0x29c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d034      	beq.n	8000d10 <main+0x230>
        {
            SPI_REFRESH = false;
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <main+0x2a8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
            SpiAvalable = false;
 8000cac:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <main+0x294>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
            TX_Buffer[9] = crcOut;
 8000cb2:	4a2b      	ldr	r2, [pc, #172]	; (8000d60 <main+0x280>)
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	7253      	strb	r3, [r2, #9]
            TX_Buffer[8] = crcIn;
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <main+0x280>)
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	7213      	strb	r3, [r2, #8]
            TX_Buffer[7] = (++itter & 0xff00) >> 8;
 8000cbe:	89fb      	ldrh	r3, [r7, #14]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	81fb      	strh	r3, [r7, #14]
 8000cc4:	89fb      	ldrh	r3, [r7, #14]
 8000cc6:	121b      	asrs	r3, r3, #8
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <main+0x280>)
 8000ccc:	71da      	strb	r2, [r3, #7]
            TX_Buffer[6] = itter & 0x00ff;
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <main+0x280>)
 8000cd4:	719a      	strb	r2, [r3, #6]
            TX_Buffer[2] = badTransactions;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <main+0x280>)
 8000cdc:	709a      	strb	r2, [r3, #2]
            TX_Buffer[1] = nextSpiSize;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <main+0x284>)
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <main+0x280>)
 8000ce4:	705a      	strb	r2, [r3, #1]
            TX_Buffer[0] = calculate_cksum(TX_Buffer + 1, 4 - 1);
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <main+0x2ac>)
 8000ce8:	2103      	movs	r1, #3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe0e 	bl	800090c <calculate_cksum>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <main+0x280>)
 8000cf6:	701a      	strb	r2, [r3, #0]

            HAL_SPI_TransmitReceive_DMA(&hspi1, TX_Buffer, RX_Buffer, previousSpiSize);
 8000cf8:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <main+0x2b0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <main+0x288>)
 8000d00:	4917      	ldr	r1, [pc, #92]	; (8000d60 <main+0x280>)
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <main+0x28c>)
 8000d04:	f003 f914 	bl	8003f30 <HAL_SPI_TransmitReceive_DMA>
            previousSpiSize = nextSpiSize;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <main+0x284>)
 8000d0a:	781a      	ldrb	r2, [r3, #0]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <main+0x2b0>)
 8000d0e:	701a      	strb	r2, [r3, #0]
        }
        if(ESP32_MODE_LOW_TO_HIGH){
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <main+0x2b4>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <main+0x23e>
        	RELEASE_SPI_BUS();
 8000d1a:	f7ff fec9 	bl	8000ab0 <RELEASE_SPI_BUS>
        }
        if(ESP32_MODE_HIGH_TO_LOW){
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <main+0x2b8>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <main+0x24c>
        	Take_SPI_BUS();
 8000d28:	f7ff fed2 	bl	8000ad0 <Take_SPI_BUS>
        }

        if (DSHOT_MOTOR_REFRESH)
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <main+0x2bc>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00f      	beq.n	8000d54 <main+0x274>
        {
            DSHOT_MOTOR_REFRESH = false;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <main+0x2bc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
            // HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
            HAL_ADC_Start(&hadc1);
 8000d3a:	4819      	ldr	r0, [pc, #100]	; (8000da0 <main+0x2c0>)
 8000d3c:	f001 f89a 	bl	8001e74 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 100);
 8000d40:	2164      	movs	r1, #100	; 0x64
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <main+0x2c0>)
 8000d44:	f001 f94a 	bl	8001fdc <HAL_ADC_PollForConversion>
            AD_RES = HAL_ADC_GetValue(&hadc1);
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <main+0x2c0>)
 8000d4a:	f001 f9d2 	bl	80020f2 <HAL_ADC_GetValue>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <main+0x2c4>)
 8000d52:	6013      	str	r3, [r2, #0]
        }

         HAL_Delay(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f001 f825 	bl	8001da4 <HAL_Delay>
        if (SpiRxCplt)
 8000d5a:	e70e      	b.n	8000b7a <main+0x9a>
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	200000b8 	.word	0x200000b8
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000038 	.word	0x20000038
 8000d6c:	200001f4 	.word	0x200001f4
 8000d70:	20000141 	.word	0x20000141
 8000d74:	20000003 	.word	0x20000003
 8000d78:	20000039 	.word	0x20000039
 8000d7c:	20000140 	.word	0x20000140
 8000d80:	20000001 	.word	0x20000001
 8000d84:	20000142 	.word	0x20000142
 8000d88:	2000002c 	.word	0x2000002c
 8000d8c:	200000b9 	.word	0x200000b9
 8000d90:	20000002 	.word	0x20000002
 8000d94:	20000143 	.word	0x20000143
 8000d98:	20000144 	.word	0x20000144
 8000d9c:	2000002d 	.word	0x2000002d
 8000da0:	2000014c 	.word	0x2000014c
 8000da4:	20000148 	.word	0x20000148

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	; 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	2230      	movs	r2, #48	; 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 fcc4 	bl	8005744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <SystemClock_Config+0xb8>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <SystemClock_Config+0xb8>)
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <SystemClock_Config+0xb8>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <SystemClock_Config+0xbc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df4:	4a1b      	ldr	r2, [pc, #108]	; (8000e64 <SystemClock_Config+0xbc>)
 8000df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <SystemClock_Config+0xbc>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e10:	2310      	movs	r3, #16
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fbb5 	bl	800358c <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e28:	f000 f81e 	bl	8000e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fe17 	bl	8003a7c <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e54:	f000 f808 	bl	8000e68 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6c:	b672      	cpsid	i
}
 8000e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e70:	e7fe      	b.n	8000e70 <Error_Handler+0x8>
	...

08000e74 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_SPI1_Init+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ea0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ea4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ea8:	2218      	movs	r2, #24
 8000eaa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ec0:	220a      	movs	r2, #10
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPI1_Init+0x64>)
 8000ec6:	f002 ffa9 	bl	8003e1c <HAL_SPI_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed0:	f7ff ffca 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200001f4 	.word	0x200001f4
 8000edc:	40013000 	.word	0x40013000

08000ee0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a60      	ldr	r2, [pc, #384]	; (8001080 <HAL_SPI_MspInit+0x1a0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	f040 80b9 	bne.w	8001076 <HAL_SPI_MspInit+0x196>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	4a5d      	ldr	r2, [pc, #372]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f12:	6453      	str	r3, [r2, #68]	; 0x44
 8000f14:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a56      	ldr	r2, [pc, #344]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a4f      	ldr	r2, [pc, #316]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b4d      	ldr	r3, [pc, #308]	; (8001084 <HAL_SPI_MspInit+0x1a4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4845      	ldr	r0, [pc, #276]	; (8001088 <HAL_SPI_MspInit+0x1a8>)
 8000f74:	f002 f922 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_CLK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f78:	2338      	movs	r3, #56	; 0x38
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f84:	2301      	movs	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	483e      	ldr	r0, [pc, #248]	; (800108c <HAL_SPI_MspInit+0x1ac>)
 8000f94:	f002 f912 	bl	80031bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f98:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	; (8001094 <HAL_SPI_MspInit+0x1b4>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fa0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fc6:	4b32      	ldr	r3, [pc, #200]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fda:	482d      	ldr	r0, [pc, #180]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fdc:	f001 fd5c 	bl	8002a98 <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8000fe6:	f7ff ff3f 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a28      	ldr	r2, [pc, #160]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000fee:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_SPI_MspInit+0x1b0>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_SPI_MspInit+0x1bc>)
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8000ffe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001002:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800102c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001030:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001034:	2204      	movs	r2, #4
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800103a:	2202      	movs	r2, #2
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001040:	2200      	movs	r2, #0
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800104c:	f001 fd24 	bl	8002a98 <HAL_DMA_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_SPI_MspInit+0x17a>
    {
      Error_Handler();
 8001056:	f7ff ff07 	bl	8000e68 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 800105e:	649a      	str	r2, [r3, #72]	; 0x48
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_SPI_MspInit+0x1b8>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2023      	movs	r0, #35	; 0x23
 800106c:	f001 fcdd 	bl	8002a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001070:	2023      	movs	r0, #35	; 0x23
 8001072:	f001 fcf6 	bl	8002a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40013000 	.word	0x40013000
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	2000024c 	.word	0x2000024c
 8001094:	40026440 	.word	0x40026440
 8001098:	200002ac 	.word	0x200002ac
 800109c:	40026458 	.word	0x40026458

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_MspInit+0x4c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x4c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 fe12 	bl	8001d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  CustomTickHandler(uwTick);
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <SysTick_Handler+0x18>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc03 	bl	8000950 <CustomTickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000638 	.word	0x20000638

08001154 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream0_IRQHandler+0x10>)
 800115a:	f001 fdc5 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000030c 	.word	0x2000030c

08001168 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA1_Stream1_IRQHandler+0x10>)
 800116e:	f001 fdbb 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200003b4 	.word	0x200003b4

0800117c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA1_Stream2_IRQHandler+0x10>)
 8001182:	f001 fdb1 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200004a4 	.word	0x200004a4

08001190 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA1_Stream4_IRQHandler+0x10>)
 8001196:	f001 fda7 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000504 	.word	0x20000504

080011a4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <SPI1_IRQHandler+0x10>)
 80011aa:	f002 ffc3 	bl	8004134 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200001f4 	.word	0x200001f4

080011b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80011bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011c0:	f002 f9cc 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA2_Stream0_IRQHandler+0x10>)
 80011ce:	f001 fd8b 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000194 	.word	0x20000194

080011dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <DMA2_Stream2_IRQHandler+0x10>)
 80011e2:	f001 fd81 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000024c 	.word	0x2000024c

080011f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA2_Stream3_IRQHandler+0x10>)
 80011f6:	f001 fd77 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002ac 	.word	0x200002ac

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	; 0x58
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2220      	movs	r2, #32
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fa6f 	bl	8005744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <MX_TIM1_Init+0x168>)
 8001268:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <MX_TIM1_Init+0x16c>)
 800126a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_TIM1_Init+0x168>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <MX_TIM1_Init+0x168>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <MX_TIM1_Init+0x168>)
 800127a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_TIM1_Init+0x168>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <MX_TIM1_Init+0x168>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_TIM1_Init+0x168>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001292:	483f      	ldr	r0, [pc, #252]	; (8001390 <MX_TIM1_Init+0x168>)
 8001294:	f003 fa88 	bl	80047a8 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800129e:	f7ff fde3 	bl	8000e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ac:	4619      	mov	r1, r3
 80012ae:	4838      	ldr	r0, [pc, #224]	; (8001390 <MX_TIM1_Init+0x168>)
 80012b0:	f003 fbd6 	bl	8004a60 <HAL_TIM_ConfigClockSource>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ba:	f7ff fdd5 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012be:	4834      	ldr	r0, [pc, #208]	; (8001390 <MX_TIM1_Init+0x168>)
 80012c0:	f003 fac1 	bl	8004846 <HAL_TIM_PWM_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ca:	f7ff fdcd 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012da:	4619      	mov	r1, r3
 80012dc:	482c      	ldr	r0, [pc, #176]	; (8001390 <MX_TIM1_Init+0x168>)
 80012de:	f003 ff29 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012e8:	f7ff fdbe 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ec:	2360      	movs	r3, #96	; 0x60
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <MX_TIM1_Init+0x168>)
 8001312:	f003 fae7 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800131c:	f7ff fda4 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	2204      	movs	r2, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4819      	ldr	r0, [pc, #100]	; (8001390 <MX_TIM1_Init+0x168>)
 800132a:	f003 fadb 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001334:	f7ff fd98 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	2208      	movs	r2, #8
 800133e:	4619      	mov	r1, r3
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_TIM1_Init+0x168>)
 8001342:	f003 facf 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800134c:	f7ff fd8c 	bl	8000e68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001368:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x168>)
 8001374:	f003 ff4c 	bl	8005210 <HAL_TIMEx_ConfigBreakDeadTime>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800137e:	f7ff fd73 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x168>)
 8001384:	f000 fb2c 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3758      	adds	r7, #88	; 0x58
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000564 	.word	0x20000564
 8001394:	40010000 	.word	0x40010000

08001398 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_TIM2_Init+0xac>)
 80013bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM2_Init+0xac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM2_Init+0xac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2048;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM2_Init+0xac>)
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM2_Init+0xac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM2_Init+0xac>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM2_Init+0xac>)
 80013e4:	f003 fa2f 	bl	8004846 <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013ee:	f7ff fd3b 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4619      	mov	r1, r3
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_TIM2_Init+0xac>)
 8001402:	f003 fe97 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800140c:	f7ff fd2c 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0xac>)
 8001428:	f003 fa5c 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001432:	f7ff fd19 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0xac>)
 8001438:	f000 fad2 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200005ac 	.word	0x200005ac

08001448 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
 8001466:	615a      	str	r2, [r3, #20]
 8001468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_TIM3_Init+0xac>)
 800146c:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <MX_TIM3_Init+0xb0>)
 800146e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <MX_TIM3_Init+0xac>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_TIM3_Init+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2048;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM3_Init+0xac>)
 800147e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001482:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM3_Init+0xac>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM3_Init+0xac>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001490:	4818      	ldr	r0, [pc, #96]	; (80014f4 <MX_TIM3_Init+0xac>)
 8001492:	f003 f9d8 	bl	8004846 <HAL_TIM_PWM_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800149c:	f7ff fce4 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4619      	mov	r1, r3
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_TIM3_Init+0xac>)
 80014b0:	f003 fe40 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ba:	f7ff fcd5 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2208      	movs	r2, #8
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <MX_TIM3_Init+0xac>)
 80014d6:	f003 fa05 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014e0:	f7ff fcc2 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM3_Init+0xac>)
 80014e6:	f000 fa7b 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000045c 	.word	0x2000045c
 80014f8:	40000400 	.word	0x40000400

080014fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <MX_TIM4_Init+0xdc>)
 8001522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_TIM4_Init+0xd8>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2048;
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001536:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_TIM4_Init+0xd8>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001544:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001546:	f003 f97e 	bl	8004846 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001550:	f7ff fc8a 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4619      	mov	r1, r3
 8001562:	481c      	ldr	r0, [pc, #112]	; (80015d4 <MX_TIM4_Init+0xd8>)
 8001564:	f003 fde6 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800156e:	f7ff fc7b 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	4812      	ldr	r0, [pc, #72]	; (80015d4 <MX_TIM4_Init+0xd8>)
 800158a:	f003 f9ab 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001594:	f7ff fc68 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2204      	movs	r2, #4
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <MX_TIM4_Init+0xd8>)
 80015a0:	f003 f9a0 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015aa:	f7ff fc5d 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2208      	movs	r2, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <MX_TIM4_Init+0xd8>)
 80015b6:	f003 f995 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80015c0:	f7ff fc52 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MX_TIM4_Init+0xd8>)
 80015c6:	f000 fa0b 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000036c 	.word	0x2000036c
 80015d8:	40000800 	.word	0x40000800

080015dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001600:	4a32      	ldr	r2, [pc, #200]	; (80016cc <MX_TIM5_Init+0xf0>)
 8001602:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <MX_TIM5_Init+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001616:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_TIM5_Init+0xec>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001624:	4828      	ldr	r0, [pc, #160]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001626:	f003 f90e 	bl	8004846 <HAL_TIM_PWM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001630:	f7ff fc1a 	bl	8000e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800163c:	f107 0320 	add.w	r3, r7, #32
 8001640:	4619      	mov	r1, r3
 8001642:	4821      	ldr	r0, [pc, #132]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001644:	f003 fd76 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800164e:	f7ff fc0b 	bl	8000e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001652:	2360      	movs	r3, #96	; 0x60
 8001654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4817      	ldr	r0, [pc, #92]	; (80016c8 <MX_TIM5_Init+0xec>)
 800166a:	f003 f93b 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001674:	f7ff fbf8 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001680:	f003 f930 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800168a:	f7ff fbed 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM5_Init+0xec>)
 8001696:	f003 f925 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80016a0:	f7ff fbe2 	bl	8000e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	220c      	movs	r2, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM5_Init+0xec>)
 80016ac:	f003 f91a 	bl	80048e4 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80016b6:	f7ff fbd7 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM5_Init+0xec>)
 80016bc:	f000 f990 	bl	80019e0 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000414 	.word	0x20000414
 80016cc:	40000c00 	.word	0x40000c00

080016d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_TIM_Base_MspInit+0x3c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10d      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_TIM_Base_MspInit+0x40>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x40>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_TIM_Base_MspInit+0x40>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40010000 	.word	0x40010000
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10e      	bne.n	8001744 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001742:	e135      	b.n	80019b0 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_TIM_PWM_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10e      	bne.n	800176c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
}
 800176a:	e121      	b.n	80019b0 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_TIM_PWM_MspInit+0x88>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d114      	bne.n	80017a0 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b03      	ldr	r3, [pc, #12]	; (8001794 <HAL_TIM_PWM_MspInit+0x80>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	e10d      	b.n	80019b0 <HAL_TIM_PWM_MspInit+0x29c>
 8001794:	40023800 	.word	0x40023800
 8001798:	40000400 	.word	0x40000400
 800179c:	40000800 	.word	0x40000800
  else if(tim_pwmHandle->Instance==TIM5)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <HAL_TIM_PWM_MspInit+0x2a4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	f040 8102 	bne.w	80019b0 <HAL_TIM_PWM_MspInit+0x29c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b82      	ldr	r3, [pc, #520]	; (80019bc <HAL_TIM_PWM_MspInit+0x2a8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a81      	ldr	r2, [pc, #516]	; (80019bc <HAL_TIM_PWM_MspInit+0x2a8>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <HAL_TIM_PWM_MspInit+0x2a8>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80017c8:	4b7d      	ldr	r3, [pc, #500]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017ca:	4a7e      	ldr	r2, [pc, #504]	; (80019c4 <HAL_TIM_PWM_MspInit+0x2b0>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80017ce:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017d0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d6:	4b7a      	ldr	r3, [pc, #488]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017d8:	2240      	movs	r2, #64	; 0x40
 80017da:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b78      	ldr	r3, [pc, #480]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b77      	ldr	r3, [pc, #476]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 80017fa:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001800:	4b6f      	ldr	r3, [pc, #444]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001806:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001808:	4b6d      	ldr	r3, [pc, #436]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 800180a:	2204      	movs	r2, #4
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800180e:	4b6c      	ldr	r3, [pc, #432]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001814:	4b6a      	ldr	r3, [pc, #424]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800181a:	4b69      	ldr	r3, [pc, #420]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001820:	4867      	ldr	r0, [pc, #412]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001822:	f001 f939 	bl	8002a98 <HAL_DMA_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_TIM_PWM_MspInit+0x11c>
      Error_Handler();
 800182c:	f7ff fb1c 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a63      	ldr	r2, [pc, #396]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
 8001836:	4a62      	ldr	r2, [pc, #392]	; (80019c0 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800183c:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 800183e:	4a63      	ldr	r2, [pc, #396]	; (80019cc <HAL_TIM_PWM_MspInit+0x2b8>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001842:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001844:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001848:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 800184c:	2240      	movs	r2, #64	; 0x40
 800184e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001864:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800186e:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 800187e:	2204      	movs	r2, #4
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8001894:	484c      	ldr	r0, [pc, #304]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 8001896:	f001 f8ff 	bl	8002a98 <HAL_DMA_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_TIM_PWM_MspInit+0x190>
      Error_Handler();
 80018a0:	f7ff fae2 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
 80018aa:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_TIM_PWM_MspInit+0x2b4>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018b2:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_TIM_PWM_MspInit+0x2c0>)
 80018b4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018b8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d2:	4b3f      	ldr	r3, [pc, #252]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 80018e2:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018f0:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018f2:	2204      	movs	r2, #4
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8001908:	4831      	ldr	r0, [pc, #196]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 800190a:	f001 f8c5 	bl	8002a98 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_TIM_PWM_MspInit+0x204>
      Error_Handler();
 8001914:	f7ff faa8 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001928:	621a      	str	r2, [r3, #32]
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_TIM_PWM_MspInit+0x2bc>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001932:	4a2a      	ldr	r2, [pc, #168]	; (80019dc <HAL_TIM_PWM_MspInit+0x2c8>)
 8001934:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001938:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800193c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800193e:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 800194a:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001958:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800195c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001960:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800196a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001972:	2204      	movs	r2, #4
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800198a:	f001 f885 	bl	8002a98 <HAL_DMA_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_TIM_PWM_MspInit+0x284>
      Error_Handler();
 8001994:	f7ff fa68 	bl	8000e68 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a0f      	ldr	r2, [pc, #60]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 800199c:	631a      	str	r2, [r3, #48]	; 0x30
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_TIM_PWM_MspInit+0x2c4>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40000c00 	.word	0x40000c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	200004a4 	.word	0x200004a4
 80019c4:	40026040 	.word	0x40026040
 80019c8:	20000504 	.word	0x20000504
 80019cc:	40026070 	.word	0x40026070
 80019d0:	2000030c 	.word	0x2000030c
 80019d4:	40026010 	.word	0x40026010
 80019d8:	200003b4 	.word	0x200003b4
 80019dc:	40026028 	.word	0x40026028

080019e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a5b      	ldr	r2, [pc, #364]	; (8001b6c <HAL_TIM_MspPostInit+0x18c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11f      	bne.n	8001a42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a59      	ldr	r2, [pc, #356]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M2N_Pin|M1P_Pin|M1N_Pin;
 8001a1e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	484e      	ldr	r0, [pc, #312]	; (8001b74 <HAL_TIM_MspPostInit+0x194>)
 8001a3c:	f001 fbbe 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a40:	e090      	b.n	8001b64 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4a:	d11f      	bne.n	8001a8c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b44      	ldr	r3, [pc, #272]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2P_Pin;
 8001a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2P_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	483b      	ldr	r0, [pc, #236]	; (8001b74 <HAL_TIM_MspPostInit+0x194>)
 8001a86:	f001 fb99 	bl	80031bc <HAL_GPIO_Init>
}
 8001a8a:	e06b      	b.n	8001b64 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <HAL_TIM_MspPostInit+0x198>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11e      	bne.n	8001ad4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3P_Pin;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3P_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	482b      	ldr	r0, [pc, #172]	; (8001b7c <HAL_TIM_MspPostInit+0x19c>)
 8001ace:	f001 fb75 	bl	80031bc <HAL_GPIO_Init>
}
 8001ad2:	e047      	b.n	8001b64 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_TIM_MspPostInit+0x1a0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d11f      	bne.n	8001b1e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3N_Pin|M4N_Pin|M4P_Pin;
 8001afa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4819      	ldr	r0, [pc, #100]	; (8001b7c <HAL_TIM_MspPostInit+0x19c>)
 8001b18:	f001 fb50 	bl	80031bc <HAL_GPIO_Init>
}
 8001b1c:	e022      	b.n	8001b64 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM5)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_TIM_MspPostInit+0x1a4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d11d      	bne.n	8001b64 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_TIM_MspPostInit+0x190>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dshot1_Pin|Dshot2_Pin|Dshot3_Pin|Dshot4_Pin;
 8001b44:	230f      	movs	r3, #15
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_TIM_MspPostInit+0x194>)
 8001b60:	f001 fb2c 	bl	80031bc <HAL_GPIO_Init>
}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40000800 	.word	0x40000800
 8001b84:	40000c00 	.word	0x40000c00

08001b88 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <MX_USART6_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_USART6_UART_Init+0x4c>)
 8001bc0:	f003 fb78 	bl	80052b4 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f7ff f94d 	bl	8000e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200005f4 	.word	0x200005f4
 8001bd8:	40011400 	.word	0x40011400

08001bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_UART_MspInit+0x84>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d12c      	bne.n	8001c58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c08:	f043 0320 	orr.w	r3, r3, #32
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_UART_MspInit+0x88>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_UART_MspInit+0x8c>)
 8001c54:	f001 fab2 	bl	80031bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40011400 	.word	0x40011400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020000 	.word	0x40020000

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c72:	490e      	ldr	r1, [pc, #56]	; (8001cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c88:	4c0b      	ldr	r4, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c96:	f7ff fab5 	bl	8001204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f003 fd21 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7fe ff1f 	bl	8000ae0 <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cb0:	0800579c 	.word	0x0800579c
  ldr r2, =_sbss
 8001cb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cb8:	2000063c 	.word	0x2000063c

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>
	...

08001cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <HAL_Init+0x40>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_Init+0x40>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_Init+0x40>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f000 fe93 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cee:	200f      	movs	r0, #15
 8001cf0:	f000 f808 	bl	8001d04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf4:	f7ff f9d4 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_InitTick+0x54>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x58>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 feab 	bl	8002a7e <HAL_SYSTICK_Config>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00e      	b.n	8001d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d80a      	bhi.n	8001d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f000 fe73 	bl	8002a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_InitTick+0x5c>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000004 	.word	0x20000004
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x20>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_IncTick+0x24>)
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000638 	.word	0x20000638

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <HAL_GetTick+0x14>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	20000638 	.word	0x20000638

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff ffee 	bl	8001d8c <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e033      	b.n	8001e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fc16 	bl	800063c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e32:	f023 0302 	bic.w	r3, r3, #2
 8001e36:	f043 0202 	orr.w	r2, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa86 	bl	8002350 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
 8001e5a:	e001      	b.n	8001e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Start+0x1a>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e097      	b.n	8001fbe <HAL_ADC_Start+0x14a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d018      	beq.n	8001ed6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <HAL_ADC_Start+0x158>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <HAL_ADC_Start+0x15c>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	0c9a      	lsrs	r2, r3, #18
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d15f      	bne.n	8001fa4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f023 0206 	bic.w	r2, r3, #6
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_ADC_Start+0x160>)
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10f      	bne.n	8001f7a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d129      	bne.n	8001fbc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e020      	b.n	8001fbc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_ADC_Start+0x164>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d11b      	bne.n	8001fbc <HAL_ADC_Start+0x148>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d114      	bne.n	8001fbc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	e00b      	b.n	8001fbc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	40012300 	.word	0x40012300
 8001fd8:	40012000 	.word	0x40012000

08001fdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff8:	d113      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e063      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002022:	f7ff feb3 	bl	8001d8c <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002028:	e021      	b.n	800206e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d01d      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x6c>
 8002038:	f7ff fea8 	bl	8001d8c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d212      	bcs.n	800206e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00b      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e03d      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d1d6      	bne.n	800202a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0212 	mvn.w	r2, #18
 8002084:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11f      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e105      	b.n	8002334 <HAL_ADC_ConfigChannel+0x228>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d925      	bls.n	8002184 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43da      	mvns	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	400a      	ands	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68d9      	ldr	r1, [r3, #12]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	4603      	mov	r3, r0
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4403      	add	r3, r0
 8002176:	3b1e      	subs	r3, #30
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e022      	b.n	80021ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	2207      	movs	r2, #7
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	400a      	ands	r2, r1
 80021a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4403      	add	r3, r0
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d824      	bhi.n	800221c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	3b05      	subs	r3, #5
 80021e4:	221f      	movs	r2, #31
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	400a      	ands	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3b05      	subs	r3, #5
 800220e:	fa00 f203 	lsl.w	r2, r0, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
 800221a:	e04c      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d824      	bhi.n	800226e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b23      	subs	r3, #35	; 0x23
 8002236:	221f      	movs	r2, #31
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43da      	mvns	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	400a      	ands	r2, r1
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b23      	subs	r3, #35	; 0x23
 8002260:	fa00 f203 	lsl.w	r2, r0, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
 800226c:	e023      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3b41      	subs	r3, #65	; 0x41
 8002280:	221f      	movs	r2, #31
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	400a      	ands	r2, r1
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b41      	subs	r3, #65	; 0x41
 80022aa:	fa00 f203 	lsl.w	r2, r0, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_ADC_ConfigChannel+0x234>)
 80022b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_ADC_ConfigChannel+0x238>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d109      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1cc>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_ADC_ConfigChannel+0x238>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d123      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d003      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x1e6>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b11      	cmp	r3, #17
 80022f0:	d11b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_ADC_ConfigChannel+0x23c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_ADC_ConfigChannel+0x240>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	20000004 	.word	0x20000004
 800234c:	431bde83 	.word	0x431bde83

08002350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002358:	4b79      	ldr	r3, [pc, #484]	; (8002540 <ADC_Init+0x1f0>)
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	021a      	lsls	r2, r3, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	4a58      	ldr	r2, [pc, #352]	; (8002544 <ADC_Init+0x1f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e00f      	b.n	800244e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800244c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0202 	bic.w	r2, r2, #2
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
 8002468:	005a      	lsls	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800248a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800249a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	3b01      	subs	r3, #1
 80024a8:	035a      	lsls	r2, r3, #13
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e007      	b.n	80024c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051a      	lsls	r2, r3, #20
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002506:	025a      	lsls	r2, r3, #9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	029a      	lsls	r2, r3, #10
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40012300 	.word	0x40012300
 8002544:	0f000001 	.word	0x0f000001

08002548 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e17d      	b.n	800285c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d925      	bls.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68d9      	ldr	r1, [r3, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	3b1e      	subs	r3, #30
 8002586:	2207      	movs	r2, #7
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43da      	mvns	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	400a      	ands	r2, r1
 8002594:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68d9      	ldr	r1, [r3, #12]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4403      	add	r3, r0
 80025ae:	3b1e      	subs	r3, #30
 80025b0:	409a      	lsls	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	e022      	b.n	8002602 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	2207      	movs	r2, #7
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	400a      	ands	r2, r1
 80025de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6919      	ldr	r1, [r3, #16]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4403      	add	r3, r0
 80025f8:	409a      	lsls	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	3b01      	subs	r3, #1
 800261e:	051a      	lsls	r2, r3, #20
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	3303      	adds	r3, #3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3303      	adds	r3, #3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	fa00 f203 	lsl.w	r2, r0, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a74      	ldr	r2, [pc, #464]	; (8002868 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d022      	beq.n	80026e0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80026a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	e00f      	b.n	8002700 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80026ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80026fe:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	7d5b      	ldrb	r3, [r3, #21]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	e007      	b.n	800272a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002728:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	7d1b      	ldrb	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	e007      	b.n	8002754 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002752:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d02e      	beq.n	80027ba <HAL_ADCEx_InjectedConfigChannel+0x272>
 800275c:	2b03      	cmp	r3, #3
 800275e:	d840      	bhi.n	80027e2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002760:	2b01      	cmp	r3, #1
 8002762:	d002      	beq.n	800276a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002764:	2b02      	cmp	r3, #2
 8002766:	d014      	beq.n	8002792 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002768:	e03b      	b.n	80027e2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6959      	ldr	r1, [r3, #20]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	615a      	str	r2, [r3, #20]
      break;
 8002790:	e03b      	b.n	800280a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027a0:	f023 030f 	bic.w	r3, r3, #15
 80027a4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6999      	ldr	r1, [r3, #24]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	619a      	str	r2, [r3, #24]
      break;
 80027b8:	e027      	b.n	800280a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027c8:	f023 030f 	bic.w	r3, r3, #15
 80027cc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69d9      	ldr	r1, [r3, #28]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	61da      	str	r2, [r3, #28]
      break;
 80027e0:	e013      	b.n	800280a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027f0:	f023 030f 	bic.w	r3, r3, #15
 80027f4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6a19      	ldr	r1, [r3, #32]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	621a      	str	r2, [r3, #32]
      break;
 8002808:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800280c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d109      	bne.n	800282c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b12      	cmp	r3, #18
 800281e:	d105      	bne.n	800282c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10d      	bne.n	8002852 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b10      	cmp	r3, #16
 800283c:	d003      	beq.n	8002846 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b11      	cmp	r3, #17
 8002844:	d105      	bne.n	8002852 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	000f0001 	.word	0x000f0001
 800286c:	40012300 	.word	0x40012300
 8002870:	40012000 	.word	0x40012000

08002874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800289c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <__NVIC_SetPriorityGrouping+0x44>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	60d3      	str	r3, [r2, #12]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__NVIC_GetPriorityGrouping+0x18>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 0307 	and.w	r3, r3, #7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	db0b      	blt.n	8002902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	f003 021f 	and.w	r2, r3, #31
 80028f0:	4907      	ldr	r1, [pc, #28]	; (8002910 <__NVIC_EnableIRQ+0x38>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2001      	movs	r0, #1
 80028fa:	fa00 f202 	lsl.w	r2, r0, r2
 80028fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000e100 	.word	0xe000e100

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff29 	bl	8002874 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff3e 	bl	80028bc <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff8e 	bl	8002968 <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5d 	bl	8002914 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff31 	bl	80028d8 <__NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ffa2 	bl	80029d0 <SysTick_Config>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff f972 	bl	8001d8c <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e099      	b.n	8002be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad4:	e00f      	b.n	8002af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad6:	f7ff f959 	bl	8001d8c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d908      	bls.n	8002af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e078      	b.n	8002be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e8      	bne.n	8002ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_DMA_Init+0x158>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d107      	bne.n	8002b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0307 	bic.w	r3, r3, #7
 8002b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d117      	bne.n	8002bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa91 	bl	80030c4 <DMA_CheckFifoParam>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e016      	b.n	8002be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa48 	bl	8003058 <DMA_CalcBaseAndBitshift>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	223f      	movs	r2, #63	; 0x3f
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	f010803f 	.word	0xf010803f

08002bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_DMA_Start_IT+0x26>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e040      	b.n	8002c9c <HAL_DMA_Start_IT+0xa8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d12f      	bne.n	8002c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f9da 	bl	8002ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	223f      	movs	r2, #63	; 0x3f
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0216 	orr.w	r2, r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e005      	b.n	8002c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
 8002c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d004      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00c      	b.n	8002cdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_DMA_IRQHandler+0x258>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a92      	ldr	r2, [pc, #584]	; (8002f44 <HAL_DMA_IRQHandler+0x25c>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	2208      	movs	r2, #8
 8002d14:	409a      	lsls	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d40:	2208      	movs	r2, #8
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00b      	beq.n	8002d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2201      	movs	r2, #1
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 0202 	orr.w	r2, r3, #2
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2204      	movs	r2, #4
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	2204      	movs	r2, #4
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d043      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03c      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	2210      	movs	r2, #16
 8002de4:	409a      	lsls	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d018      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d024      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
 8002e16:	e01f      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	4798      	blx	r3
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d107      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 808e 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8086 	beq.w	8002f86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	2220      	movs	r2, #32
 8002e80:	409a      	lsls	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d136      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0216 	bic.w	r2, r2, #22
 8002ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_DMA_IRQHandler+0x1da>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0208 	bic.w	r2, r2, #8
 8002ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d07d      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
        }
        return;
 8002efe:	e078      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01c      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d108      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d030      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e02b      	b.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d027      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e022      	b.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
 8002f40:	20000004 	.word	0x20000004
 8002f44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0210 	bic.w	r2, r2, #16
 8002f64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d032      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d307      	bcc.n	8002fce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f2      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x2ca>
 8002fcc:	e000      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ff2:	bf00      	nop
    }
  }
}
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop

08002ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d108      	bne.n	800303c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800303a:	e007      	b.n	800304c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	60da      	str	r2, [r3, #12]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3b10      	subs	r3, #16
 8003068:	4a14      	ldr	r2, [pc, #80]	; (80030bc <DMA_CalcBaseAndBitshift+0x64>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b03      	cmp	r3, #3
 8003084:	d909      	bls.n	800309a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	; 0x58
 8003098:	e007      	b.n	80030aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	aaaaaaab 	.word	0xaaaaaaab
 80030c0:	08005784 	.word	0x08005784

080030c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d11f      	bne.n	800311e <DMA_CheckFifoParam+0x5a>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d856      	bhi.n	8003192 <DMA_CheckFifoParam+0xce>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <DMA_CheckFifoParam+0x28>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310f 	.word	0x0800310f
 80030f4:	080030fd 	.word	0x080030fd
 80030f8:	08003193 	.word	0x08003193
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d046      	beq.n	8003196 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310c:	e043      	b.n	8003196 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003116:	d140      	bne.n	800319a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311c:	e03d      	b.n	800319a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d121      	bne.n	800316c <DMA_CheckFifoParam+0xa8>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b03      	cmp	r3, #3
 800312c:	d837      	bhi.n	800319e <DMA_CheckFifoParam+0xda>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <DMA_CheckFifoParam+0x70>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003145 	.word	0x08003145
 8003138:	0800314b 	.word	0x0800314b
 800313c:	08003145 	.word	0x08003145
 8003140:	0800315d 	.word	0x0800315d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e030      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d025      	beq.n	80031a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315a:	e022      	b.n	80031a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003164:	d11f      	bne.n	80031a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800316a:	e01c      	b.n	80031a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d903      	bls.n	800317a <DMA_CheckFifoParam+0xb6>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d003      	beq.n	8003180 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003178:	e018      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
      break;
 800317e:	e015      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      break;
 8003190:	e00b      	b.n	80031aa <DMA_CheckFifoParam+0xe6>
      break;
 8003192:	bf00      	nop
 8003194:	e00a      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
 8003198:	e008      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e006      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
 80031a0:	e004      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
 80031a4:	e002      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;   
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <DMA_CheckFifoParam+0xe8>
      break;
 80031aa:	bf00      	nop
    }
  } 
  
  return status; 
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e159      	b.n	800348c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f040 8148 	bne.w	8003486 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d005      	beq.n	800320e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320a:	2b02      	cmp	r3, #2
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b03      	cmp	r3, #3
 800327a:	d017      	beq.n	80032ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2203      	movs	r2, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d123      	bne.n	8003300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	08da      	lsrs	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3208      	adds	r2, #8
 80032c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	220f      	movs	r2, #15
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	08da      	lsrs	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3208      	adds	r2, #8
 80032fa:	69b9      	ldr	r1, [r7, #24]
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0203 	and.w	r2, r3, #3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a2 	beq.w	8003486 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6453      	str	r3, [r2, #68]	; 0x44
 8003352:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <HAL_GPIO_Init+0x2e8>)
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335e:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	3302      	adds	r3, #2
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	220f      	movs	r2, #15
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a49      	ldr	r2, [pc, #292]	; (80034ac <HAL_GPIO_Init+0x2f0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x202>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a48      	ldr	r2, [pc, #288]	; (80034b0 <HAL_GPIO_Init+0x2f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x1fe>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a47      	ldr	r2, [pc, #284]	; (80034b4 <HAL_GPIO_Init+0x2f8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x1fa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a46      	ldr	r2, [pc, #280]	; (80034b8 <HAL_GPIO_Init+0x2fc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x1f6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a45      	ldr	r2, [pc, #276]	; (80034bc <HAL_GPIO_Init+0x300>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x1f2>
 80033aa:	2304      	movs	r3, #4
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ae:	2307      	movs	r3, #7
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x204>
 80033be:	2300      	movs	r3, #0
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_GPIO_Init+0x2ec>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_GPIO_Init+0x304>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003402:	4a2f      	ldr	r2, [pc, #188]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_GPIO_Init+0x304>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003480:	4a0f      	ldr	r2, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x304>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f aea2 	bls.w	80031d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40013c00 	.word	0x40013c00

080034c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e001      	b.n	80034e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	4613      	mov	r3, r2
 8003502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003504:	787b      	ldrb	r3, [r7, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003510:	e003      	b.n	800351a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003512:	887b      	ldrh	r3, [r7, #2]
 8003514:	041a      	lsls	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4013      	ands	r3, r2
 800353e:	041a      	lsls	r2, r3, #16
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43d9      	mvns	r1, r3
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fa7a 	bl	8000a74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40013c00 	.word	0x40013c00

0800358c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e264      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d075      	beq.n	8003696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035aa:	4ba3      	ldr	r3, [pc, #652]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d00c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d112      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035c2:	4b9d      	ldr	r3, [pc, #628]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	4b99      	ldr	r3, [pc, #612]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d05b      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d157      	bne.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e23f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f0:	d106      	bne.n	8003600 <HAL_RCC_OscConfig+0x74>
 80035f2:	4b91      	ldr	r3, [pc, #580]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a90      	ldr	r2, [pc, #576]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e01d      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x98>
 800360a:	4b8b      	ldr	r3, [pc, #556]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a8a      	ldr	r2, [pc, #552]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b88      	ldr	r3, [pc, #544]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a87      	ldr	r2, [pc, #540]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0xb0>
 8003624:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a83      	ldr	r2, [pc, #524]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b81      	ldr	r3, [pc, #516]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a80      	ldr	r2, [pc, #512]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fba2 	bl	8001d8c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800364c:	f7fe fb9e 	bl	8001d8c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e204      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b76      	ldr	r3, [pc, #472]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0xc0>
 800366a:	e014      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fb8e 	bl	8001d8c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fb8a 	bl	8001d8c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1f0      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d063      	beq.n	800376a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b62      	ldr	r3, [pc, #392]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ba:	4b5f      	ldr	r3, [pc, #380]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d116      	bne.n	80036f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e1c4      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4952      	ldr	r1, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	e03a      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe fb43 	bl	8001d8c <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800370a:	f7fe fb3f 	bl	8001d8c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e1a5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0f0      	beq.n	800370a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4940      	ldr	r1, [pc, #256]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
 800373c:	e015      	b.n	800376a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <HAL_RCC_OscConfig+0x2b0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fb22 	bl	8001d8c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fb1e 	bl	8001d8c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e184      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d030      	beq.n	80037d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fb02 	bl	8001d8c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fe fafe 	bl	8001d8c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e164      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x200>
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x2b4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b2:	f7fe faeb 	bl	8001d8c <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ba:	f7fe fae7 	bl	8001d8c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e14d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a0 	beq.w	8003926 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003804:	6413      	str	r3, [r2, #64]	; 0x40
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x2b8>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800382e:	f7fe faad 	bl	8001d8c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	e011      	b.n	800385a <HAL_RCC_OscConfig+0x2ce>
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	42470000 	.word	0x42470000
 8003840:	42470e80 	.word	0x42470e80
 8003844:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fe faa0 	bl	8001d8c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e106      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x4e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d106      	bne.n	800387c <HAL_RCC_OscConfig+0x2f0>
 800386e:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a80      	ldr	r2, [pc, #512]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e01c      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b05      	cmp	r3, #5
 8003882:	d10c      	bne.n	800389e <HAL_RCC_OscConfig+0x312>
 8003884:	4b7b      	ldr	r3, [pc, #492]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	f043 0304 	orr.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	4b78      	ldr	r3, [pc, #480]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a77      	ldr	r2, [pc, #476]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	e00b      	b.n	80038b6 <HAL_RCC_OscConfig+0x32a>
 800389e:	4b75      	ldr	r3, [pc, #468]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a74      	ldr	r2, [pc, #464]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a71      	ldr	r2, [pc, #452]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d015      	beq.n	80038ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038be:	f7fe fa65 	bl	8001d8c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c6:	f7fe fa61 	bl	8001d8c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e0c5      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ee      	beq.n	80038c6 <HAL_RCC_OscConfig+0x33a>
 80038e8:	e014      	b.n	8003914 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fe fa4f 	bl	8001d8c <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe fa4b 	bl	8001d8c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e0af      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1ee      	bne.n	80038f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b56      	ldr	r3, [pc, #344]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 809b 	beq.w	8003a66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003930:	4b50      	ldr	r3, [pc, #320]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d05c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d141      	bne.n	80039c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe fa1f 	bl	8001d8c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fe fa1b 	bl	8001d8c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e081      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003964:	4b43      	ldr	r3, [pc, #268]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69da      	ldr	r2, [r3, #28]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	019b      	lsls	r3, r3, #6
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	061b      	lsls	r3, r3, #24
 8003994:	4937      	ldr	r1, [pc, #220]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe f9f4 	bl	8001d8c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe f9f0 	bl	8001d8c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e056      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x41c>
 80039c6:	e04e      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_OscConfig+0x4ec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fe f9dd 	bl	8001d8c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe f9d9 	bl	8001d8c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e03f      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x44a>
 80039f4:	e037      	b.n	8003a66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e032      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a02:	4b1c      	ldr	r3, [pc, #112]	; (8003a74 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d028      	beq.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d121      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d11a      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40007000 	.word	0x40007000
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470060 	.word	0x42470060

08003a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0cc      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d90c      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b8      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad0:	4b59      	ldr	r3, [pc, #356]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	4a58      	ldr	r2, [pc, #352]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	494d      	ldr	r1, [pc, #308]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d044      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d003      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e067      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5a:	4b37      	ldr	r3, [pc, #220]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe f90e 	bl	8001d8c <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b74:	f7fe f90a 	bl	8001d8c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e04f      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 020c 	and.w	r2, r3, #12
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1eb      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d20c      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd0:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4916      	ldr	r1, [pc, #88]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	490e      	ldr	r1, [pc, #56]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c02:	f000 f821 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003c06:	4602      	mov	r2, r0
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	490a      	ldr	r1, [pc, #40]	; (8003c3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	5ccb      	ldrb	r3, [r1, r3]
 8003c16:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1e:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe f86e 	bl	8001d04 <HAL_InitTick>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023c00 	.word	0x40023c00
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	0800576c 	.word	0x0800576c
 8003c40:	20000004 	.word	0x20000004
 8003c44:	20000008 	.word	0x20000008

08003c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c48:	b5b0      	push	{r4, r5, r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c4e:	2100      	movs	r1, #0
 8003c50:	6079      	str	r1, [r7, #4]
 8003c52:	2100      	movs	r1, #0
 8003c54:	60f9      	str	r1, [r7, #12]
 8003c56:	2100      	movs	r1, #0
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5e:	4952      	ldr	r1, [pc, #328]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c60:	6889      	ldr	r1, [r1, #8]
 8003c62:	f001 010c 	and.w	r1, r1, #12
 8003c66:	2908      	cmp	r1, #8
 8003c68:	d00d      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x3e>
 8003c6a:	2908      	cmp	r1, #8
 8003c6c:	f200 8094 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d002      	beq.n	8003c7a <HAL_RCC_GetSysClockFreq+0x32>
 8003c74:	2904      	cmp	r1, #4
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x38>
 8003c78:	e08e      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c7a:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_GetSysClockFreq+0x164>)
 8003c7c:	60bb      	str	r3, [r7, #8]
       break;
 8003c7e:	e08e      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c82:	60bb      	str	r3, [r7, #8]
      break;
 8003c84:	e08b      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c86:	4948      	ldr	r1, [pc, #288]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c88:	6849      	ldr	r1, [r1, #4]
 8003c8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003c8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c90:	4945      	ldr	r1, [pc, #276]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c92:	6849      	ldr	r1, [r1, #4]
 8003c94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d024      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4942      	ldr	r1, [pc, #264]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c9e:	6849      	ldr	r1, [r1, #4]
 8003ca0:	0989      	lsrs	r1, r1, #6
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003cac:	f04f 0500 	mov.w	r5, #0
 8003cb0:	ea00 0204 	and.w	r2, r0, r4
 8003cb4:	ea01 0305 	and.w	r3, r1, r5
 8003cb8:	493d      	ldr	r1, [pc, #244]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cba:	fb01 f003 	mul.w	r0, r1, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	fb01 f102 	mul.w	r1, r1, r2
 8003cc4:	1844      	adds	r4, r0, r1
 8003cc6:	493a      	ldr	r1, [pc, #232]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cc8:	fba2 0101 	umull	r0, r1, r2, r1
 8003ccc:	1863      	adds	r3, r4, r1
 8003cce:	4619      	mov	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f7fc fa7c 	bl	80001d4 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e04a      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce6:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	ea02 0400 	and.w	r4, r2, r0
 8003cfe:	ea03 0501 	and.w	r5, r3, r1
 8003d02:	4620      	mov	r0, r4
 8003d04:	4629      	mov	r1, r5
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	014b      	lsls	r3, r1, #5
 8003d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d14:	0142      	lsls	r2, r0, #5
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	1b00      	subs	r0, r0, r4
 8003d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	018b      	lsls	r3, r1, #6
 8003d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d2e:	0182      	lsls	r2, r0, #6
 8003d30:	1a12      	subs	r2, r2, r0
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	00d9      	lsls	r1, r3, #3
 8003d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d44:	00d0      	lsls	r0, r2, #3
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	1912      	adds	r2, r2, r4
 8003d4c:	eb45 0303 	adc.w	r3, r5, r3
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0299      	lsls	r1, r3, #10
 8003d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d5e:	0290      	lsls	r0, r2, #10
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	f7fc fa30 	bl	80001d4 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_RCC_GetSysClockFreq+0x164>)
 8003d9a:	60bb      	str	r3, [r7, #8]
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bdb0      	pop	{r4, r5, r7, pc}
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	017d7840 	.word	0x017d7840

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000004 	.word	0x20000004

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	0800577c 	.word	0x0800577c

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df8:	f7ff ffdc 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800577c 	.word	0x0800577c

08003e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07b      	b.n	8003f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d009      	beq.n	8003e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
 8003e46:	e005      	b.n	8003e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd f836 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	ea42 0103 	orr.w	r1, r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0104 	and.w	r1, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0210 	and.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0e3      	b.n	8004118 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003f66:	7dbb      	ldrb	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d00d      	beq.n	8003f88 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f72:	d106      	bne.n	8003f82 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003f7c:	7dbb      	ldrb	r3, [r7, #22]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d002      	beq.n	8003f88 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
 8003f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f86:	e0c2      	b.n	800410e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003f94:	887b      	ldrh	r3, [r7, #2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f9e:	e0b6      	b.n	800410e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d003      	beq.n	8003fb4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2205      	movs	r2, #5
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	887a      	ldrh	r2, [r7, #2]
 8003fca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d108      	bne.n	8004008 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffa:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004002:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c
 8004006:	e007      	b.n	8004018 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	4a45      	ldr	r2, [pc, #276]	; (800412c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	4a44      	ldr	r2, [pc, #272]	; (8004130 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800401e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	2200      	movs	r2, #0
 8004026:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	4619      	mov	r1, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004040:	f7fe fdd8 	bl	8002bf4 <HAL_DMA_Start_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004062:	e054      	b.n	800410e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	2200      	movs	r2, #0
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	2200      	movs	r2, #0
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	2200      	movs	r2, #0
 800408a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004090:	2200      	movs	r2, #0
 8004092:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4619      	mov	r1, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040ac:	f7fe fda2 	bl	8002bf4 <HAL_DMA_Start_IT>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f043 0210 	orr.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040ce:	e01e      	b.n	800410e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d007      	beq.n	80040ee <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ec:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0220 	orr.w	r2, r2, #32
 80040fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0202 	orr.w	r2, r2, #2
 800410c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004116:	7dfb      	ldrb	r3, [r7, #23]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	080044a9 	.word	0x080044a9
 8004124:	08004371 	.word	0x08004371
 8004128:	080044c5 	.word	0x080044c5
 800412c:	08004419 	.word	0x08004419
 8004130:	080044e1 	.word	0x080044e1

08004134 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
    return;
 8004176:	e0d7      	b.n	8004328 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_SPI_IRQHandler+0x66>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	09db      	lsrs	r3, r3, #7
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
    return;
 8004198:	e0c6      	b.n	8004328 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <HAL_SPI_IRQHandler+0x8c>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80b4 	beq.w	8004328 <HAL_SPI_IRQHandler+0x1f4>
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80ad 	beq.w	8004328 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d023      	beq.n	8004222 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d011      	beq.n	800420a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f043 0204 	orr.w	r2, r3, #4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	e00b      	b.n	8004222 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	693b      	ldr	r3, [r7, #16]
        return;
 8004220:	e082      	b.n	8004328 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00c      	beq.n	800427e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0208 	orr.w	r2, r3, #8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	2b00      	cmp	r3, #0
 8004284:	d04f      	beq.n	8004326 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004294:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_SPI_IRQHandler+0x17e>
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d034      	beq.n	800431c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0203 	bic.w	r2, r2, #3
 80042c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	4a18      	ldr	r2, [pc, #96]	; (8004330 <HAL_SPI_IRQHandler+0x1fc>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fce4 	bl	8002ca4 <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	4a0d      	ldr	r2, [pc, #52]	; (8004330 <HAL_SPI_IRQHandler+0x1fc>)
 80042fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fcce 	bl	8002ca4 <HAL_DMA_Abort_IT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800431a:	e003      	b.n	8004324 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fb89 	bl	8000a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004322:	e000      	b.n	8004326 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004324:	bf00      	nop
    return;
 8004326:	bf00      	nop
  }
}
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	08004521 	.word	0x08004521

08004334 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800437e:	f7fd fd05 	bl	8001d8c <HAL_GetTick>
 8004382:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004392:	d03b      	beq.n	800440c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0220 	bic.w	r2, r2, #32
 80043a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <SPI_DMAReceiveCplt+0x58>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b4:	d108      	bne.n	80043c8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0203 	bic.w	r2, r2, #3
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e007      	b.n	80043d8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	2164      	movs	r1, #100	; 0x64
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f93b 	bl	8004658 <SPI_EndRxTransaction>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7fc fb15 	bl	8000a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800440a:	e002      	b.n	8004412 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff ff91 	bl	8004334 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004426:	f7fd fcb1 	bl	8001d8c <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800443a:	d02f      	beq.n	800449c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0220 	bic.w	r2, r2, #32
 800444a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f967 	bl	8004724 <SPI_EndRxTxTransaction>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0203 	bic.w	r2, r2, #3
 8004476:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fc facd 	bl	8000a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800449a:	e002      	b.n	80044a2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fc faa9 	bl	80009f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7ff ff46 	bl	8004348 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ff42 	bl	800435c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0203 	bic.w	r2, r2, #3
 80044fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7fc fa8e 	bl	8000a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7fc fa7a 	bl	8000a34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004558:	f7fd fc18 	bl	8001d8c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004568:	f7fd fc10 	bl	8001d8c <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	015b      	lsls	r3, r3, #5
 8004574:	0d1b      	lsrs	r3, r3, #20
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457e:	e054      	b.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d050      	beq.n	800462a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004588:	f7fd fc00 	bl	8001d8c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	429a      	cmp	r2, r3
 8004596:	d902      	bls.n	800459e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d13d      	bne.n	800461a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b6:	d111      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c0:	d004      	beq.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d107      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e4:	d10f      	bne.n	8004606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e017      	b.n	800464a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3b01      	subs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4013      	ands	r3, r2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	429a      	cmp	r2, r3
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	461a      	mov	r2, r3
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	429a      	cmp	r2, r3
 8004646:	d19b      	bne.n	8004580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000004 	.word	0x20000004

08004658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af02      	add	r7, sp, #8
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800466c:	d111      	bne.n	8004692 <SPI_EndRxTransaction+0x3a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004676:	d004      	beq.n	8004682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d107      	bne.n	8004692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469a:	d12a      	bne.n	80046f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d012      	beq.n	80046cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff ff49 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02d      	beq.n	8004718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e026      	b.n	800471a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff ff36 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01a      	beq.n	8004718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e013      	b.n	800471a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2200      	movs	r2, #0
 80046fa:	2101      	movs	r1, #1
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff ff23 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e000      	b.n	800471a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <SPI_EndRxTxTransaction+0x7c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1b      	ldr	r2, [pc, #108]	; (80047a4 <SPI_EndRxTxTransaction+0x80>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	0d5b      	lsrs	r3, r3, #21
 800473c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d112      	bne.n	8004776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fef4 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e00f      	b.n	8004796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d0f2      	beq.n	8004776 <SPI_EndRxTxTransaction+0x52>
 8004790:	e000      	b.n	8004794 <SPI_EndRxTxTransaction+0x70>
        break;
 8004792:	bf00      	nop
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000004 	.word	0x20000004
 80047a4:	165e9f81 	.word	0x165e9f81

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e041      	b.n	800483e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc ff7e 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 f9fe 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e041      	b.n	80048dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fc ff51 	bl	8001714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f000 f9af 	bl	8004be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e0ac      	b.n	8004a58 <HAL_TIM_PWM_ConfigChannel+0x174>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	f200 809f 	bhi.w	8004a4c <HAL_TIM_PWM_ConfigChannel+0x168>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004949 	.word	0x08004949
 8004918:	08004a4d 	.word	0x08004a4d
 800491c:	08004a4d 	.word	0x08004a4d
 8004920:	08004a4d 	.word	0x08004a4d
 8004924:	08004989 	.word	0x08004989
 8004928:	08004a4d 	.word	0x08004a4d
 800492c:	08004a4d 	.word	0x08004a4d
 8004930:	08004a4d 	.word	0x08004a4d
 8004934:	080049cb 	.word	0x080049cb
 8004938:	08004a4d 	.word	0x08004a4d
 800493c:	08004a4d 	.word	0x08004a4d
 8004940:	08004a4d 	.word	0x08004a4d
 8004944:	08004a0b 	.word	0x08004a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f9ca 	bl	8004ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	619a      	str	r2, [r3, #24]
      break;
 8004986:	e062      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa10 	bl	8004db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]
      break;
 80049c8:	e041      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa5b 	bl	8004e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0208 	orr.w	r2, r2, #8
 80049e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	61da      	str	r2, [r3, #28]
      break;
 8004a08:	e021      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 faa5 	bl	8004f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	61da      	str	r2, [r3, #28]
      break;
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004a4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_TIM_ConfigClockSource+0x18>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e0b3      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x180>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab0:	d03e      	beq.n	8004b30 <HAL_TIM_ConfigClockSource+0xd0>
 8004ab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab6:	f200 8087 	bhi.w	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	f000 8085 	beq.w	8004bcc <HAL_TIM_ConfigClockSource+0x16c>
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d87f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ac8:	2b70      	cmp	r3, #112	; 0x70
 8004aca:	d01a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xa2>
 8004acc:	2b70      	cmp	r3, #112	; 0x70
 8004ace:	d87b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad0:	2b60      	cmp	r3, #96	; 0x60
 8004ad2:	d050      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0x116>
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d877      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ad8:	2b50      	cmp	r3, #80	; 0x50
 8004ada:	d03c      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0xf6>
 8004adc:	2b50      	cmp	r3, #80	; 0x50
 8004ade:	d873      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d058      	beq.n	8004b96 <HAL_TIM_ConfigClockSource+0x136>
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	d86f      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d064      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d86b      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d060      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d867      	bhi.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05c      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d05a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b00:	e062      	b.n	8004bc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f000 faef 	bl	80050f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	609a      	str	r2, [r3, #8]
      break;
 8004b2e:	e04e      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6899      	ldr	r1, [r3, #8]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f000 fad8 	bl	80050f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b52:	609a      	str	r2, [r3, #8]
      break;
 8004b54:	e03b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f000 fa4c 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2150      	movs	r1, #80	; 0x50
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 faa5 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004b74:	e02b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f000 fa6b 	bl	800505e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2160      	movs	r1, #96	; 0x60
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa95 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004b94:	e01b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6859      	ldr	r1, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f000 fa2c 	bl	8005000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2140      	movs	r1, #64	; 0x40
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fa85 	bl	80050be <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 fa7c 	bl	80050be <TIM_ITRx_SetConfig>
        break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004bcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <TIM_Base_SetConfig+0xe4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <TIM_Base_SetConfig+0x38>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c06:	d00b      	beq.n	8004c20 <TIM_Base_SetConfig+0x38>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a31      	ldr	r2, [pc, #196]	; (8004cd0 <TIM_Base_SetConfig+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_Base_SetConfig+0x38>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a30      	ldr	r2, [pc, #192]	; (8004cd4 <TIM_Base_SetConfig+0xec>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_Base_SetConfig+0x38>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <TIM_Base_SetConfig+0xf0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d108      	bne.n	8004c32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <TIM_Base_SetConfig+0xe4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d01b      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d017      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <TIM_Base_SetConfig+0xe8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <TIM_Base_SetConfig+0xec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00f      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <TIM_Base_SetConfig+0xf0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <TIM_Base_SetConfig+0xf4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <TIM_Base_SetConfig+0xf8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_Base_SetConfig+0x8a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <TIM_Base_SetConfig+0xfc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d108      	bne.n	8004c84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <TIM_Base_SetConfig+0xe4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d103      	bne.n	8004cb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40010000 	.word	0x40010000
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800

08004ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0201 	bic.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1c      	ldr	r2, [pc, #112]	; (8004db0 <TIM_OC1_SetConfig+0xc8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10c      	bne.n	8004d5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0308 	bic.w	r3, r3, #8
 8004d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <TIM_OC1_SetConfig+0xc8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d111      	bne.n	8004d8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	621a      	str	r2, [r3, #32]
}
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40010000 	.word	0x40010000

08004db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f023 0210 	bic.w	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	021b      	lsls	r3, r3, #8
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f023 0320 	bic.w	r3, r3, #32
 8004dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <TIM_OC2_SetConfig+0xd4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d10d      	bne.n	8004e30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <TIM_OC2_SetConfig+0xd4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d113      	bne.n	8004e60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	621a      	str	r2, [r3, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000

08004e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <TIM_OC3_SetConfig+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10d      	bne.n	8004f06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <TIM_OC3_SetConfig+0xd0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d113      	bne.n	8004f36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	621a      	str	r2, [r3, #32]
}
 8004f50:	bf00      	nop
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40010000 	.word	0x40010000

08004f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a10      	ldr	r2, [pc, #64]	; (8004ffc <TIM_OC4_SetConfig+0x9c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000

08005000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 030a 	bic.w	r3, r3, #10
 800503c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800505e:	b480      	push	{r7}
 8005060:	b087      	sub	sp, #28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0210 	bic.w	r2, r3, #16
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	f043 0307 	orr.w	r3, r3, #7
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800510e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	431a      	orrs	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4313      	orrs	r3, r2
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e050      	b.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005198:	d013      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a16      	ldr	r2, [pc, #88]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10c      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40014000 	.word	0x40014000

08005210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005228:	2302      	movs	r3, #2
 800522a:	e03d      	b.n	80052a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e03f      	b.n	8005346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fc7e 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	; 0x24
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f829 	bl	8005350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800530c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800531c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800532c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	b09f      	sub	sp, #124	; 0x7c
 8005356:	af00      	add	r7, sp, #0
 8005358:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800535a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005366:	68d9      	ldr	r1, [r3, #12]
 8005368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	ea40 0301 	orr.w	r3, r0, r1
 8005370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	431a      	orrs	r2, r3
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	431a      	orrs	r2, r3
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4313      	orrs	r3, r2
 8005388:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005394:	f021 010c 	bic.w	r1, r1, #12
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800539e:	430b      	orrs	r3, r1
 80053a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	6999      	ldr	r1, [r3, #24]
 80053b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	ea40 0301 	orr.w	r3, r0, r1
 80053b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4bc5      	ldr	r3, [pc, #788]	; (80056d4 <UART_SetConfig+0x384>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d004      	beq.n	80053ce <UART_SetConfig+0x7e>
 80053c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4bc3      	ldr	r3, [pc, #780]	; (80056d8 <UART_SetConfig+0x388>)
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d103      	bne.n	80053d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053ce:	f7fe fd11 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 80053d2:	6778      	str	r0, [r7, #116]	; 0x74
 80053d4:	e002      	b.n	80053dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d6:	f7fe fcf9 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 80053da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e4:	f040 80b6 	bne.w	8005554 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ea:	461c      	mov	r4, r3
 80053ec:	f04f 0500 	mov.w	r5, #0
 80053f0:	4622      	mov	r2, r4
 80053f2:	462b      	mov	r3, r5
 80053f4:	1891      	adds	r1, r2, r2
 80053f6:	6439      	str	r1, [r7, #64]	; 0x40
 80053f8:	415b      	adcs	r3, r3
 80053fa:	647b      	str	r3, [r7, #68]	; 0x44
 80053fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005400:	1912      	adds	r2, r2, r4
 8005402:	eb45 0303 	adc.w	r3, r5, r3
 8005406:	f04f 0000 	mov.w	r0, #0
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	00d9      	lsls	r1, r3, #3
 8005410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005414:	00d0      	lsls	r0, r2, #3
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	1911      	adds	r1, r2, r4
 800541c:	6639      	str	r1, [r7, #96]	; 0x60
 800541e:	416b      	adcs	r3, r5
 8005420:	667b      	str	r3, [r7, #100]	; 0x64
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	1891      	adds	r1, r2, r2
 800542e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005430:	415b      	adcs	r3, r3
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005438:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800543c:	f7fa feca 	bl	80001d4 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4ba5      	ldr	r3, [pc, #660]	; (80056dc <UART_SetConfig+0x38c>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011e      	lsls	r6, r3, #4
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	461c      	mov	r4, r3
 8005452:	f04f 0500 	mov.w	r5, #0
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	1891      	adds	r1, r2, r2
 800545c:	6339      	str	r1, [r7, #48]	; 0x30
 800545e:	415b      	adcs	r3, r3
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
 8005462:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005466:	1912      	adds	r2, r2, r4
 8005468:	eb45 0303 	adc.w	r3, r5, r3
 800546c:	f04f 0000 	mov.w	r0, #0
 8005470:	f04f 0100 	mov.w	r1, #0
 8005474:	00d9      	lsls	r1, r3, #3
 8005476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547a:	00d0      	lsls	r0, r2, #3
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	1911      	adds	r1, r2, r4
 8005482:	65b9      	str	r1, [r7, #88]	; 0x58
 8005484:	416b      	adcs	r3, r5
 8005486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	461a      	mov	r2, r3
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	1891      	adds	r1, r2, r2
 8005494:	62b9      	str	r1, [r7, #40]	; 0x28
 8005496:	415b      	adcs	r3, r3
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800549e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054a2:	f7fa fe97 	bl	80001d4 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <UART_SetConfig+0x38c>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	; 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	3332      	adds	r3, #50	; 0x32
 80054be:	4a87      	ldr	r2, [pc, #540]	; (80056dc <UART_SetConfig+0x38c>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054cc:	441e      	add	r6, r3
 80054ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d0:	4618      	mov	r0, r3
 80054d2:	f04f 0100 	mov.w	r1, #0
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	1894      	adds	r4, r2, r2
 80054dc:	623c      	str	r4, [r7, #32]
 80054de:	415b      	adcs	r3, r3
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054e6:	1812      	adds	r2, r2, r0
 80054e8:	eb41 0303 	adc.w	r3, r1, r3
 80054ec:	f04f 0400 	mov.w	r4, #0
 80054f0:	f04f 0500 	mov.w	r5, #0
 80054f4:	00dd      	lsls	r5, r3, #3
 80054f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054fa:	00d4      	lsls	r4, r2, #3
 80054fc:	4622      	mov	r2, r4
 80054fe:	462b      	mov	r3, r5
 8005500:	1814      	adds	r4, r2, r0
 8005502:	653c      	str	r4, [r7, #80]	; 0x50
 8005504:	414b      	adcs	r3, r1
 8005506:	657b      	str	r3, [r7, #84]	; 0x54
 8005508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	461a      	mov	r2, r3
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	1891      	adds	r1, r2, r2
 8005514:	61b9      	str	r1, [r7, #24]
 8005516:	415b      	adcs	r3, r3
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800551e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005522:	f7fa fe57 	bl	80001d4 <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <UART_SetConfig+0x38c>)
 800552c:	fba3 1302 	umull	r1, r3, r3, r2
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	2164      	movs	r1, #100	; 0x64
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3332      	adds	r3, #50	; 0x32
 800553e:	4a67      	ldr	r2, [pc, #412]	; (80056dc <UART_SetConfig+0x38c>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	f003 0207 	and.w	r2, r3, #7
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4432      	add	r2, r6
 8005550:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005552:	e0b9      	b.n	80056c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005556:	461c      	mov	r4, r3
 8005558:	f04f 0500 	mov.w	r5, #0
 800555c:	4622      	mov	r2, r4
 800555e:	462b      	mov	r3, r5
 8005560:	1891      	adds	r1, r2, r2
 8005562:	6139      	str	r1, [r7, #16]
 8005564:	415b      	adcs	r3, r3
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800556c:	1912      	adds	r2, r2, r4
 800556e:	eb45 0303 	adc.w	r3, r5, r3
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	00d9      	lsls	r1, r3, #3
 800557c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005580:	00d0      	lsls	r0, r2, #3
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	eb12 0804 	adds.w	r8, r2, r4
 800558a:	eb43 0905 	adc.w	r9, r3, r5
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4618      	mov	r0, r3
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	008b      	lsls	r3, r1, #2
 80055a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055a6:	0082      	lsls	r2, r0, #2
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fa fe12 	bl	80001d4 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4b49      	ldr	r3, [pc, #292]	; (80056dc <UART_SetConfig+0x38c>)
 80055b6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	011e      	lsls	r6, r3, #4
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	4618      	mov	r0, r3
 80055c2:	f04f 0100 	mov.w	r1, #0
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	1894      	adds	r4, r2, r2
 80055cc:	60bc      	str	r4, [r7, #8]
 80055ce:	415b      	adcs	r3, r3
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055d6:	1812      	adds	r2, r2, r0
 80055d8:	eb41 0303 	adc.w	r3, r1, r3
 80055dc:	f04f 0400 	mov.w	r4, #0
 80055e0:	f04f 0500 	mov.w	r5, #0
 80055e4:	00dd      	lsls	r5, r3, #3
 80055e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055ea:	00d4      	lsls	r4, r2, #3
 80055ec:	4622      	mov	r2, r4
 80055ee:	462b      	mov	r3, r5
 80055f0:	1814      	adds	r4, r2, r0
 80055f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80055f4:	414b      	adcs	r3, r1
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f04f 0100 	mov.w	r1, #0
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	008b      	lsls	r3, r1, #2
 800560c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005610:	0082      	lsls	r2, r0, #2
 8005612:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005616:	f7fa fddd 	bl	80001d4 <__aeabi_uldivmod>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4b2f      	ldr	r3, [pc, #188]	; (80056dc <UART_SetConfig+0x38c>)
 8005620:	fba3 1302 	umull	r1, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	3332      	adds	r3, #50	; 0x32
 8005632:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <UART_SetConfig+0x38c>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800563e:	441e      	add	r6, r3
 8005640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005642:	4618      	mov	r0, r3
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	1894      	adds	r4, r2, r2
 800564e:	603c      	str	r4, [r7, #0]
 8005650:	415b      	adcs	r3, r3
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005658:	1812      	adds	r2, r2, r0
 800565a:	eb41 0303 	adc.w	r3, r1, r3
 800565e:	f04f 0400 	mov.w	r4, #0
 8005662:	f04f 0500 	mov.w	r5, #0
 8005666:	00dd      	lsls	r5, r3, #3
 8005668:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800566c:	00d4      	lsls	r4, r2, #3
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	eb12 0a00 	adds.w	sl, r2, r0
 8005676:	eb43 0b01 	adc.w	fp, r3, r1
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	008b      	lsls	r3, r1, #2
 800568e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005692:	0082      	lsls	r2, r0, #2
 8005694:	4650      	mov	r0, sl
 8005696:	4659      	mov	r1, fp
 8005698:	f7fa fd9c 	bl	80001d4 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <UART_SetConfig+0x38c>)
 80056a2:	fba3 1302 	umull	r1, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2164      	movs	r1, #100	; 0x64
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	3332      	adds	r3, #50	; 0x32
 80056b4:	4a09      	ldr	r2, [pc, #36]	; (80056dc <UART_SetConfig+0x38c>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4432      	add	r2, r6
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	377c      	adds	r7, #124	; 0x7c
 80056cc:	46bd      	mov	sp, r7
 80056ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	51eb851f 	.word	0x51eb851f

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	; (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	; (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	; (8005724 <__libc_init_array+0x44>)
 80056f4:	f000 f82e 	bl	8005754 <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08005794 	.word	0x08005794
 800571c:	08005794 	.word	0x08005794
 8005720:	08005794 	.word	0x08005794
 8005724:	08005798 	.word	0x08005798

08005728 <memcpy>:
 8005728:	440a      	add	r2, r1
 800572a:	4291      	cmp	r1, r2
 800572c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005730:	d100      	bne.n	8005734 <memcpy+0xc>
 8005732:	4770      	bx	lr
 8005734:	b510      	push	{r4, lr}
 8005736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800573e:	4291      	cmp	r1, r2
 8005740:	d1f9      	bne.n	8005736 <memcpy+0xe>
 8005742:	bd10      	pop	{r4, pc}

08005744 <memset>:
 8005744:	4402      	add	r2, r0
 8005746:	4603      	mov	r3, r0
 8005748:	4293      	cmp	r3, r2
 800574a:	d100      	bne.n	800574e <memset+0xa>
 800574c:	4770      	bx	lr
 800574e:	f803 1b01 	strb.w	r1, [r3], #1
 8005752:	e7f9      	b.n	8005748 <memset+0x4>

08005754 <_init>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	bf00      	nop
 8005758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575a:	bc08      	pop	{r3}
 800575c:	469e      	mov	lr, r3
 800575e:	4770      	bx	lr

08005760 <_fini>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr
