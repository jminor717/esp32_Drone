
STM32_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000001c  08004ff8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004ff8  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e739  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df0  00000000  00000000  0002e785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00030578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162ad  00000000  00000000  000321d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eee2  00000000  00000000  0004847d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e087  00000000  00000000  0005735f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e53e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  000e543c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004f94 	.word	0x08004f94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08004f94 	.word	0x08004f94

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(&hspi2, RX_Buffer, BUFFER_SIZE);
 80004d4:	2210      	movs	r2, #16
 80004d6:	490c      	ldr	r1, [pc, #48]	; (8000508 <HAL_SPI_RxCpltCallback+0x3c>)
 80004d8:	480c      	ldr	r0, [pc, #48]	; (800050c <HAL_SPI_RxCpltCallback+0x40>)
 80004da:	f003 f833 	bl	8003544 <HAL_SPI_Receive_DMA>
	//HAL_SPI_Transmit(&hspi2, Buffer, BUFFER_SIZE);
	HAL_SPI_Transmit(&hspi2, Buffer, BUFFER_SIZE, 100);
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	2210      	movs	r2, #16
 80004e2:	490b      	ldr	r1, [pc, #44]	; (8000510 <HAL_SPI_RxCpltCallback+0x44>)
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <HAL_SPI_RxCpltCallback+0x40>)
 80004e6:	f002 fc3e 	bl	8002d66 <HAL_SPI_Transmit>
	// Will copy 18 characters from RX_Buffer to Buffer
	memcpy( Buffer, RX_Buffer, sizeof(RX_Buffer) );
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <HAL_SPI_RxCpltCallback+0x44>)
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_SPI_RxCpltCallback+0x3c>)
 80004ee:	4614      	mov	r4, r2
 80004f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  //  if(RX_Buffer[1] == aTxBuffer[1])
   // 	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    HAL_UART_Transmit_IT(&huart6, RX_Buffer, BUFFER_SIZE);
 80004f6:	2210      	movs	r2, #16
 80004f8:	4903      	ldr	r1, [pc, #12]	; (8000508 <HAL_SPI_RxCpltCallback+0x3c>)
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <HAL_SPI_RxCpltCallback+0x48>)
 80004fc:	f004 fb11 	bl	8004b22 <HAL_UART_Transmit_IT>
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	20000048 	.word	0x20000048
 800050c:	200000d8 	.word	0x200000d8
 8000510:	20000038 	.word	0x20000038
 8000514:	20000370 	.word	0x20000370

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t itter = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f001 f85d 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f853 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fbe7 	bl	8000cfc <MX_GPIO_Init>
  MX_DMA_Init();
 800052e:	f000 fb97 	bl	8000c60 <MX_DMA_Init>
  MX_SPI1_Init();
 8000532:	f000 f8ad 	bl	8000690 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000536:	f000 f8e3 	bl	8000700 <MX_SPI2_Init>
  MX_USART6_UART_Init();
 800053a:	f000 fb67 	bl	8000c0c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800053e:	f000 f913 	bl	8000768 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000542:	f000 fa21 	bl	8000988 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000546:	f000 fa83 	bl	8000a50 <MX_TIM4_Init>
  MX_TIM5_Init();
 800054a:	f000 fafb 	bl	8000b44 <MX_TIM5_Init>
  MX_TIM2_Init();
 800054e:	f000 f9b7 	bl	80008c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi2, RX_Buffer, BUFFER_SIZE);
 8000552:	2210      	movs	r2, #16
 8000554:	4917      	ldr	r1, [pc, #92]	; (80005b4 <main+0x9c>)
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0xa0>)
 8000558:	f002 fff4 	bl	8003544 <HAL_SPI_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  itter++;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3301      	adds	r3, #1
 8000560:	71fb      	strb	r3, [r7, #7]
	  aTxBuffer[0] = itter;
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <main+0xa4>)
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	7013      	strb	r3, [r2, #0]
	  HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	; 0x64
 800056a:	f001 f8ab 	bl	80016c4 <HAL_Delay>
	  HAL_SPI_TransmitReceive(&hspi1, aTxBuffer,RX_Buffer3, BUFFER_SIZE, 100);
 800056e:	2364      	movs	r3, #100	; 0x64
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2310      	movs	r3, #16
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <main+0xa8>)
 8000576:	4911      	ldr	r1, [pc, #68]	; (80005bc <main+0xa4>)
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <main+0xac>)
 800057a:	f002 fe41 	bl	8003200 <HAL_SPI_TransmitReceive>
	    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800057e:	bf00      	nop
 8000580:	4810      	ldr	r0, [pc, #64]	; (80005c4 <main+0xac>)
 8000582:	f003 fad1 	bl	8003b28 <HAL_SPI_GetState>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1f9      	bne.n	8000580 <main+0x68>
	    {}
	  HAL_SPI_Receive(&hspi1,RX_Buffer2, BUFFER_SIZE, 100);
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	2210      	movs	r2, #16
 8000590:	490d      	ldr	r1, [pc, #52]	; (80005c8 <main+0xb0>)
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0xac>)
 8000594:	f002 fd23 	bl	8002fde <HAL_SPI_Receive>
	  if(RX_Buffer2[1] - 1 == aTxBuffer[1])
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <main+0xb0>)
 800059a:	785b      	ldrb	r3, [r3, #1]
 800059c:	3b01      	subs	r3, #1
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <main+0xa4>)
 80005a0:	7852      	ldrb	r2, [r2, #1]
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d1da      	bne.n	800055c <main+0x44>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4808      	ldr	r0, [pc, #32]	; (80005cc <main+0xb4>)
 80005ac:	f001 feef 	bl	800238e <HAL_GPIO_TogglePin>
	  itter++;
 80005b0:	e7d4      	b.n	800055c <main+0x44>
 80005b2:	bf00      	nop
 80005b4:	20000048 	.word	0x20000048
 80005b8:	200000d8 	.word	0x200000d8
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000068 	.word	0x20000068
 80005c4:	200003b4 	.word	0x200003b4
 80005c8:	20000058 	.word	0x20000058
 80005cc:	40020800 	.word	0x40020800

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fcd0 	bl	8004f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <SystemClock_Config+0xb8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <SystemClock_Config+0xb8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <SystemClock_Config+0xb8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <SystemClock_Config+0xbc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <SystemClock_Config+0xbc>)
 800061e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <SystemClock_Config+0xbc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 febd 	bl	80023c4 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000650:	f000 fbca 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f920 	bl	80028b4 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067a:	f000 fbb5 	bl	8000de8 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <MX_SPI1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x68>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006c6:	2218      	movs	r2, #24
 80006c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006de:	220a      	movs	r2, #10
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_SPI1_Init+0x68>)
 80006e4:	f002 fab6 	bl	8002c54 <HAL_SPI_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006ee:	f000 fb7b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200003b4 	.word	0x200003b4
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x60>)
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_SPI2_Init+0x64>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_SPI2_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_SPI2_Init+0x60>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x60>)
 8000718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800071c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_SPI2_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_SPI2_Init+0x60>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_SPI2_Init+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_SPI2_Init+0x60>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x60>)
 8000746:	220a      	movs	r2, #10
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_SPI2_Init+0x60>)
 800074c:	f002 fa82 	bl	8002c54 <HAL_SPI_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8000756:	f000 fb47 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8
 8000764:	40003800 	.word	0x40003800

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fbef 	bl	8004f84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007a8:	4a44      	ldr	r2, [pc, #272]	; (80008bc <MX_TIM1_Init+0x154>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007b8:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d2:	4839      	ldr	r0, [pc, #228]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007d4:	f003 fbd2 	bl	8003f7c <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007de:	f000 fb03 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ec:	4619      	mov	r1, r3
 80007ee:	4832      	ldr	r0, [pc, #200]	; (80008b8 <MX_TIM1_Init+0x150>)
 80007f0:	f003 fd20 	bl	8004234 <HAL_TIM_ConfigClockSource>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007fa:	f000 faf5 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fe:	482e      	ldr	r0, [pc, #184]	; (80008b8 <MX_TIM1_Init+0x150>)
 8000800:	f003 fc0b 	bl	800401a <HAL_TIM_PWM_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800080a:	f000 faed 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081a:	4619      	mov	r1, r3
 800081c:	4826      	ldr	r0, [pc, #152]	; (80008b8 <MX_TIM1_Init+0x150>)
 800081e:	f004 f873 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000828:	f000 fade 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <MX_TIM1_Init+0x150>)
 8000852:	f003 fc31 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800085c:	f000 fac4 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_TIM1_Init+0x150>)
 800086a:	f003 fc25 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000874:	f000 fab8 	bl	8000de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM1_Init+0x150>)
 800089c:	f004 f8a2 	bl	80049e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008a6:	f000 fa9f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008aa:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM1_Init+0x150>)
 80008ac:	f000 fcd4 	bl	8001258 <HAL_TIM_MspPostInit>

}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	; 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000328 	.word	0x20000328
 80008bc:	40010000 	.word	0x40010000

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_TIM2_Init+0xc4>)
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090a:	481e      	ldr	r0, [pc, #120]	; (8000984 <MX_TIM2_Init+0xc4>)
 800090c:	f003 fb85 	bl	800401a <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000916:	f000 fa67 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <MX_TIM2_Init+0xc4>)
 800092a:	f003 ffed 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000934:	f000 fa58 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000950:	f003 fbb2 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800095a:	f000 fa45 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	220c      	movs	r2, #12
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000966:	f003 fba7 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000970:	f000 fa3a 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM2_Init+0xc4>)
 8000976:	f000 fc6f 	bl	8001258 <HAL_TIM_MspPostInit>

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000040c 	.word	0x2000040c

08000988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <MX_TIM3_Init+0xc4>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009d0:	481d      	ldr	r0, [pc, #116]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009d2:	f003 fb22 	bl	800401a <HAL_TIM_PWM_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009dc:	f000 fa04 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4619      	mov	r1, r3
 80009ee:	4816      	ldr	r0, [pc, #88]	; (8000a48 <MX_TIM3_Init+0xc0>)
 80009f0:	f003 ff8a 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80009fa:	f000 f9f5 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2208      	movs	r2, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM3_Init+0xc0>)
 8000a16:	f003 fb4f 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a20:	f000 f9e2 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	220c      	movs	r2, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM3_Init+0xc0>)
 8000a2c:	f003 fb44 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a36:	f000 f9d7 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM3_Init+0xc0>)
 8000a3c:	f000 fc0c 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000280 	.word	0x20000280
 8000a4c:	40000400 	.word	0x40000400

08000a50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a74:	4a32      	ldr	r2, [pc, #200]	; (8000b40 <MX_TIM4_Init+0xf0>)
 8000a76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a98:	4828      	ldr	r0, [pc, #160]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000a9a:	f003 fabe 	bl	800401a <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 f9a0 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4821      	ldr	r0, [pc, #132]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000ab8:	f003 ff26 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ac2:	f000 f991 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	; 0x60
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000ade:	f003 faeb 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ae8:	f000 f97e 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2204      	movs	r2, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000af4:	f003 fae0 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000afe:	f000 f973 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2208      	movs	r2, #8
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000b0a:	f003 fad5 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000b14:	f000 f968 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000b20:	f003 faca 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000b2a:	f000 f95d 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <MX_TIM4_Init+0xec>)
 8000b30:	f000 fb92 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000130 	.word	0x20000130
 8000b40:	40000800 	.word	0x40000800

08000b44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <MX_TIM5_Init+0xc4>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b8c:	481d      	ldr	r0, [pc, #116]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000b8e:	f003 fa44 	bl	800401a <HAL_TIM_PWM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f926 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000bac:	f003 feac 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000bb6:	f000 f917 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2204      	movs	r2, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000bd2:	f003 fa71 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000bdc:	f000 f904 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2208      	movs	r2, #8
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000be8:	f003 fa66 	bl	80040b8 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000bf2:	f000 f8f9 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM5_Init+0xc0>)
 8000bf8:	f000 fb2e 	bl	8001258 <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	; 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000238 	.word	0x20000238
 8000c08:	40000c00 	.word	0x40000c00

08000c0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_USART6_UART_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_USART6_UART_Init+0x4c>)
 8000c44:	f003 ff20 	bl	8004a88 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 f8cb 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000370 	.word	0x20000370
 8000c5c:	40011400 	.word	0x40011400

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_DMA_Init+0x98>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	200b      	movs	r0, #11
 8000ca4:	f000 fe0d 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f000 fe26 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	200e      	movs	r0, #14
 8000cb4:	f000 fe05 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cb8:	200e      	movs	r0, #14
 8000cba:	f000 fe1e 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	202f      	movs	r0, #47	; 0x2f
 8000cc4:	f000 fdfd 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cc8:	202f      	movs	r0, #47	; 0x2f
 8000cca:	f000 fe16 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2039      	movs	r0, #57	; 0x39
 8000cd4:	f000 fdf5 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cd8:	2039      	movs	r0, #57	; 0x39
 8000cda:	f000 fe0e 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	203a      	movs	r0, #58	; 0x3a
 8000ce4:	f000 fded 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ce8:	203a      	movs	r0, #58	; 0x3a
 8000cea:	f000 fe06 	bl	80018fa <HAL_NVIC_EnableIRQ>

}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_GPIO_Init+0xe0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d88:	4815      	ldr	r0, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xe4>)
 8000d8a:	f001 fae7 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1CS_GPIO_Port, M1CS_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2110      	movs	r1, #16
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <MX_GPIO_Init+0xe8>)
 8000d94:	f001 fae2 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <MX_GPIO_Init+0xe4>)
 8000db2:	f001 f94f 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1CS_Pin */
  GPIO_InitStruct.Pin = M1CS_Pin;
 8000db6:	2310      	movs	r3, #16
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M1CS_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_GPIO_Init+0xe8>)
 8000dce:	f001 f941 	bl	8002054 <HAL_GPIO_Init>

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020000 	.word	0x40020000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a4e      	ldr	r2, [pc, #312]	; (8000f9c <HAL_SPI_MspInit+0x158>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a45      	ldr	r2, [pc, #276]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_MASTER_Pin|SPI1_MISO_MASTER_Pin|SPI1_MOSI_MASTER_Pin;
 8000e9e:	23e0      	movs	r3, #224	; 0xe0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eae:	2305      	movs	r3, #5
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	483a      	ldr	r0, [pc, #232]	; (8000fa4 <HAL_SPI_MspInit+0x160>)
 8000eba:	f001 f8cb 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ebe:	e069      	b.n	8000f94 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a38      	ldr	r2, [pc, #224]	; (8000fa8 <HAL_SPI_MspInit+0x164>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d164      	bne.n	8000f94 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <HAL_SPI_MspInit+0x15c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_SLAVE_Pin|SPI2_MISO_SLAVE_Pin|SPI2_MOSI_SLAVE_Pin;
 8000f02:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f14:	2305      	movs	r3, #5
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4823      	ldr	r0, [pc, #140]	; (8000fac <HAL_SPI_MspInit+0x168>)
 8000f20:	f001 f898 	bl	8002054 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f26:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_SPI_MspInit+0x170>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f6a:	f000 fce1 	bl	8001930 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_SPI_MspInit+0x134>
      Error_Handler();
 8000f74:	f7ff ff38 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_SPI_MspInit+0x16c>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2024      	movs	r0, #36	; 0x24
 8000f8a:	f000 fc9a 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f8e:	2024      	movs	r0, #36	; 0x24
 8000f90:	f000 fcb3 	bl	80018fa <HAL_NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3730      	adds	r7, #48	; 0x30
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40013000 	.word	0x40013000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	40003800 	.word	0x40003800
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	20000178 	.word	0x20000178
 8000fb4:	40026058 	.word	0x40026058

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a3a      	ldr	r2, [pc, #232]	; (80010b0 <HAL_TIM_Base_MspInit+0xf8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d16d      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0xee>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_TIM_Base_MspInit+0xfc>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <HAL_TIM_Base_MspInit+0xfc>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b36      	ldr	r3, [pc, #216]	; (80010b4 <HAL_TIM_Base_MspInit+0xfc>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8000fe8:	4a34      	ldr	r2, [pc, #208]	; (80010bc <HAL_TIM_Base_MspInit+0x104>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8000fee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8001002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001006:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 800100a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800102a:	4823      	ldr	r0, [pc, #140]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 800102c:	f000 fc80 	bl	8001930 <HAL_DMA_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001036:	f7ff fed7 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
 8001040:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_TIM_Base_MspInit+0x100>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <HAL_TIM_Base_MspInit+0x10c>)
 800104a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800104e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001052:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001066:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800106a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001076:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800108a:	480d      	ldr	r0, [pc, #52]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800108c:	f000 fc50 	bl	8001930 <HAL_DMA_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_TIM_Base_MspInit+0xe2>
    {
      Error_Handler();
 8001096:	f7ff fea7 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_TIM_Base_MspInit+0x108>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	20000078 	.word	0x20000078
 80010bc:	40026428 	.word	0x40026428
 80010c0:	200001d8 	.word	0x200001d8
 80010c4:	40026440 	.word	0x40026440

080010c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d8:	d10e      	bne.n	80010f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a55      	ldr	r2, [pc, #340]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b53      	ldr	r3, [pc, #332]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010f6:	e09a      	b.n	800122e <HAL_TIM_PWM_MspInit+0x166>
  else if(htim_pwm->Instance==TIM3)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	; (800123c <HAL_TIM_PWM_MspInit+0x174>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10e      	bne.n	8001120 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a4b      	ldr	r2, [pc, #300]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
}
 800111e:	e086      	b.n	800122e <HAL_TIM_PWM_MspInit+0x166>
  else if(htim_pwm->Instance==TIM4)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_TIM_PWM_MspInit+0x178>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d16e      	bne.n	8001208 <HAL_TIM_PWM_MspInit+0x140>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a41      	ldr	r2, [pc, #260]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001148:	4a3f      	ldr	r2, [pc, #252]	; (8001248 <HAL_TIM_PWM_MspInit+0x180>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800114e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001152:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001154:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001166:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001168:	4b36      	ldr	r3, [pc, #216]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800116a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800116e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001176:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800118a:	482e      	ldr	r0, [pc, #184]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800118c:	f000 fbd0 	bl	8001930 <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_TIM_PWM_MspInit+0xd2>
      Error_Handler();
 8001196:	f7ff fe27 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <HAL_TIM_PWM_MspInit+0x17c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011a8:	4a29      	ldr	r2, [pc, #164]	; (8001250 <HAL_TIM_PWM_MspInit+0x188>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011b2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ba:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c8:	4b20      	ldr	r3, [pc, #128]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80011ea:	4818      	ldr	r0, [pc, #96]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011ec:	f000 fba0 	bl	8001930 <HAL_DMA_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_TIM_PWM_MspInit+0x132>
      Error_Handler();
 80011f6:	f7ff fdf7 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <HAL_TIM_PWM_MspInit+0x184>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001206:	e012      	b.n	800122e <HAL_TIM_PWM_MspInit+0x166>
  else if(htim_pwm->Instance==TIM5)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a11      	ldr	r2, [pc, #68]	; (8001254 <HAL_TIM_PWM_MspInit+0x18c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10d      	bne.n	800122e <HAL_TIM_PWM_MspInit+0x166>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_TIM_PWM_MspInit+0x170>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40000400 	.word	0x40000400
 8001240:	40000800 	.word	0x40000800
 8001244:	20000454 	.word	0x20000454
 8001248:	40026010 	.word	0x40026010
 800124c:	200002c8 	.word	0x200002c8
 8001250:	400260b8 	.word	0x400260b8
 8001254:	40000c00 	.word	0x40000c00

08001258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a5b      	ldr	r2, [pc, #364]	; (80013e4 <HAL_TIM_MspPostInit+0x18c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11f      	bne.n	80012ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a59      	ldr	r2, [pc, #356]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b57      	ldr	r3, [pc, #348]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Dshot4_Pin|Dshot3_Pin;
 8001296:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	484e      	ldr	r0, [pc, #312]	; (80013ec <HAL_TIM_MspPostInit+0x194>)
 80012b4:	f000 fece 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80012b8:	e08f      	b.n	80013da <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c2:	d11e      	bne.n	8001302 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2P_Pin|M2N_Pin;
 80012e0:	2309      	movs	r3, #9
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	483c      	ldr	r0, [pc, #240]	; (80013ec <HAL_TIM_MspPostInit+0x194>)
 80012fc:	f000 feaa 	bl	8002054 <HAL_GPIO_Init>
}
 8001300:	e06b      	b.n	80013da <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a3a      	ldr	r2, [pc, #232]	; (80013f0 <HAL_TIM_MspPostInit+0x198>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d11e      	bne.n	800134a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3P_Pin|M3N_Pin;
 8001328:	2303      	movs	r3, #3
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001338:	2302      	movs	r3, #2
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	482c      	ldr	r0, [pc, #176]	; (80013f4 <HAL_TIM_MspPostInit+0x19c>)
 8001344:	f000 fe86 	bl	8002054 <HAL_GPIO_Init>
}
 8001348:	e047      	b.n	80013da <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <HAL_TIM_MspPostInit+0x1a0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d11f      	bne.n	8001394 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 800135e:	f043 0302 	orr.w	r3, r3, #2
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Dshot2_Pin|M4N_Pin|Dshot1_Pin|M4P_Pin;
 8001370:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001382:	2302      	movs	r3, #2
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	4619      	mov	r1, r3
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <HAL_TIM_MspPostInit+0x19c>)
 800138e:	f000 fe61 	bl	8002054 <HAL_GPIO_Init>
}
 8001392:	e022      	b.n	80013da <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_TIM_MspPostInit+0x1a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d11d      	bne.n	80013da <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_TIM_MspPostInit+0x190>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1P_Pin|M1N_Pin;
 80013ba:	2306      	movs	r3, #6
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_TIM_MspPostInit+0x194>)
 80013d6:	f000 fe3d 	bl	8002054 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40000800 	.word	0x40000800
 80013fc:	40000c00 	.word	0x40000c00

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <HAL_UART_MspInit+0x84>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d12c      	bne.n	800147c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_UART_MspInit+0x88>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_UART_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800145a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800146c:	2308      	movs	r3, #8
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <HAL_UART_MspInit+0x8c>)
 8001478:	f000 fdec 	bl	8002054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40011400 	.word	0x40011400
 8001488:	40023800 	.word	0x40023800
 800148c:	40020000 	.word	0x40020000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f8d2 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ea:	f000 fb49 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000454 	.word	0x20000454

080014f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA1_Stream3_IRQHandler+0x10>)
 80014fe:	f000 fb3f 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
 // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000178 	.word	0x20000178

0800150c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <SPI2_IRQHandler+0x18>)
 8001512:	f002 f9e1 	bl	80038d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <SPI2_IRQHandler+0x1c>)
 800151c:	f000 ff37 	bl	800238e <HAL_GPIO_TogglePin>
  /* USER CODE END SPI2_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200000d8 	.word	0x200000d8
 8001528:	40020800 	.word	0x40020800

0800152c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <DMA1_Stream7_IRQHandler+0x10>)
 8001532:	f000 fb25 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002c8 	.word	0x200002c8

08001540 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA2_Stream1_IRQHandler+0x10>)
 8001546:	f000 fb1b 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000078 	.word	0x20000078

08001554 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA2_Stream2_IRQHandler+0x10>)
 800155a:	f000 fb11 	bl	8001b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001d8 	.word	0x200001d8

08001568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <Reset_Handler>:
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopFillZerobss+0x12>
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <LoopFillZerobss+0x16>)
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <LoopFillZerobss+0x1a>)
 8001594:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1e>)
 8001596:	2300      	movs	r3, #0
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:
 800159a:	58d4      	ldr	r4, [r2, r3]
 800159c:	50c4      	str	r4, [r0, r3]
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:
 80015a0:	18c4      	adds	r4, r0, r3
 80015a2:	428c      	cmp	r4, r1
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopFillZerobss+0x22>)
 80015a8:	4c0b      	ldr	r4, [pc, #44]	; (80015d8 <LoopFillZerobss+0x26>)
 80015aa:	2300      	movs	r3, #0
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:
 80015b2:	42a2      	cmp	r2, r4
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>
 80015b6:	f7ff ffd7 	bl	8001568 <SystemInit>
 80015ba:	f003 fcbf 	bl	8004f3c <__libc_init_array>
 80015be:	f7fe ffab 	bl	8000518 <main>
 80015c2:	4770      	bx	lr
 80015c4:	20010000 	.word	0x20010000
 80015c8:	20000000 	.word	0x20000000
 80015cc:	2000001c 	.word	0x2000001c
 80015d0:	08004fdc 	.word	0x08004fdc
 80015d4:	2000001c 	.word	0x2000001c
 80015d8:	200004b8 	.word	0x200004b8

080015dc <ADC_IRQHandler>:
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_Init+0x40>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <HAL_Init+0x40>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x40>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f94f 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fbee 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023c00 	.word	0x40023c00

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f967 	bl	8001916 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f92f 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000010 	.word	0x20000010
 800167c:	20000018 	.word	0x20000018
 8001680:	20000014 	.word	0x20000014

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000018 	.word	0x20000018
 80016a8:	200004b4 	.word	0x200004b4

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200004b4 	.word	0x200004b4

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000018 	.word	0x20000018

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff29 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff3e 	bl	8001754 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff31 	bl	8001770 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff feb6 	bl	80016ac <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e099      	b.n	8001a80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196c:	e00f      	b.n	800198e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196e:	f7ff fe9d 	bl	80016ac <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b05      	cmp	r3, #5
 800197a:	d908      	bls.n	800198e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2220      	movs	r2, #32
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2203      	movs	r2, #3
 8001986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e078      	b.n	8001a80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e8      	bne.n	800196e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_DMA_Init+0x158>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d107      	bne.n	80019f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4313      	orrs	r3, r2
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f023 0307 	bic.w	r3, r3, #7
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d117      	bne.n	8001a52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00e      	beq.n	8001a52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fa91 	bl	8001f5c <DMA_CheckFifoParam>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e016      	b.n	8001a80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 fa48 	bl	8001ef0 <DMA_CalcBaseAndBitshift>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	223f      	movs	r2, #63	; 0x3f
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	f010803f 	.word	0xf010803f

08001a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_DMA_Start_IT+0x26>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e040      	b.n	8001b34 <HAL_DMA_Start_IT+0xa8>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d12f      	bne.n	8001b26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f9da 	bl	8001e94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	223f      	movs	r2, #63	; 0x3f
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0216 	orr.w	r2, r2, #22
 8001afa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0208 	orr.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e005      	b.n	8001b32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d004      	beq.n	8001b5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00c      	b.n	8001b74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_DMA_IRQHandler+0x258>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a92      	ldr	r2, [pc, #584]	; (8001ddc <HAL_DMA_IRQHandler+0x25c>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	2208      	movs	r2, #8
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01a      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2208      	movs	r2, #8
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	2204      	movs	r2, #4
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2204      	movs	r2, #4
 8001c46:	409a      	lsls	r2, r3
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03c      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d018      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d108      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d024      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
 8001cae:	e01f      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d01b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	e016      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0208 	bic.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 808e 	beq.w	8001e1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8086 	beq.w	8001e1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2220      	movs	r2, #32
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d136      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_IRQHandler+0x1da>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	223f      	movs	r2, #63	; 0x3f
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d07d      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
        }
        return;
 8001d96:	e078      	b.n	8001e8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01c      	beq.n	8001de0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d108      	bne.n	8001dc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d030      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e02b      	b.n	8001e1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	4798      	blx	r3
 8001dd6:	e022      	b.n	8001e1e <HAL_DMA_IRQHandler+0x29e>
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0210 	bic.w	r2, r2, #16
 8001dfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d032      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d022      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2205      	movs	r2, #5
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d307      	bcc.n	8001e66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f2      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x2ca>
 8001e64:	e000      	b.n	8001e68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e000      	b.n	8001e8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e8a:	bf00      	nop
    }
  }
}
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop

08001e94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d108      	bne.n	8001ed4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ed2:	e007      	b.n	8001ee4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	60da      	str	r2, [r3, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3b10      	subs	r3, #16
 8001f00:	4a14      	ldr	r2, [pc, #80]	; (8001f54 <DMA_CalcBaseAndBitshift+0x64>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <DMA_CalcBaseAndBitshift+0x68>)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d909      	bls.n	8001f32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	1d1a      	adds	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f30:	e007      	b.n	8001f42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f3a:	f023 0303 	bic.w	r3, r3, #3
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	aaaaaaab 	.word	0xaaaaaaab
 8001f58:	08004fc4 	.word	0x08004fc4

08001f5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11f      	bne.n	8001fb6 <DMA_CheckFifoParam+0x5a>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d856      	bhi.n	800202a <DMA_CheckFifoParam+0xce>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <DMA_CheckFifoParam+0x28>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001fa7 	.word	0x08001fa7
 8001f8c:	08001f95 	.word	0x08001f95
 8001f90:	0800202b 	.word	0x0800202b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d046      	beq.n	800202e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa4:	e043      	b.n	800202e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fae:	d140      	bne.n	8002032 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e03d      	b.n	8002032 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbe:	d121      	bne.n	8002004 <DMA_CheckFifoParam+0xa8>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d837      	bhi.n	8002036 <DMA_CheckFifoParam+0xda>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <DMA_CheckFifoParam+0x70>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fe3 	.word	0x08001fe3
 8001fd4:	08001fdd 	.word	0x08001fdd
 8001fd8:	08001ff5 	.word	0x08001ff5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe0:	e030      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d025      	beq.n	800203a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff2:	e022      	b.n	800203a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ffc:	d11f      	bne.n	800203e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002002:	e01c      	b.n	800203e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d903      	bls.n	8002012 <DMA_CheckFifoParam+0xb6>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d003      	beq.n	8002018 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002010:	e018      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      break;
 8002016:	e015      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      break;
 8002028:	e00b      	b.n	8002042 <DMA_CheckFifoParam+0xe6>
      break;
 800202a:	bf00      	nop
 800202c:	e00a      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e008      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
 8002034:	e006      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
 8002038:	e004      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 800203a:	bf00      	nop
 800203c:	e002      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;   
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
    }
  } 
  
  return status; 
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e159      	b.n	8002324 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	429a      	cmp	r2, r3
 800208a:	f040 8148 	bne.w	800231e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d130      	bne.n	8002108 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020dc:	2201      	movs	r2, #1
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 0201 	and.w	r2, r3, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b03      	cmp	r3, #3
 8002112:	d017      	beq.n	8002144 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d123      	bne.n	8002198 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	08da      	lsrs	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3208      	adds	r2, #8
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0203 	and.w	r2, r3, #3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a2 	beq.w	800231e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b57      	ldr	r3, [pc, #348]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b54      	ldr	r3, [pc, #336]	; (800233c <HAL_GPIO_Init+0x2e8>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f6:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_GPIO_Init+0x2ec>)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x2f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x202>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a48      	ldr	r2, [pc, #288]	; (8002348 <HAL_GPIO_Init+0x2f4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x1fe>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_GPIO_Init+0x2f8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x1fa>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_GPIO_Init+0x2fc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x1f6>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_GPIO_Init+0x300>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x1f2>
 8002242:	2304      	movs	r3, #4
 8002244:	e008      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002246:	2307      	movs	r3, #7
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224a:	2303      	movs	r3, #3
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x204>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x204>
 8002256:	2300      	movs	r3, #0
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002268:	4935      	ldr	r1, [pc, #212]	; (8002340 <HAL_GPIO_Init+0x2ec>)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_GPIO_Init+0x304>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800229a:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <HAL_GPIO_Init+0x304>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c4:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_GPIO_Init+0x304>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_GPIO_Init+0x304>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3301      	adds	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	f67f aea2 	bls.w	8002070 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800
 8002340:	40013800 	.word	0x40013800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400
 800234c:	40020800 	.word	0x40020800
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40013c00 	.word	0x40013c00

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	400b      	ands	r3, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e264      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d075      	beq.n	80024ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023e2:	4ba3      	ldr	r3, [pc, #652]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d00c      	beq.n	8002408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4ba0      	ldr	r3, [pc, #640]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d112      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b9d      	ldr	r3, [pc, #628]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b99      	ldr	r3, [pc, #612]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05b      	beq.n	80024cc <HAL_RCC_OscConfig+0x108>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d157      	bne.n	80024cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e23f      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x74>
 800242a:	4b91      	ldr	r3, [pc, #580]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a90      	ldr	r2, [pc, #576]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a8a      	ldr	r2, [pc, #552]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b88      	ldr	r3, [pc, #544]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a87      	ldr	r2, [pc, #540]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xb0>
 800245c:	4b84      	ldr	r3, [pc, #528]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a83      	ldr	r2, [pc, #524]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a80      	ldr	r2, [pc, #512]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff f916 	bl	80016ac <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff f912 	bl	80016ac <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e204      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b76      	ldr	r3, [pc, #472]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xc0>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff f902 	bl	80016ac <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff f8fe 	bl	80016ac <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1f0      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0xe8>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d063      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b62      	ldr	r3, [pc, #392]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fe:	4b5c      	ldr	r3, [pc, #368]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e1c4      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002516:	4b56      	ldr	r3, [pc, #344]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4952      	ldr	r1, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	e03a      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002534:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_OscConfig+0x2b0>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7ff f8b7 	bl	80016ac <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff f8b3 	bl	80016ac <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1a5      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4940      	ldr	r1, [pc, #256]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e015      	b.n	80025a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_RCC_OscConfig+0x2b0>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7ff f896 	bl	80016ac <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002584:	f7ff f892 	bl	80016ac <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e184      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d030      	beq.n	8002610 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x2b4>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7ff f876 	bl	80016ac <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c4:	f7ff f872 	bl	80016ac <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e164      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x200>
 80025e2:	e015      	b.n	8002610 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x2b4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff f85f 	bl	80016ac <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff f85b 	bl	80016ac <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e14d      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f0      	bne.n	80025f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a0 	beq.w	800275e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x2b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d121      	bne.n	800269e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCC_OscConfig+0x2b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a07      	ldr	r2, [pc, #28]	; (800267c <HAL_RCC_OscConfig+0x2b8>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7ff f821 	bl	80016ac <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e011      	b.n	8002692 <HAL_RCC_OscConfig+0x2ce>
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	42470000 	.word	0x42470000
 8002678:	42470e80 	.word	0x42470e80
 800267c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002680:	f7ff f814 	bl	80016ac <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e106      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_RCC_OscConfig+0x4e4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	4a80      	ldr	r2, [pc, #512]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6713      	str	r3, [r2, #112]	; 0x70
 80026b2:	e01c      	b.n	80026ee <HAL_RCC_OscConfig+0x32a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026bc:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a7a      	ldr	r2, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	4b78      	ldr	r3, [pc, #480]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	4a77      	ldr	r2, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	; 0x70
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0x32a>
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a74      	ldr	r2, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a71      	ldr	r2, [pc, #452]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe ffd9 	bl	80016ac <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe ffd5 	bl	80016ac <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0c5      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCC_OscConfig+0x33a>
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe ffc3 	bl	80016ac <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe ffbf 	bl	80016ac <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0af      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b56      	ldr	r3, [pc, #344]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a55      	ldr	r2, [pc, #340]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 809b 	beq.w	800289e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d05c      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d141      	bne.n	8002800 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b4c      	ldr	r3, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x4ec>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe ff93 	bl	80016ac <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe ff8f 	bl	80016ac <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e081      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	019b      	lsls	r3, r3, #6
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	3b01      	subs	r3, #1
 80027c2:	041b      	lsls	r3, r3, #16
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
 80027cc:	4937      	ldr	r1, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0x4ec>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff68 	bl	80016ac <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff64 	bl	80016ac <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e056      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x41c>
 80027fe:	e04e      	b.n	800289e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x4ec>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe ff51 	bl	80016ac <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe ff4d 	bl	80016ac <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e03f      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x44a>
 800282c:	e037      	b.n	800289e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e032      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_RCC_OscConfig+0x4e8>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d028      	beq.n	800289a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d121      	bne.n	800289a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d11a      	bne.n	800289a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002870:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002872:	4293      	cmp	r3, r2
 8002874:	d111      	bne.n	800289a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d107      	bne.n	800289a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40007000 	.word	0x40007000
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470060 	.word	0x42470060

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cc      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d044      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e067      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7fe fe82 	bl	80016ac <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7fe fe7e 	bl	80016ac <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20c      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	490a      	ldr	r1, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	5ccb      	ldrb	r3, [r1, r3]
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe fde2 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08004fac 	.word	0x08004fac
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	20000014 	.word	0x20000014

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a86:	2100      	movs	r1, #0
 8002a88:	6079      	str	r1, [r7, #4]
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	60f9      	str	r1, [r7, #12]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a92:	2100      	movs	r1, #0
 8002a94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a96:	4952      	ldr	r1, [pc, #328]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a98:	6889      	ldr	r1, [r1, #8]
 8002a9a:	f001 010c 	and.w	r1, r1, #12
 8002a9e:	2908      	cmp	r1, #8
 8002aa0:	d00d      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x3e>
 8002aa2:	2908      	cmp	r1, #8
 8002aa4:	f200 8094 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x150>
 8002aa8:	2900      	cmp	r1, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x32>
 8002aac:	2904      	cmp	r1, #4
 8002aae:	d003      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x38>
 8002ab0:	e08e      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ab2:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ab4:	60bb      	str	r3, [r7, #8]
       break;
 8002ab6:	e08e      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002aba:	60bb      	str	r3, [r7, #8]
      break;
 8002abc:	e08b      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002abe:	4948      	ldr	r1, [pc, #288]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ac0:	6849      	ldr	r1, [r1, #4]
 8002ac2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002ac6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac8:	4945      	ldr	r1, [pc, #276]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aca:	6849      	ldr	r1, [r1, #4]
 8002acc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	d024      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad4:	4942      	ldr	r1, [pc, #264]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ad6:	6849      	ldr	r1, [r1, #4]
 8002ad8:	0989      	lsrs	r1, r1, #6
 8002ada:	4608      	mov	r0, r1
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ae4:	f04f 0500 	mov.w	r5, #0
 8002ae8:	ea00 0204 	and.w	r2, r0, r4
 8002aec:	ea01 0305 	and.w	r3, r1, r5
 8002af0:	493d      	ldr	r1, [pc, #244]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002af2:	fb01 f003 	mul.w	r0, r1, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	fb01 f102 	mul.w	r1, r1, r2
 8002afc:	1844      	adds	r4, r0, r1
 8002afe:	493a      	ldr	r1, [pc, #232]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002b00:	fba2 0101 	umull	r0, r1, r2, r1
 8002b04:	1863      	adds	r3, r4, r1
 8002b06:	4619      	mov	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	f7fd fb60 	bl	80001d4 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4613      	mov	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	e04a      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	461a      	mov	r2, r3
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	ea02 0400 	and.w	r4, r2, r0
 8002b36:	ea03 0501 	and.w	r5, r3, r1
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b4c:	0142      	lsls	r2, r0, #5
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	1b00      	subs	r0, r0, r4
 8002b54:	eb61 0105 	sbc.w	r1, r1, r5
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	018b      	lsls	r3, r1, #6
 8002b62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b66:	0182      	lsls	r2, r0, #6
 8002b68:	1a12      	subs	r2, r2, r0
 8002b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6e:	f04f 0000 	mov.w	r0, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	00d9      	lsls	r1, r3, #3
 8002b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b7c:	00d0      	lsls	r0, r2, #3
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	1912      	adds	r2, r2, r4
 8002b84:	eb45 0303 	adc.w	r3, r5, r3
 8002b88:	f04f 0000 	mov.w	r0, #0
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	0299      	lsls	r1, r3, #10
 8002b92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b96:	0290      	lsls	r0, r2, #10
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	f7fd fb14 	bl	80001d4 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	60bb      	str	r3, [r7, #8]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bd2:	60bb      	str	r3, [r7, #8]
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdb0      	pop	{r4, r5, r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	017d7840 	.word	0x017d7840

08002bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000010 	.word	0x20000010

08002c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c08:	f7ff fff0 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	4903      	ldr	r1, [pc, #12]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40023800 	.word	0x40023800
 8002c28:	08004fbc 	.word	0x08004fbc

08002c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c30:	f7ff ffdc 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c34:	4602      	mov	r2, r0
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	0b5b      	lsrs	r3, r3, #13
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	4903      	ldr	r1, [pc, #12]	; (8002c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c42:	5ccb      	ldrb	r3, [r1, r3]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	08004fbc 	.word	0x08004fbc

08002c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07b      	b.n	8002d5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d108      	bne.n	8002c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c76:	d009      	beq.n	8002c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
 8002c7e:	e005      	b.n	8002c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe f8cc 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	ea42 0103 	orr.w	r1, r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	f003 0104 	and.w	r1, r3, #4
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	f003 0210 	and.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_SPI_Transmit+0x22>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e126      	b.n	8002fd6 <HAL_SPI_Transmit+0x270>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d90:	f7fe fc8c 	bl	80016ac <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002daa:	e10b      	b.n	8002fc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_SPI_Transmit+0x52>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dbc:	e102      	b.n	8002fc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d10f      	bne.n	8002e26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d007      	beq.n	8002e44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4c:	d14b      	bne.n	8002ee6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Transmit+0xf6>
 8002e56:	8afb      	ldrh	r3, [r7, #22]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d13e      	bne.n	8002eda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	1c9a      	adds	r2, r3, #2
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e80:	e02b      	b.n	8002eda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d112      	bne.n	8002eb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	1c9a      	adds	r2, r3, #2
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eb4:	e011      	b.n	8002eda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb6:	f7fe fbf9 	bl	80016ac <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d803      	bhi.n	8002ece <HAL_SPI_Transmit+0x168>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_Transmit+0x16e>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ed8:	e074      	b.n	8002fc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ce      	bne.n	8002e82 <HAL_SPI_Transmit+0x11c>
 8002ee4:	e04c      	b.n	8002f80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Transmit+0x18e>
 8002eee:	8afb      	ldrh	r3, [r7, #22]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d140      	bne.n	8002f76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f1a:	e02c      	b.n	8002f76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d113      	bne.n	8002f52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f50:	e011      	b.n	8002f76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f52:	f7fe fbab 	bl	80016ac <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d803      	bhi.n	8002f6a <HAL_SPI_Transmit+0x204>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_Transmit+0x20a>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f74:	e026      	b.n	8002fc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1cd      	bne.n	8002f1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 ffb7 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e000      	b.n	8002fc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b088      	sub	sp, #32
 8002fe2:	af02      	add	r7, sp, #8
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffa:	d112      	bne.n	8003022 <HAL_SPI_Receive+0x44>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2204      	movs	r2, #4
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f8f1 	bl	8003200 <HAL_SPI_TransmitReceive>
 800301e:	4603      	mov	r3, r0
 8003020:	e0ea      	b.n	80031f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_SPI_Receive+0x52>
 800302c:	2302      	movs	r3, #2
 800302e:	e0e3      	b.n	80031f8 <HAL_SPI_Receive+0x21a>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003038:	f7fe fb38 	bl	80016ac <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d002      	beq.n	8003050 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800304e:	e0ca      	b.n	80031e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_SPI_Receive+0x7e>
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003060:	e0c1      	b.n	80031e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2204      	movs	r2, #4
 8003066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a8:	d10f      	bne.n	80030ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d007      	beq.n	80030e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d162      	bne.n	80031b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030f0:	e02e      	b.n	8003150 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d115      	bne.n	800312c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f103 020c 	add.w	r2, r3, #12
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800312a:	e011      	b.n	8003150 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312c:	f7fe fabe 	bl	80016ac <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d803      	bhi.n	8003144 <HAL_SPI_Receive+0x166>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d102      	bne.n	800314a <HAL_SPI_Receive+0x16c>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800314e:	e04a      	b.n	80031e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1cb      	bne.n	80030f2 <HAL_SPI_Receive+0x114>
 800315a:	e031      	b.n	80031c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d113      	bne.n	8003192 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	b292      	uxth	r2, r2
 8003176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	1c9a      	adds	r2, r3, #2
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003190:	e011      	b.n	80031b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003192:	f7fe fa8b 	bl	80016ac <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d803      	bhi.n	80031aa <HAL_SPI_Receive+0x1cc>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_Receive+0x1d2>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031b4:	e017      	b.n	80031e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1cd      	bne.n	800315c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	6839      	ldr	r1, [r7, #0]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fe31 	bl	8003e2c <SPI_EndRxTransaction>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
 80031e2:	e000      	b.n	80031e6 <HAL_SPI_Receive+0x208>
  }

error :
 80031e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800320e:	2301      	movs	r3, #1
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_SPI_TransmitReceive+0x26>
 8003222:	2302      	movs	r3, #2
 8003224:	e18a      	b.n	800353c <HAL_SPI_TransmitReceive+0x33c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322e:	f7fe fa3d 	bl	80016ac <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003244:	887b      	ldrh	r3, [r7, #2]
 8003246:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324c:	2b01      	cmp	r3, #1
 800324e:	d00f      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x70>
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003256:	d107      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x68>
 8003260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003264:	2b04      	cmp	r3, #4
 8003266:	d003      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326e:	e15b      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x82>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_SPI_TransmitReceive+0x82>
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003288:	e14e      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b04      	cmp	r3, #4
 8003294:	d003      	beq.n	800329e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2205      	movs	r2, #5
 800329a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d007      	beq.n	80032f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fa:	d178      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_SPI_TransmitReceive+0x10a>
 8003304:	8b7b      	ldrh	r3, [r7, #26]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d166      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332e:	e053      	b.n	80033d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d11b      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x176>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x176>
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d113      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	1c9a      	adds	r2, r3, #2
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d119      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x1b8>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	b292      	uxth	r2, r2
 800339a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	1c9a      	adds	r2, r3, #2
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b4:	2301      	movs	r3, #1
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b8:	f7fe f978 	bl	80016ac <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d807      	bhi.n	80033d8 <HAL_SPI_TransmitReceive+0x1d8>
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d003      	beq.n	80033d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033d6:	e0a7      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1a6      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x130>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1a1      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x130>
 80033ec:	e07c      	b.n	80034e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x1fc>
 80033f6:	8b7b      	ldrh	r3, [r7, #26]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d16b      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003422:	e057      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d11c      	bne.n	800346c <HAL_SPI_TransmitReceive+0x26c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_SPI_TransmitReceive+0x26c>
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d114      	bne.n	800346c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d119      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x2ae>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d014      	beq.n	80034ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034aa:	2301      	movs	r3, #1
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034ae:	f7fe f8fd 	bl	80016ac <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d803      	bhi.n	80034c6 <HAL_SPI_TransmitReceive+0x2c6>
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d102      	bne.n	80034cc <HAL_SPI_TransmitReceive+0x2cc>
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034d2:	e029      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1a2      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x224>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d19d      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fd03 	bl	8003ef8 <SPI_EndRxTxTransaction>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003504:	e010      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	e000      	b.n	8003528 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003538:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800353c:	4618      	mov	r0, r3
 800353e:	3730      	adds	r7, #48	; 0x30
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d110      	bne.n	8003580 <HAL_SPI_Receive_DMA+0x3c>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003566:	d10b      	bne.n	8003580 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2204      	movs	r2, #4
 800356c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8ac 	bl	80036d4 <HAL_SPI_TransmitReceive_DMA>
 800357c:	4603      	mov	r3, r0
 800357e:	e09f      	b.n	80036c0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_SPI_Receive_DMA+0x4a>
 800358a:	2302      	movs	r3, #2
 800358c:	e098      	b.n	80036c0 <HAL_SPI_Receive_DMA+0x17c>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
 80035a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a6:	e086      	b.n	80036b6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Receive_DMA+0x70>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b8:	e07d      	b.n	80036b6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2204      	movs	r2, #4
 80035be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	88fa      	ldrh	r2, [r7, #6]
 80035d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fa:	d10f      	bne.n	800361c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800361a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <HAL_SPI_Receive_DMA+0x184>)
 8003622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003628:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_SPI_Receive_DMA+0x188>)
 800362a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_SPI_Receive_DMA+0x18c>)
 8003632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	2200      	movs	r2, #0
 800363a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	4619      	mov	r1, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003654:	f7fe fa1a 	bl	8001a8c <HAL_DMA_Start_IT>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f043 0210 	orr.w	r2, r3, #16
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003676:	e01e      	b.n	80036b6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d007      	beq.n	8003696 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0220 	orr.w	r2, r2, #32
 80036a4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0201 	orr.w	r2, r2, #1
 80036b4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	08003c7d 	.word	0x08003c7d
 80036cc:	08003b45 	.word	0x08003b45
 80036d0:	08003cb5 	.word	0x08003cb5

080036d4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e0e3      	b.n	80038bc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003702:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800370a:	7dbb      	ldrb	r3, [r7, #22]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d00d      	beq.n	800372c <HAL_SPI_TransmitReceive_DMA+0x58>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003716:	d106      	bne.n	8003726 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003720:	7dbb      	ldrb	r3, [r7, #22]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003726:	2302      	movs	r3, #2
 8003728:	75fb      	strb	r3, [r7, #23]
    goto error;
 800372a:	e0c2      	b.n	80038b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003742:	e0b6      	b.n	80038b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b04      	cmp	r3, #4
 800374e:	d003      	beq.n	8003758 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2205      	movs	r2, #5
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	887a      	ldrh	r2, [r7, #2]
 800376e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	887a      	ldrh	r2, [r7, #2]
 800377a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b04      	cmp	r3, #4
 8003798:	d108      	bne.n	80037ac <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	4a49      	ldr	r2, [pc, #292]	; (80038c4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	4a48      	ldr	r2, [pc, #288]	; (80038c8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80037a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80037aa:	e007      	b.n	80037bc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	4a46      	ldr	r2, [pc, #280]	; (80038cc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	4a45      	ldr	r2, [pc, #276]	; (80038d0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80037c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	2200      	movs	r2, #0
 80037ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	4619      	mov	r1, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037e4:	f7fe f952 	bl	8001a8c <HAL_DMA_Start_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003806:	e054      	b.n	80038b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	2200      	movs	r2, #0
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	2200      	movs	r2, #0
 800382e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	2200      	movs	r2, #0
 8003836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4619      	mov	r1, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003850:	f7fe f91c 	bl	8001a8c <HAL_DMA_Start_IT>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003872:	e01e      	b.n	80038b2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d007      	beq.n	8003892 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003890:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0220 	orr.w	r2, r2, #32
 80038a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0202 	orr.w	r2, r2, #2
 80038b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	08003c7d 	.word	0x08003c7d
 80038c8:	08003b45 	.word	0x08003b45
 80038cc:	08003c99 	.word	0x08003c99
 80038d0:	08003bed 	.word	0x08003bed
 80038d4:	08003cb5 	.word	0x08003cb5

080038d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	099b      	lsrs	r3, r3, #6
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d004      	beq.n	800391c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
    return;
 800391a:	e0d7      	b.n	8003acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	085b      	lsrs	r3, r3, #1
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_SPI_IRQHandler+0x66>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	09db      	lsrs	r3, r3, #7
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d004      	beq.n	800393e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	4798      	blx	r3
    return;
 800393c:	e0c6      	b.n	8003acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_SPI_IRQHandler+0x8c>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80b4 	beq.w	8003acc <HAL_SPI_IRQHandler+0x1f4>
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80ad 	beq.w	8003acc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d023      	beq.n	80039c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d011      	beq.n	80039ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003996:	2300      	movs	r3, #0
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	e00b      	b.n	80039c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
        return;
 80039c4:	e082      	b.n	8003acc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d014      	beq.n	80039fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0208 	orr.w	r2, r3, #8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04f      	beq.n	8003aca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_SPI_IRQHandler+0x17e>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d034      	beq.n	8003ac0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0203 	bic.w	r2, r2, #3
 8003a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d011      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8003a74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f85e 	bl	8001b3c <HAL_DMA_Abort_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8003aa0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f848 	bl	8001b3c <HAL_DMA_Abort_IT>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003abe:	e003      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f827 	bl	8003b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac6:	e000      	b.n	8003aca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003ac8:	bf00      	nop
    return;
 8003aca:	bf00      	nop
  }
}
 8003acc:	3720      	adds	r7, #32
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003cf5 	.word	0x08003cf5

08003ad8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b36:	b2db      	uxtb	r3, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b52:	f7fd fdab 	bl	80016ac <HAL_GetTick>
 8003b56:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d03b      	beq.n	8003be0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0220 	bic.w	r2, r2, #32
 8003b76:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <SPI_DMAReceiveCplt+0x58>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b88:	d108      	bne.n	8003b9c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0203 	bic.w	r2, r2, #3
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	e007      	b.n	8003bac <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f93b 	bl	8003e2c <SPI_EndRxTransaction>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff ff9b 	bl	8003b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003bde:	e002      	b.n	8003be6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7fc fc73 	bl	80004cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bfa:	f7fd fd57 	bl	80016ac <HAL_GetTick>
 8003bfe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d02f      	beq.n	8003c70 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0220 	bic.w	r2, r2, #32
 8003c1e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	2164      	movs	r1, #100	; 0x64
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f967 	bl	8003ef8 <SPI_EndRxTxTransaction>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0203 	bic.w	r2, r2, #3
 8003c4a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff53 	bl	8003b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c6e:	e002      	b.n	8003c76 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff ff31 	bl	8003ad8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff2e 	bl	8003aec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ff2a 	bl	8003b00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0203 	bic.w	r2, r2, #3
 8003cd0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff ff14 	bl	8003b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ff00 	bl	8003b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d2c:	f7fd fcbe 	bl	80016ac <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d3c:	f7fd fcb6 	bl	80016ac <HAL_GetTick>
 8003d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	015b      	lsls	r3, r3, #5
 8003d48:	0d1b      	lsrs	r3, r3, #20
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d52:	e054      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d050      	beq.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d5c:	f7fd fca6 	bl	80016ac <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d902      	bls.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d13d      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8a:	d111      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d94:	d004      	beq.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d107      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db8:	d10f      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e017      	b.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d19b      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000010 	.word	0x20000010

08003e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e40:	d111      	bne.n	8003e66 <SPI_EndRxTransaction+0x3a>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d004      	beq.n	8003e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e54:	d107      	bne.n	8003e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d12a      	bne.n	8003ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d012      	beq.n	8003ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ff49 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02d      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e026      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff ff36 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01a      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e013      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2101      	movs	r1, #1
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff23 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e000      	b.n	8003eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <SPI_EndRxTxTransaction+0x7c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <SPI_EndRxTxTransaction+0x80>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0d5b      	lsrs	r3, r3, #21
 8003f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f22:	d112      	bne.n	8003f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fef4 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e00f      	b.n	8003f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	2b80      	cmp	r3, #128	; 0x80
 8003f62:	d0f2      	beq.n	8003f4a <SPI_EndRxTxTransaction+0x52>
 8003f64:	e000      	b.n	8003f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f66:	bf00      	nop
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000010 	.word	0x20000010
 8003f78:	165e9f81 	.word	0x165e9f81

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f808 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 f9fe 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e041      	b.n	80040b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd f841 	bl	80010c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f000 f9af 	bl	80043bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0ac      	b.n	800422c <HAL_TIM_PWM_ConfigChannel+0x174>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	f200 809f 	bhi.w	8004220 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004221 	.word	0x08004221
 80040f0:	08004221 	.word	0x08004221
 80040f4:	08004221 	.word	0x08004221
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	08004221 	.word	0x08004221
 8004100:	08004221 	.word	0x08004221
 8004104:	08004221 	.word	0x08004221
 8004108:	0800419f 	.word	0x0800419f
 800410c:	08004221 	.word	0x08004221
 8004110:	08004221 	.word	0x08004221
 8004114:	08004221 	.word	0x08004221
 8004118:	080041df 	.word	0x080041df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f9ca 	bl	80044bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0204 	bic.w	r2, r2, #4
 8004146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6999      	ldr	r1, [r3, #24]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	619a      	str	r2, [r3, #24]
      break;
 800415a:	e062      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fa10 	bl	8004588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	619a      	str	r2, [r3, #24]
      break;
 800419c:	e041      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fa5b 	bl	8004660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0208 	orr.w	r2, r2, #8
 80041b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0204 	bic.w	r2, r2, #4
 80041c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69d9      	ldr	r1, [r3, #28]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	61da      	str	r2, [r3, #28]
      break;
 80041dc:	e021      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 faa5 	bl	8004734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69d9      	ldr	r1, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	61da      	str	r2, [r3, #28]
      break;
 800421e:	e000      	b.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004220:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIM_ConfigClockSource+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e0b3      	b.n	80043b4 <HAL_TIM_ConfigClockSource+0x180>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800426a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004272:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004284:	d03e      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0xd0>
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428a:	f200 8087 	bhi.w	800439c <HAL_TIM_ConfigClockSource+0x168>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	f000 8085 	beq.w	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	d87f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 800429c:	2b70      	cmp	r3, #112	; 0x70
 800429e:	d01a      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0xa2>
 80042a0:	2b70      	cmp	r3, #112	; 0x70
 80042a2:	d87b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042a4:	2b60      	cmp	r3, #96	; 0x60
 80042a6:	d050      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x116>
 80042a8:	2b60      	cmp	r3, #96	; 0x60
 80042aa:	d877      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042ac:	2b50      	cmp	r3, #80	; 0x50
 80042ae:	d03c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xf6>
 80042b0:	2b50      	cmp	r3, #80	; 0x50
 80042b2:	d873      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d058      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x136>
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d86f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d064      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x156>
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d86b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d060      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x156>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d867      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x168>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x156>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d05a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042d4:	e062      	b.n	800439c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f000 faef 	bl	80048c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	609a      	str	r2, [r3, #8]
      break;
 8004302:	e04e      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6899      	ldr	r1, [r3, #8]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f000 fad8 	bl	80048c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004326:	609a      	str	r2, [r3, #8]
      break;
 8004328:	e03b      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	461a      	mov	r2, r3
 8004338:	f000 fa4c 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2150      	movs	r1, #80	; 0x50
 8004342:	4618      	mov	r0, r3
 8004344:	f000 faa5 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 8004348:	e02b      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fa6b 	bl	8004832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2160      	movs	r1, #96	; 0x60
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa95 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 8004368:	e01b      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fa2c 	bl	80047d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2140      	movs	r1, #64	; 0x40
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa85 	bl	8004892 <TIM_ITRx_SetConfig>
      break;
 8004388:	e00b      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f000 fa7c 	bl	8004892 <TIM_ITRx_SetConfig>
        break;
 800439a:	e002      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800439c:	bf00      	nop
 800439e:	e000      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a34      	ldr	r2, [pc, #208]	; (80044a0 <TIM_Base_SetConfig+0xe4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00b      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a31      	ldr	r2, [pc, #196]	; (80044a4 <TIM_Base_SetConfig+0xe8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <TIM_Base_SetConfig+0xec>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x38>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a2f      	ldr	r2, [pc, #188]	; (80044ac <TIM_Base_SetConfig+0xf0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a25      	ldr	r2, [pc, #148]	; (80044a0 <TIM_Base_SetConfig+0xe4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01b      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d017      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a22      	ldr	r2, [pc, #136]	; (80044a4 <TIM_Base_SetConfig+0xe8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <TIM_Base_SetConfig+0xec>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a20      	ldr	r2, [pc, #128]	; (80044ac <TIM_Base_SetConfig+0xf0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <TIM_Base_SetConfig+0xf4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <TIM_Base_SetConfig+0xf8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0x8a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <TIM_Base_SetConfig+0xfc>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <TIM_Base_SetConfig+0xe4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40014400 	.word	0x40014400
 80044b8:	40014800 	.word	0x40014800

080044bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0302 	bic.w	r3, r3, #2
 8004504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <TIM_OC1_SetConfig+0xc8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10c      	bne.n	8004532 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f023 0308 	bic.w	r3, r3, #8
 800451e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 0304 	bic.w	r3, r3, #4
 8004530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <TIM_OC1_SetConfig+0xc8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d111      	bne.n	800455e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	40010000 	.word	0x40010000

08004588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <TIM_OC2_SetConfig+0xd4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10d      	bne.n	8004604 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004602:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <TIM_OC2_SetConfig+0xd4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d113      	bne.n	8004634 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800461a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	621a      	str	r2, [r3, #32]
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000

08004660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <TIM_OC3_SetConfig+0xd0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10d      	bne.n	80046da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a14      	ldr	r2, [pc, #80]	; (8004730 <TIM_OC3_SetConfig+0xd0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d113      	bne.n	800470a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40010000 	.word	0x40010000

08004734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <TIM_OC4_SetConfig+0x9c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000

080047d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f023 0201 	bic.w	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4313      	orrs	r3, r2
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f023 030a 	bic.w	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	621a      	str	r2, [r3, #32]
}
 8004826:	bf00      	nop
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004832:	b480      	push	{r7}
 8004834:	b087      	sub	sp, #28
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0210 	bic.w	r2, r3, #16
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f043 0307 	orr.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	021a      	lsls	r2, r3, #8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e050      	b.n	80049c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496c:	d013      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10c      	bne.n	80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40014000 	.word	0x40014000

080049e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e03d      	b.n	8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e03f      	b.n	8004b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fca6 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f86d 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d130      	bne.n	8004b9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Transmit_IT+0x26>
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e029      	b.n	8004ba0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Transmit_IT+0x38>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e022      	b.n	8004ba0 <HAL_UART_Transmit_IT+0x7e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	88fa      	ldrh	r2, [r7, #6]
 8004b72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2221      	movs	r2, #33	; 0x21
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	b09f      	sub	sp, #124	; 0x7c
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc2:	68d9      	ldr	r1, [r3, #12]
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	ea40 0301 	orr.w	r3, r0, r1
 8004bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bf0:	f021 010c 	bic.w	r1, r1, #12
 8004bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bfa:	430b      	orrs	r3, r1
 8004bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	6999      	ldr	r1, [r3, #24]
 8004c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	ea40 0301 	orr.w	r3, r0, r1
 8004c14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4bc5      	ldr	r3, [pc, #788]	; (8004f30 <UART_SetConfig+0x384>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d004      	beq.n	8004c2a <UART_SetConfig+0x7e>
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4bc3      	ldr	r3, [pc, #780]	; (8004f34 <UART_SetConfig+0x388>)
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d103      	bne.n	8004c32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c2a:	f7fd ffff 	bl	8002c2c <HAL_RCC_GetPCLK2Freq>
 8004c2e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c30:	e002      	b.n	8004c38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c32:	f7fd ffe7 	bl	8002c04 <HAL_RCC_GetPCLK1Freq>
 8004c36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c40:	f040 80b6 	bne.w	8004db0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c46:	461c      	mov	r4, r3
 8004c48:	f04f 0500 	mov.w	r5, #0
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	462b      	mov	r3, r5
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	6439      	str	r1, [r7, #64]	; 0x40
 8004c54:	415b      	adcs	r3, r3
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
 8004c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c5c:	1912      	adds	r2, r2, r4
 8004c5e:	eb45 0303 	adc.w	r3, r5, r3
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	00d9      	lsls	r1, r3, #3
 8004c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c70:	00d0      	lsls	r0, r2, #3
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	1911      	adds	r1, r2, r4
 8004c78:	6639      	str	r1, [r7, #96]	; 0x60
 8004c7a:	416b      	adcs	r3, r5
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c98:	f7fb fa9c 	bl	80001d4 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4ba5      	ldr	r3, [pc, #660]	; (8004f38 <UART_SetConfig+0x38c>)
 8004ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	011e      	lsls	r6, r3, #4
 8004caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cac:	461c      	mov	r4, r3
 8004cae:	f04f 0500 	mov.w	r5, #0
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	1891      	adds	r1, r2, r2
 8004cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cba:	415b      	adcs	r3, r3
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cc2:	1912      	adds	r2, r2, r4
 8004cc4:	eb45 0303 	adc.w	r3, r5, r3
 8004cc8:	f04f 0000 	mov.w	r0, #0
 8004ccc:	f04f 0100 	mov.w	r1, #0
 8004cd0:	00d9      	lsls	r1, r3, #3
 8004cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd6:	00d0      	lsls	r0, r2, #3
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	1911      	adds	r1, r2, r4
 8004cde:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ce0:	416b      	adcs	r3, r5
 8004ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	1891      	adds	r1, r2, r2
 8004cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004cfe:	f7fb fa69 	bl	80001d4 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b8c      	ldr	r3, [pc, #560]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	; 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	3332      	adds	r3, #50	; 0x32
 8004d1a:	4a87      	ldr	r2, [pc, #540]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d28:	441e      	add	r6, r3
 8004d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	1894      	adds	r4, r2, r2
 8004d38:	623c      	str	r4, [r7, #32]
 8004d3a:	415b      	adcs	r3, r3
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d42:	1812      	adds	r2, r2, r0
 8004d44:	eb41 0303 	adc.w	r3, r1, r3
 8004d48:	f04f 0400 	mov.w	r4, #0
 8004d4c:	f04f 0500 	mov.w	r5, #0
 8004d50:	00dd      	lsls	r5, r3, #3
 8004d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d56:	00d4      	lsls	r4, r2, #3
 8004d58:	4622      	mov	r2, r4
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	1814      	adds	r4, r2, r0
 8004d5e:	653c      	str	r4, [r7, #80]	; 0x50
 8004d60:	414b      	adcs	r3, r1
 8004d62:	657b      	str	r3, [r7, #84]	; 0x54
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	1891      	adds	r1, r2, r2
 8004d70:	61b9      	str	r1, [r7, #24]
 8004d72:	415b      	adcs	r3, r3
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004d7e:	f7fb fa29 	bl	80001d4 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b6c      	ldr	r3, [pc, #432]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	; 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a67      	ldr	r2, [pc, #412]	; (8004f38 <UART_SetConfig+0x38c>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 0207 	and.w	r2, r3, #7
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4432      	add	r2, r6
 8004dac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dae:	e0b9      	b.n	8004f24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db2:	461c      	mov	r4, r3
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	6139      	str	r1, [r7, #16]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004dc8:	1912      	adds	r2, r2, r4
 8004dca:	eb45 0303 	adc.w	r3, r5, r3
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	00d9      	lsls	r1, r3, #3
 8004dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ddc:	00d0      	lsls	r0, r2, #3
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	eb12 0804 	adds.w	r8, r2, r4
 8004de6:	eb43 0905 	adc.w	r9, r3, r5
 8004dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f04f 0100 	mov.w	r1, #0
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	008b      	lsls	r3, r1, #2
 8004dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e02:	0082      	lsls	r2, r0, #2
 8004e04:	4640      	mov	r0, r8
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fb f9e4 	bl	80001d4 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b49      	ldr	r3, [pc, #292]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	011e      	lsls	r6, r3, #4
 8004e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	1894      	adds	r4, r2, r2
 8004e28:	60bc      	str	r4, [r7, #8]
 8004e2a:	415b      	adcs	r3, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e32:	1812      	adds	r2, r2, r0
 8004e34:	eb41 0303 	adc.w	r3, r1, r3
 8004e38:	f04f 0400 	mov.w	r4, #0
 8004e3c:	f04f 0500 	mov.w	r5, #0
 8004e40:	00dd      	lsls	r5, r3, #3
 8004e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e46:	00d4      	lsls	r4, r2, #3
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	1814      	adds	r4, r2, r0
 8004e4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004e50:	414b      	adcs	r3, r1
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	008b      	lsls	r3, r1, #2
 8004e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e6c:	0082      	lsls	r2, r0, #2
 8004e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004e72:	f7fb f9af 	bl	80001d4 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a2a      	ldr	r2, [pc, #168]	; (8004f38 <UART_SetConfig+0x38c>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9a:	441e      	add	r6, r3
 8004e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	1894      	adds	r4, r2, r2
 8004eaa:	603c      	str	r4, [r7, #0]
 8004eac:	415b      	adcs	r3, r3
 8004eae:	607b      	str	r3, [r7, #4]
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	1812      	adds	r2, r2, r0
 8004eb6:	eb41 0303 	adc.w	r3, r1, r3
 8004eba:	f04f 0400 	mov.w	r4, #0
 8004ebe:	f04f 0500 	mov.w	r5, #0
 8004ec2:	00dd      	lsls	r5, r3, #3
 8004ec4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ec8:	00d4      	lsls	r4, r2, #3
 8004eca:	4622      	mov	r2, r4
 8004ecc:	462b      	mov	r3, r5
 8004ece:	eb12 0a00 	adds.w	sl, r2, r0
 8004ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f04f 0100 	mov.w	r1, #0
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	008b      	lsls	r3, r1, #2
 8004eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004eee:	0082      	lsls	r2, r0, #2
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f7fb f96e 	bl	80001d4 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <UART_SetConfig+0x38c>)
 8004efe:	fba3 1302 	umull	r1, r3, r3, r2
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	2164      	movs	r1, #100	; 0x64
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	3332      	adds	r3, #50	; 0x32
 8004f10:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <UART_SetConfig+0x38c>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4432      	add	r2, r6
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	377c      	adds	r7, #124	; 0x7c
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	bf00      	nop
 8004f30:	40011000 	.word	0x40011000
 8004f34:	40011400 	.word	0x40011400
 8004f38:	51eb851f 	.word	0x51eb851f

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4d0d      	ldr	r5, [pc, #52]	; (8004f74 <__libc_init_array+0x38>)
 8004f40:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	2600      	movs	r6, #0
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	4d0b      	ldr	r5, [pc, #44]	; (8004f7c <__libc_init_array+0x40>)
 8004f4e:	4c0c      	ldr	r4, [pc, #48]	; (8004f80 <__libc_init_array+0x44>)
 8004f50:	f000 f820 	bl	8004f94 <_init>
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	2600      	movs	r6, #0
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	08004fd4 	.word	0x08004fd4
 8004f78:	08004fd4 	.word	0x08004fd4
 8004f7c:	08004fd4 	.word	0x08004fd4
 8004f80:	08004fd8 	.word	0x08004fd8

08004f84 <memset>:
 8004f84:	4402      	add	r2, r0
 8004f86:	4603      	mov	r3, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d100      	bne.n	8004f8e <memset+0xa>
 8004f8c:	4770      	bx	lr
 8004f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f92:	e7f9      	b.n	8004f88 <memset+0x4>

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
