
STM32_IO_Expander.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f24  08004f24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f24  08004f24  00014f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f2c  08004f2c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000001c  08004f50  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08004f50  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d2e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cc  00000000  00000000  00031d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00035688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ccb  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001339a  00000000  00000000  0004e27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a81c  00000000  00000000  00061615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbe31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004350  00000000  00000000  000fbe84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004eec 	.word	0x08004eec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08004eec 	.word	0x08004eec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e0:	4a21      	ldr	r2, [pc, #132]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_ADC1_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_ADC1_Init+0x98>)
 800050c:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_ADC1_Init+0xa0>)
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <MX_ADC1_Init+0x98>)
 8000518:	2201      	movs	r2, #1
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_ADC1_Init+0x98>)
 8000526:	2201      	movs	r2, #1
 8000528:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052a:	480e      	ldr	r0, [pc, #56]	; (8000564 <MX_ADC1_Init+0x98>)
 800052c:	f001 fa78 	bl	8001a20 <HAL_ADC_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000536:	f000 fa41 	bl	80009bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800053a:	2304      	movs	r3, #4
 800053c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053e:	2301      	movs	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <MX_ADC1_Init+0x98>)
 800054c:	f001 faac 	bl	8001aa8 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000556:	f000 fa31 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000040 	.word	0x20000040
 8000568:	40012000 	.word	0x40012000
 800056c:	0f000001 	.word	0x0f000001

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a3b      	ldr	r2, [pc, #236]	; (800067c <HAL_ADC_MspInit+0x10c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d170      	bne.n	8000674 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <HAL_ADC_MspInit+0x110>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a39      	ldr	r2, [pc, #228]	; (8000680 <HAL_ADC_MspInit+0x110>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b33      	ldr	r3, [pc, #204]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a32      	ldr	r2, [pc, #200]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b30      	ldr	r3, [pc, #192]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <HAL_ADC_MspInit+0x110>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005e6:	2310      	movs	r3, #16
 80005e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ea:	2303      	movs	r3, #3
 80005ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4822      	ldr	r0, [pc, #136]	; (8000684 <HAL_ADC_MspInit+0x114>)
 80005fa:	f002 f917 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <HAL_ADC_MspInit+0x118>)
 8000612:	f002 f90b 	bl	800282c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000618:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <HAL_ADC_MspInit+0x120>)
 800061a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_ADC_MspInit+0x11c>)
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_ADC_MspInit+0x11c>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000634:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_ADC_MspInit+0x11c>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <HAL_ADC_MspInit+0x11c>)
 800065a:	f001 fd55 	bl	8002108 <HAL_DMA_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000664:	f000 f9aa 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_ADC_MspInit+0x11c>)
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_ADC_MspInit+0x11c>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40012000 	.word	0x40012000
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	20000088 	.word	0x20000088
 8000690:	40026410 	.word	0x40026410

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b2f      	ldr	r3, [pc, #188]	; (800075c <MX_DMA_Init+0xc8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2e      	ldr	r2, [pc, #184]	; (800075c <MX_DMA_Init+0xc8>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <MX_DMA_Init+0xc8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_DMA_Init+0xc8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <MX_DMA_Init+0xc8>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <MX_DMA_Init+0xc8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200b      	movs	r0, #11
 80006d8:	f001 fcdf 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006dc:	200b      	movs	r0, #11
 80006de:	f001 fcf8 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	200c      	movs	r0, #12
 80006e8:	f001 fcd7 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ec:	200c      	movs	r0, #12
 80006ee:	f001 fcf0 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	200d      	movs	r0, #13
 80006f8:	f001 fccf 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006fc:	200d      	movs	r0, #13
 80006fe:	f001 fce8 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200e      	movs	r0, #14
 8000708:	f001 fcc7 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800070c:	200e      	movs	r0, #14
 800070e:	f001 fce0 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	200f      	movs	r0, #15
 8000718:	f001 fcbf 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800071c:	200f      	movs	r0, #15
 800071e:	f001 fcd8 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2038      	movs	r0, #56	; 0x38
 8000728:	f001 fcb7 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800072c:	2038      	movs	r0, #56	; 0x38
 800072e:	f001 fcd0 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	203a      	movs	r0, #58	; 0x3a
 8000738:	f001 fcaf 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800073c:	203a      	movs	r0, #58	; 0x3a
 800073e:	f001 fcc8 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	203b      	movs	r0, #59	; 0x3b
 8000748:	f001 fca7 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800074c:	203b      	movs	r0, #59	; 0x3b
 800074e:	f001 fcc0 	bl	80020d2 <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_GPIO_Init+0xe0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a30      	ldr	r2, [pc, #192]	; (8000840 <MX_GPIO_Init+0xe0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0xe0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_GPIO_Init+0xe0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a29      	ldr	r2, [pc, #164]	; (8000840 <MX_GPIO_Init+0xe0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ec:	4815      	ldr	r0, [pc, #84]	; (8000844 <MX_GPIO_Init+0xe4>)
 80007ee:	f002 f9a1 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSE_4_CS_Pin|SENSE_3_CS_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2130      	movs	r1, #48	; 0x30
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_GPIO_Init+0xe8>)
 80007f8:	f002 f99c 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0xe4>)
 8000816:	f002 f809 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_4_CS_Pin|SENSE_3_CS_Pin;
 800081a:	2330      	movs	r3, #48	; 0x30
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0xe8>)
 8000832:	f001 fffb 	bl	800282c <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020400 	.word	0x40020400

0800084c <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	//HAL_SPI_Receive_DMA(&hspi2, RX_Buffer, BUFFER_SIZE);
	//HAL_SPI_Transmit(&hspi2, Buffer, BUFFER_SIZE);
	//HAL_SPI_Transmit_DMA(&hspi2, Buffer, BUFFER_SIZE);
	HAL_SPI_TransmitReceive_DMA(&hspi1, Buffer, RX_Buffer, BUFFER_SIZE);
 8000854:	2308      	movs	r3, #8
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_SPI_RxCpltCallback+0x30>)
 8000858:	4909      	ldr	r1, [pc, #36]	; (8000880 <HAL_SPI_RxCpltCallback+0x34>)
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <HAL_SPI_RxCpltCallback+0x38>)
 800085c:	f002 ff38 	bl	80036d0 <HAL_SPI_TransmitReceive_DMA>
	// Will copy 18 characters from RX_Buffer to Buffer
	//memcpy( Buffer, RX_Buffer, sizeof(RX_Buffer) );

    if(RX_Buffer[4] < 50)
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_SPI_RxCpltCallback+0x30>)
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	2b31      	cmp	r3, #49	; 0x31
 8000866:	d804      	bhi.n	8000872 <HAL_SPI_RxCpltCallback+0x26>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <HAL_SPI_RxCpltCallback+0x3c>)
 800086e:	f002 f97a 	bl	8002b66 <HAL_GPIO_TogglePin>
   // HAL_UART_Transmit_IT(&huart6, RX_Buffer, BUFFER_SIZE);
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000038 	.word	0x20000038
 8000880:	20000000 	.word	0x20000000
 8000884:	200001a0 	.word	0x200001a0
 8000888:	40020800 	.word	0x40020800

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t itter = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f001 f82d 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f82f 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f7ff ff5f 	bl	8000760 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a2:	f7ff fef7 	bl	8000694 <MX_DMA_Init>
  MX_SPI1_Init();
 80008a6:	f000 f88f 	bl	80009c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80008aa:	f000 f8bf 	bl	8000a2c <MX_SPI2_Init>
  MX_USART6_UART_Init();
 80008ae:	f000 ff85 	bl	80017bc <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80008b2:	f000 fad3 	bl	8000e5c <MX_TIM1_Init>
  MX_TIM3_Init();
 80008b6:	f000 fbe1 	bl	800107c <MX_TIM3_Init>
  MX_TIM4_Init();
 80008ba:	f000 fc39 	bl	8001130 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008be:	f000 fca7 	bl	8001210 <MX_TIM5_Init>
  MX_TIM2_Init();
 80008c2:	f000 fb83 	bl	8000fcc <MX_TIM2_Init>
  MX_ADC1_Init();
 80008c6:	f7ff fe01 	bl	80004cc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi1, RX_Buffer, BUFFER_SIZE);
 80008ca:	2208      	movs	r2, #8
 80008cc:	4908      	ldr	r1, [pc, #32]	; (80008f0 <main+0x64>)
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <main+0x68>)
 80008d0:	f002 fe36 	bl	8003540 <HAL_SPI_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  itter++;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	3301      	adds	r3, #1
 80008d8:	71fb      	strb	r3, [r7, #7]
	  aTxBuffer[0] = itter;
 80008da:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <main+0x6c>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	7013      	strb	r3, [r2, #0]
	  HAL_Delay(100);
 80008e0:	2064      	movs	r0, #100	; 0x64
 80008e2:	f001 f879 	bl	80019d8 <HAL_Delay>
	//  HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
	    // Get ADC value
//	    HAL_ADC_Start(&hadc1);
//	    HAL_ADC_PollForConversion(&hadc1, 100);
//	    AD_RES = HAL_ADC_GetValue(&hadc1);
      HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f001 f876 	bl	80019d8 <HAL_Delay>
	  itter++;
 80008ec:	e7f2      	b.n	80008d4 <main+0x48>
 80008ee:	bf00      	nop
 80008f0:	20000038 	.word	0x20000038
 80008f4:	200001a0 	.word	0x200001a0
 80008f8:	20000008 	.word	0x20000008

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fae6 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <SystemClock_Config+0xb8>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <SystemClock_Config+0xb8>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <SystemClock_Config+0xb8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <SystemClock_Config+0xbc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <SystemClock_Config+0xbc>)
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <SystemClock_Config+0xbc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000960:	2301      	movs	r3, #1
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2310      	movs	r3, #16
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f913 	bl	8002b9c <HAL_RCC_OscConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800097c:	f000 f81e 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000980:	230f      	movs	r3, #15
 8000982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fb76 	bl	800308c <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a6:	f000 f809 	bl	80009bc <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_SPI1_Init+0x60>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_SPI1_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI1_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <MX_SPI1_Init+0x5c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI1_Init+0x5c>)
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_SPI1_Init+0x5c>)
 8000a12:	f002 fd0b 	bl	800342c <HAL_SPI_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f7ff ffce 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001a0 	.word	0x200001a0
 8000a28:	40013000 	.word	0x40013000

08000a2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_SPI2_Init+0x6c>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a62:	2218      	movs	r2, #24
 8000a64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_SPI2_Init+0x68>)
 8000a80:	f002 fcd4 	bl	800342c <HAL_SPI_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000a8a:	f7ff ff97 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000e8 	.word	0x200000e8
 8000a98:	40003800 	.word	0x40003800

08000a9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a7e      	ldr	r2, [pc, #504]	; (8000cb4 <HAL_SPI_MspInit+0x218>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	f040 808b 	bne.w	8000bd6 <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	4b7c      	ldr	r3, [pc, #496]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a7b      	ldr	r2, [pc, #492]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b79      	ldr	r3, [pc, #484]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	4b75      	ldr	r3, [pc, #468]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a74      	ldr	r2, [pc, #464]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b72      	ldr	r3, [pc, #456]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000af8:	23e0      	movs	r3, #224	; 0xe0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	486a      	ldr	r0, [pc, #424]	; (8000cbc <HAL_SPI_MspInit+0x220>)
 8000b14:	f001 fe8a 	bl	800282c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000b18:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b1a:	4a6a      	ldr	r2, [pc, #424]	; (8000cc4 <HAL_SPI_MspInit+0x228>)
 8000b1c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b1e:	4b68      	ldr	r3, [pc, #416]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b20:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b26:	4b66      	ldr	r3, [pc, #408]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2c:	4b64      	ldr	r3, [pc, #400]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b32:	4b63      	ldr	r3, [pc, #396]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3a:	4b61      	ldr	r3, [pc, #388]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b40:	4b5f      	ldr	r3, [pc, #380]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b46:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b48:	4b5d      	ldr	r3, [pc, #372]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b5c      	ldr	r3, [pc, #368]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b54:	4b5a      	ldr	r3, [pc, #360]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b5a:	4859      	ldr	r0, [pc, #356]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b5c:	f001 fad4 	bl	8002108 <HAL_DMA_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000b66:	f7ff ff29 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a54      	ldr	r2, [pc, #336]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b70:	4a53      	ldr	r2, [pc, #332]	; (8000cc0 <HAL_SPI_MspInit+0x224>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000b76:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b78:	4a54      	ldr	r2, [pc, #336]	; (8000ccc <HAL_SPI_MspInit+0x230>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000b7c:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b7e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b84:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b86:	2240      	movs	r2, #64	; 0x40
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b98:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000ba0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ba6:	4b48      	ldr	r3, [pc, #288]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb2:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000bb8:	4843      	ldr	r0, [pc, #268]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000bba:	f001 faa5 	bl	8002108 <HAL_DMA_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000bc4:	f7ff fefa 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000bcc:	649a      	str	r2, [r3, #72]	; 0x48
 8000bce:	4a3e      	ldr	r2, [pc, #248]	; (8000cc8 <HAL_SPI_MspInit+0x22c>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000bd4:	e069      	b.n	8000caa <HAL_SPI_MspInit+0x20e>
  else if(spiHandle->Instance==SPI2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <HAL_SPI_MspInit+0x234>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d164      	bne.n	8000caa <HAL_SPI_MspInit+0x20e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a33      	ldr	r2, [pc, #204]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_SPI_MspInit+0x21c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_SLAVE_Pin|SPI2_MISO_SLAVE_Pin|SPI2_MOSI_SLAVE_Pin;
 8000c18:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <HAL_SPI_MspInit+0x238>)
 8000c36:	f001 fdf9 	bl	800282c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c3c:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <HAL_SPI_MspInit+0x240>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c60:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c68:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c70:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000c7e:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c80:	f001 fa42 	bl	8002108 <HAL_DMA_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 8000c8a:	f7ff fe97 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c92:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_SPI_MspInit+0x23c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2024      	movs	r0, #36	; 0x24
 8000ca0:	f001 f9fb 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ca4:	2024      	movs	r0, #36	; 0x24
 8000ca6:	f001 fa14 	bl	80020d2 <HAL_NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	200001f8 	.word	0x200001f8
 8000cc4:	40026440 	.word	0x40026440
 8000cc8:	20000258 	.word	0x20000258
 8000ccc:	40026458 	.word	0x40026458
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	20000140 	.word	0x20000140
 8000cdc:	40026058 	.word	0x40026058

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 fe0c 	bl	8001998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA1_Stream0_IRQHandler+0x10>)
 8000d8a:	f001 fae5 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200002b8 	.word	0x200002b8

08000d98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Stream1_IRQHandler+0x10>)
 8000d9e:	f001 fadb 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000360 	.word	0x20000360

08000dac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Stream2_IRQHandler+0x10>)
 8000db2:	f001 fad1 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000450 	.word	0x20000450

08000dc0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Stream3_IRQHandler+0x10>)
 8000dc6:	f001 fac7 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
 // HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000140 	.word	0x20000140

08000dd4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA1_Stream4_IRQHandler+0x10>)
 8000dda:	f001 fabd 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004b0 	.word	0x200004b0

08000de8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SPI2_IRQHandler+0x10>)
 8000dee:	f002 fd71 	bl	80038d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END SPI2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000e8 	.word	0x200000e8

08000dfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DMA2_Stream0_IRQHandler+0x10>)
 8000e02:	f001 faa9 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000088 	.word	0x20000088

08000e10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <DMA2_Stream2_IRQHandler+0x10>)
 8000e16:	f001 fa9f 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200001f8 	.word	0x200001f8

08000e24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <DMA2_Stream3_IRQHandler+0x10>)
 8000e2a:	f001 fa95 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000258 	.word	0x20000258

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f004 f821 	bl	8004edc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000e9c:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <MX_TIM1_Init+0x16c>)
 8000e9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ea0:	4b48      	ldr	r3, [pc, #288]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b47      	ldr	r3, [pc, #284]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000eac:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eba:	4b42      	ldr	r3, [pc, #264]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ec6:	483f      	ldr	r0, [pc, #252]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ec8:	f003 f848 	bl	8003f5c <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ed2:	f7ff fd73 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4838      	ldr	r0, [pc, #224]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ee4:	f003 f996 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000eee:	f7ff fd65 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ef2:	4834      	ldr	r0, [pc, #208]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000ef4:	f003 f881 	bl	8003ffa <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000efe:	f7ff fd5d 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482c      	ldr	r0, [pc, #176]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000f12:	f003 fce9 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f1c:	f7ff fd4e 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	481f      	ldr	r0, [pc, #124]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000f46:	f003 f8a7 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f50:	f7ff fd34 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	2204      	movs	r2, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000f5e:	f003 f89b 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f68:	f7ff fd28 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	2208      	movs	r2, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000f76:	f003 f88f 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000f80:	f7ff fd1c 	bl	80009bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000fa8:	f003 fd0c 	bl	80049c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000fb2:	f7ff fd03 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM1_Init+0x168>)
 8000fb8:	f000 fb2c 	bl	8001614 <HAL_TIM_MspPostInit>

}
 8000fbc:	bf00      	nop
 8000fbe:	3758      	adds	r7, #88	; 0x58
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000510 	.word	0x20000510
 8000fc8:	40010000 	.word	0x40010000

08000fcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_TIM2_Init+0xac>)
 8000ff0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ff4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_TIM2_Init+0xac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_TIM2_Init+0xac>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM2_Init+0xac>)
 8001004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001008:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_TIM2_Init+0xac>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_TIM2_Init+0xac>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <MX_TIM2_Init+0xac>)
 8001018:	f002 ffef 	bl	8003ffa <HAL_TIM_PWM_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001022:	f7ff fccb 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	4619      	mov	r1, r3
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_TIM2_Init+0xac>)
 8001036:	f003 fc57 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001040:	f7ff fcbc 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <MX_TIM2_Init+0xac>)
 800105c:	f003 f81c 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001066:	f7ff fca9 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MX_TIM2_Init+0xac>)
 800106c:	f000 fad2 	bl	8001614 <HAL_TIM_MspPostInit>

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000558 	.word	0x20000558

0800107c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_TIM3_Init+0xac>)
 80010a0:	4a22      	ldr	r2, [pc, #136]	; (800112c <MX_TIM3_Init+0xb0>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <MX_TIM3_Init+0xac>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_TIM3_Init+0xac>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <MX_TIM3_Init+0xac>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_TIM3_Init+0xac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_TIM3_Init+0xac>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_TIM3_Init+0xac>)
 80010c6:	f002 ff98 	bl	8003ffa <HAL_TIM_PWM_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010d0:	f7ff fc74 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4619      	mov	r1, r3
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_TIM3_Init+0xac>)
 80010e4:	f003 fc00 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010ee:	f7ff fc65 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f2:	2360      	movs	r3, #96	; 0x60
 80010f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM3_Init+0xac>)
 800110a:	f002 ffc5 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001114:	f7ff fc52 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM3_Init+0xac>)
 800111a:	f000 fa7b 	bl	8001614 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000408 	.word	0x20000408
 800112c:	40000400 	.word	0x40000400

08001130 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_TIM4_Init+0xd8>)
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <MX_TIM4_Init+0xdc>)
 8001156:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001158:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_TIM4_Init+0xd8>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_TIM4_Init+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_TIM4_Init+0xd8>)
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_TIM4_Init+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_TIM4_Init+0xd8>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <MX_TIM4_Init+0xd8>)
 800117a:	f002 ff3e 	bl	8003ffa <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001184:	f7ff fc1a 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4619      	mov	r1, r3
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <MX_TIM4_Init+0xd8>)
 8001198:	f003 fba6 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80011a2:	f7ff fc0b 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_TIM4_Init+0xd8>)
 80011be:	f002 ff6b 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80011c8:	f7ff fbf8 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_TIM4_Init+0xd8>)
 80011d4:	f002 ff60 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011de:	f7ff fbed 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	220c      	movs	r2, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM4_Init+0xd8>)
 80011ea:	f002 ff55 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80011f4:	f7ff fbe2 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM4_Init+0xd8>)
 80011fa:	f000 fa0b 	bl	8001614 <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000318 	.word	0x20000318
 800120c:	40000800 	.word	0x40000800

08001210 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MX_TIM5_Init+0xec>)
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <MX_TIM5_Init+0xf0>)
 8001236:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <MX_TIM5_Init+0xec>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_TIM5_Init+0xec>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_TIM5_Init+0xec>)
 8001246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_TIM5_Init+0xec>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_TIM5_Init+0xec>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <MX_TIM5_Init+0xec>)
 800125a:	f002 fece 	bl	8003ffa <HAL_TIM_PWM_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001264:	f7ff fbaa 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4619      	mov	r1, r3
 8001276:	4821      	ldr	r0, [pc, #132]	; (80012fc <MX_TIM5_Init+0xec>)
 8001278:	f003 fb36 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001282:	f7ff fb9b 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <MX_TIM5_Init+0xec>)
 800129e:	f002 fefb 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80012a8:	f7ff fb88 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2204      	movs	r2, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_TIM5_Init+0xec>)
 80012b4:	f002 fef0 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80012be:	f7ff fb7d 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2208      	movs	r2, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM5_Init+0xec>)
 80012ca:	f002 fee5 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80012d4:	f7ff fb72 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	220c      	movs	r2, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <MX_TIM5_Init+0xec>)
 80012e0:	f002 feda 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80012ea:	f7ff fb67 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80012ee:	4803      	ldr	r0, [pc, #12]	; (80012fc <MX_TIM5_Init+0xec>)
 80012f0:	f000 f990 	bl	8001614 <HAL_TIM_MspPostInit>

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200003c0 	.word	0x200003c0
 8001300:	40000c00 	.word	0x40000c00

08001304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_TIM_Base_MspInit+0x3c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10d      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_Base_MspInit+0x40>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x40>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_TIM_Base_MspInit+0x40>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001358:	d10e      	bne.n	8001378 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001376:	e135      	b.n	80015e4 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_TIM_PWM_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
}
 800139e:	e121      	b.n	80015e4 <HAL_TIM_PWM_MspInit+0x29c>
  else if(tim_pwmHandle->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_TIM_PWM_MspInit+0x88>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d114      	bne.n	80013d4 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_TIM_PWM_MspInit+0x80>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	e10d      	b.n	80015e4 <HAL_TIM_PWM_MspInit+0x29c>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40000800 	.word	0x40000800
  else if(tim_pwmHandle->Instance==TIM5)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a84      	ldr	r2, [pc, #528]	; (80015ec <HAL_TIM_PWM_MspInit+0x2a4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	f040 8102 	bne.w	80015e4 <HAL_TIM_PWM_MspInit+0x29c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_TIM_PWM_MspInit+0x2a8>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a81      	ldr	r2, [pc, #516]	; (80015f0 <HAL_TIM_PWM_MspInit+0x2a8>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <HAL_TIM_PWM_MspInit+0x2a8>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80013fc:	4b7d      	ldr	r3, [pc, #500]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 80013fe:	4a7e      	ldr	r2, [pc, #504]	; (80015f8 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001400:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001402:	4b7c      	ldr	r3, [pc, #496]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001404:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001408:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b78      	ldr	r3, [pc, #480]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800141e:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001426:	4b73      	ldr	r3, [pc, #460]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001428:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 800142e:	4b71      	ldr	r3, [pc, #452]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001434:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001436:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800143a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800143c:	4b6d      	ldr	r3, [pc, #436]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 800143e:	2204      	movs	r2, #4
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001450:	2200      	movs	r2, #0
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001454:	4867      	ldr	r0, [pc, #412]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001456:	f000 fe57 	bl	8002108 <HAL_DMA_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_TIM_PWM_MspInit+0x11c>
      Error_Handler();
 8001460:	f7ff faac 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
 800146a:	4a62      	ldr	r2, [pc, #392]	; (80015f4 <HAL_TIM_PWM_MspInit+0x2ac>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 8001472:	4a63      	ldr	r2, [pc, #396]	; (8001600 <HAL_TIM_PWM_MspInit+0x2b8>)
 8001474:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 8001478:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800147c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 800148c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001490:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001492:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 800149c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80014a2:	4b56      	ldr	r3, [pc, #344]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80014a8:	4b54      	ldr	r3, [pc, #336]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ae:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014b0:	4b52      	ldr	r3, [pc, #328]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80014b6:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80014bc:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80014c8:	484c      	ldr	r0, [pc, #304]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014ca:	f000 fe1d 	bl	8002108 <HAL_DMA_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_TIM_PWM_MspInit+0x190>
      Error_Handler();
 80014d4:	f7ff fa72 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
 80014de:	4a47      	ldr	r2, [pc, #284]	; (80015fc <HAL_TIM_PWM_MspInit+0x2b4>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 80014e6:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_TIM_PWM_MspInit+0x2c0>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 80014ec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80014f0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 80014f4:	2240      	movs	r2, #64	; 0x40
 80014f6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f8:	4b42      	ldr	r3, [pc, #264]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001504:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800150c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001514:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_NORMAL;
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_HIGH;
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 800151e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001522:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001526:	2204      	movs	r2, #4
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001532:	2200      	movs	r2, #0
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 800153c:	4831      	ldr	r0, [pc, #196]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 800153e:	f000 fde3 	bl	8002108 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_TIM_PWM_MspInit+0x204>
      Error_Handler();
 8001548:	f7ff fa38 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a2d      	ldr	r2, [pc, #180]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
 8001552:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 800155c:	621a      	str	r2, [r3, #32]
 800155e:	4a29      	ldr	r2, [pc, #164]	; (8001604 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_TIM_PWM_MspInit+0x2c8>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 800156c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001570:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001574:	2240      	movs	r2, #64	; 0x40
 8001576:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800158c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001594:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_NORMAL;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 800159e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015a2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015a6:	2204      	movs	r2, #4
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015be:	f000 fda3 	bl	8002108 <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_TIM_PWM_MspInit+0x284>
      Error_Handler();
 80015c8:	f7ff f9f8 	bl	80009bc <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_TIM_PWM_MspInit+0x2c4>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40000c00 	.word	0x40000c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	20000450 	.word	0x20000450
 80015f8:	40026040 	.word	0x40026040
 80015fc:	200004b0 	.word	0x200004b0
 8001600:	40026070 	.word	0x40026070
 8001604:	200002b8 	.word	0x200002b8
 8001608:	40026010 	.word	0x40026010
 800160c:	20000360 	.word	0x20000360
 8001610:	40026028 	.word	0x40026028

08001614 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a5b      	ldr	r2, [pc, #364]	; (80017a0 <HAL_TIM_MspPostInit+0x18c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d11f      	bne.n	8001676 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M2N_Pin|M1P_Pin|M1N_Pin;
 8001652:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001664:	2301      	movs	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	484e      	ldr	r0, [pc, #312]	; (80017a8 <HAL_TIM_MspPostInit+0x194>)
 8001670:	f001 f8dc 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001674:	e090      	b.n	8001798 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167e:	d11f      	bne.n	80016c0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2P_Pin;
 800169c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ae:	2301      	movs	r3, #1
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2P_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	483b      	ldr	r0, [pc, #236]	; (80017a8 <HAL_TIM_MspPostInit+0x194>)
 80016ba:	f001 f8b7 	bl	800282c <HAL_GPIO_Init>
}
 80016be:	e06b      	b.n	8001798 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM3)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a39      	ldr	r2, [pc, #228]	; (80017ac <HAL_TIM_MspPostInit+0x198>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d11e      	bne.n	8001708 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3P_Pin;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M3P_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	482b      	ldr	r0, [pc, #172]	; (80017b0 <HAL_TIM_MspPostInit+0x19c>)
 8001702:	f001 f893 	bl	800282c <HAL_GPIO_Init>
}
 8001706:	e047      	b.n	8001798 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM4)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_TIM_MspPostInit+0x1a0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d11f      	bne.n	8001752 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3N_Pin|M4N_Pin|M4P_Pin;
 800172e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001740:	2302      	movs	r3, #2
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4819      	ldr	r0, [pc, #100]	; (80017b0 <HAL_TIM_MspPostInit+0x19c>)
 800174c:	f001 f86e 	bl	800282c <HAL_GPIO_Init>
}
 8001750:	e022      	b.n	8001798 <HAL_TIM_MspPostInit+0x184>
  else if(timHandle->Instance==TIM5)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <HAL_TIM_MspPostInit+0x1a4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d11d      	bne.n	8001798 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_TIM_MspPostInit+0x190>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dshot1_Pin|Dshot2_Pin|Dshot3_Pin|Dshot4_Pin;
 8001778:	230f      	movs	r3, #15
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001788:	2302      	movs	r3, #2
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	4619      	mov	r1, r3
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <HAL_TIM_MspPostInit+0x194>)
 8001794:	f001 f84a 	bl	800282c <HAL_GPIO_Init>
}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40000800 	.word	0x40000800
 80017b8:	40000c00 	.word	0x40000c00

080017bc <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART6_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART6_UART_Init+0x4c>)
 80017f4:	f003 f938 	bl	8004a68 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f7ff f8dd 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200005a0 	.word	0x200005a0
 800180c:	40011400 	.word	0x40011400

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_UART_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12c      	bne.n	800188c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_UART_MspInit+0x88>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_UART_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800186a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800187c:	2308      	movs	r3, #8
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_MspInit+0x8c>)
 8001888:	f000 ffd0 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40011400 	.word	0x40011400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <Reset_Handler>:
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x12>
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopFillZerobss+0x16>)
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1a>)
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1e>)
 80018aa:	2300      	movs	r3, #0
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:
 80018ae:	58d4      	ldr	r4, [r2, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:
 80018b4:	18c4      	adds	r4, r0, r3
 80018b6:	428c      	cmp	r4, r1
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x22>)
 80018bc:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <LoopFillZerobss+0x26>)
 80018be:	2300      	movs	r3, #0
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:
 80018c6:	42a2      	cmp	r2, r4
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>
 80018ca:	f7ff fab5 	bl	8000e38 <SystemInit>
 80018ce:	f003 fae1 	bl	8004e94 <__libc_init_array>
 80018d2:	f7fe ffdb 	bl	800088c <main>
 80018d6:	4770      	bx	lr
 80018d8:	20010000 	.word	0x20010000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	2000001c 	.word	0x2000001c
 80018e4:	08004f34 	.word	0x08004f34
 80018e8:	2000001c 	.word	0x2000001c
 80018ec:	200005e8 	.word	0x200005e8

080018f0 <ADC_IRQHandler>:
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 fbb1 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f000 f808 	bl	8001938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff f9da 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x54>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x58>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fbc9 	bl	80020ee <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e00e      	b.n	8001984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0f      	cmp	r3, #15
 800196a:	d80a      	bhi.n	8001982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800196c:	2200      	movs	r2, #0
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 fb91 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_InitTick+0x5c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000010 	.word	0x20000010
 8001990:	20000018 	.word	0x20000018
 8001994:	20000014 	.word	0x20000014

08001998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x20>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x24>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_IncTick+0x24>)
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000018 	.word	0x20000018
 80019bc:	200005e4 	.word	0x200005e4

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_GetTick+0x14>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200005e4 	.word	0x200005e4

080019d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff ffee 	bl	80019c0 <HAL_GetTick>
 80019e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d005      	beq.n	80019fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_Delay+0x44>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fe:	bf00      	nop
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d8f7      	bhi.n	8001a00 <HAL_Delay+0x28>
  {
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000018 	.word	0x20000018

08001a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e033      	b.n	8001a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fd96 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a66:	f023 0302 	bic.w	r3, r3, #2
 8001a6a:	f043 0202 	orr.w	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f93a 	bl	8001cec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1c>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e105      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x228>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b09      	cmp	r3, #9
 8001ad2:	d925      	bls.n	8001b20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68d9      	ldr	r1, [r3, #12]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b1e      	subs	r3, #30
 8001aea:	2207      	movs	r2, #7
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43da      	mvns	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	400a      	ands	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68d9      	ldr	r1, [r3, #12]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4403      	add	r3, r0
 8001b12:	3b1e      	subs	r3, #30
 8001b14:	409a      	lsls	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e022      	b.n	8001b66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	2207      	movs	r2, #7
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	400a      	ands	r2, r1
 8001b42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4403      	add	r3, r0
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d824      	bhi.n	8001bb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b05      	subs	r3, #5
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b05      	subs	r3, #5
 8001baa:	fa00 f203 	lsl.w	r2, r0, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb6:	e04c      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d824      	bhi.n	8001c0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b23      	subs	r3, #35	; 0x23
 8001bd2:	221f      	movs	r2, #31
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	400a      	ands	r2, r1
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b23      	subs	r3, #35	; 0x23
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
 8001c08:	e023      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b41      	subs	r3, #65	; 0x41
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	400a      	ands	r2, r1
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	3b41      	subs	r3, #65	; 0x41
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_ADC_ConfigChannel+0x234>)
 8001c54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <HAL_ADC_ConfigChannel+0x238>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1cc>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_ADC_ConfigChannel+0x238>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d123      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d003      	beq.n	8001c8e <HAL_ADC_ConfigChannel+0x1e6>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b11      	cmp	r3, #17
 8001c8c:	d11b      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d111      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_ConfigChannel+0x23c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_ADC_ConfigChannel+0x240>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	0c9a      	lsrs	r2, r3, #18
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb8:	e002      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f9      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40012300 	.word	0x40012300
 8001ce0:	40012000 	.word	0x40012000
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <ADC_Init+0x1f0>)
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	021a      	lsls	r2, r3, #8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	4a58      	ldr	r2, [pc, #352]	; (8001ee0 <ADC_Init+0x1f4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	e00f      	b.n	8001dea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0202 	bic.w	r2, r2, #2
 8001df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7e1b      	ldrb	r3, [r3, #24]
 8001e04:	005a      	lsls	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	3b01      	subs	r3, #1
 8001e44:	035a      	lsls	r2, r3, #13
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	e007      	b.n	8001e60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	051a      	lsls	r2, r3, #20
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ea2:	025a      	lsls	r2, r3, #9
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	029a      	lsls	r2, r3, #10
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40012300 	.word	0x40012300
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff3e 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff31 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fc54 	bl	80019c0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e099      	b.n	8002258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002144:	e00f      	b.n	8002166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002146:	f7ff fc3b 	bl	80019c0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b05      	cmp	r3, #5
 8002152:	d908      	bls.n	8002166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2203      	movs	r2, #3
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e078      	b.n	8002258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e8      	bne.n	8002146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_DMA_Init+0x158>)
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d107      	bne.n	80021d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4313      	orrs	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f023 0307 	bic.w	r3, r3, #7
 80021e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d117      	bne.n	800222a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fa91 	bl	8002734 <DMA_CheckFifoParam>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2240      	movs	r2, #64	; 0x40
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002226:	2301      	movs	r3, #1
 8002228:	e016      	b.n	8002258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa48 	bl	80026c8 <DMA_CalcBaseAndBitshift>
 8002238:	4603      	mov	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	223f      	movs	r2, #63	; 0x3f
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	f010803f 	.word	0xf010803f

08002264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_DMA_Start_IT+0x26>
 8002286:	2302      	movs	r3, #2
 8002288:	e040      	b.n	800230c <HAL_DMA_Start_IT+0xa8>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d12f      	bne.n	80022fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f9da 	bl	800266c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0216 	orr.w	r2, r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0208 	orr.w	r2, r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e005      	b.n	800230a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800230a:	7dfb      	ldrb	r3, [r7, #23]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d004      	beq.n	8002332 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00c      	b.n	800234c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2205      	movs	r2, #5
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <HAL_DMA_IRQHandler+0x258>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a92      	ldr	r2, [pc, #584]	; (80025b4 <HAL_DMA_IRQHandler+0x25c>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	2208      	movs	r2, #8
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2208      	movs	r2, #8
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fe:	2204      	movs	r2, #4
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2210      	movs	r2, #16
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d043      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d03c      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2210      	movs	r2, #16
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d108      	bne.n	8002488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d024      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e01f      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e016      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0208 	bic.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2220      	movs	r2, #32
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 808e 	beq.w	80025f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8086 	beq.w	80025f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	2220      	movs	r2, #32
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d136      	bne.n	8002570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0216 	bic.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_DMA_IRQHandler+0x1da>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002546:	223f      	movs	r2, #63	; 0x3f
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d07d      	beq.n	8002662 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
        }
        return;
 800256e:	e078      	b.n	8002662 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01c      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	2b00      	cmp	r3, #0
 8002592:	d030      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e02b      	b.n	80025f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d027      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
 80025ae:	e022      	b.n	80025f6 <HAL_DMA_IRQHandler+0x29e>
 80025b0:	20000010 	.word	0x20000010
 80025b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0210 	bic.w	r2, r2, #16
 80025d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d032      	beq.n	8002664 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d022      	beq.n	8002650 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3301      	adds	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	429a      	cmp	r2, r3
 800262c:	d307      	bcc.n	800263e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f2      	bne.n	8002622 <HAL_DMA_IRQHandler+0x2ca>
 800263c:	e000      	b.n	8002640 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800263e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e000      	b.n	8002664 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002662:	bf00      	nop
    }
  }
}
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop

0800266c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b40      	cmp	r3, #64	; 0x40
 8002698:	d108      	bne.n	80026ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026aa:	e007      	b.n	80026bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3b10      	subs	r3, #16
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <DMA_CalcBaseAndBitshift+0x64>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <DMA_CalcBaseAndBitshift+0x68>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d909      	bls.n	800270a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	1d1a      	adds	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	; 0x58
 8002708:	e007      	b.n	800271a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	aaaaaaab 	.word	0xaaaaaaab
 8002730:	08004f1c 	.word	0x08004f1c

08002734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11f      	bne.n	800278e <DMA_CheckFifoParam+0x5a>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d856      	bhi.n	8002802 <DMA_CheckFifoParam+0xce>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <DMA_CheckFifoParam+0x28>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	0800277f 	.word	0x0800277f
 8002764:	0800276d 	.word	0x0800276d
 8002768:	08002803 	.word	0x08002803
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d046      	beq.n	8002806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e043      	b.n	8002806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002786:	d140      	bne.n	800280a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e03d      	b.n	800280a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d121      	bne.n	80027dc <DMA_CheckFifoParam+0xa8>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d837      	bhi.n	800280e <DMA_CheckFifoParam+0xda>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <DMA_CheckFifoParam+0x70>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bb 	.word	0x080027bb
 80027ac:	080027b5 	.word	0x080027b5
 80027b0:	080027cd 	.word	0x080027cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e030      	b.n	800281c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d025      	beq.n	8002812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ca:	e022      	b.n	8002812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d4:	d11f      	bne.n	8002816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027da:	e01c      	b.n	8002816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d903      	bls.n	80027ea <DMA_CheckFifoParam+0xb6>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d003      	beq.n	80027f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e8:	e018      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      break;
 80027ee:	e015      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e00b      	b.n	800281a <DMA_CheckFifoParam+0xe6>
      break;
 8002802:	bf00      	nop
 8002804:	e00a      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e008      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e006      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e004      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;   
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
    }
  } 
  
  return status; 
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e159      	b.n	8002afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8148 	bne.w	8002af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a2 	beq.w	8002af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a49      	ldr	r2, [pc, #292]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x202>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_GPIO_Init+0x2f4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x1fe>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a47      	ldr	r2, [pc, #284]	; (8002b24 <HAL_GPIO_Init+0x2f8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <HAL_GPIO_Init+0x2fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x1f6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x1f2>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a40:	4935      	ldr	r1, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a72:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9c:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	f67f aea2 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b50:	e003      	b.n	8002b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b78:	887a      	ldrh	r2, [r7, #2]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	041a      	lsls	r2, r3, #16
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	400b      	ands	r3, r1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e264      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d075      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bba:	4ba3      	ldr	r3, [pc, #652]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d00c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc6:	4ba0      	ldr	r3, [pc, #640]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d112      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd2:	4b9d      	ldr	r3, [pc, #628]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	4b99      	ldr	r3, [pc, #612]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05b      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d157      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e23f      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCC_OscConfig+0x74>
 8002c02:	4b91      	ldr	r3, [pc, #580]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a90      	ldr	r2, [pc, #576]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e01d      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x98>
 8002c1a:	4b8b      	ldr	r3, [pc, #556]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a8a      	ldr	r2, [pc, #552]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0xb0>
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a83      	ldr	r2, [pc, #524]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c54:	f7fe feb4 	bl	80019c0 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c5c:	f7fe feb0 	bl	80019c0 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b64      	cmp	r3, #100	; 0x64
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e204      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fea0 	bl	80019c0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fe9c 	bl	80019c0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1f0      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d063      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cbe:	4b62      	ldr	r3, [pc, #392]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d11c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cca:	4b5f      	ldr	r3, [pc, #380]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b5c      	ldr	r3, [pc, #368]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x152>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e1c4      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4952      	ldr	r1, [pc, #328]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b4f      	ldr	r3, [pc, #316]	; (8002e4c <HAL_RCC_OscConfig+0x2b0>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d12:	f7fe fe55 	bl	80019c0 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fe51 	bl	80019c0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e1a5      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4940      	ldr	r1, [pc, #256]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_OscConfig+0x2b0>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe fe34 	bl	80019c0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fe30 	bl	80019c0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e184      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d030      	beq.n	8002de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_OscConfig+0x2b4>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fe14 	bl	80019c0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fe10 	bl	80019c0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e164      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x200>
 8002dba:	e015      	b.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_OscConfig+0x2b4>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fdfd 	bl	80019c0 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dca:	f7fe fdf9 	bl	80019c0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e14d      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a0 	beq.w	8002f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x2b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d121      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_OscConfig+0x2b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_RCC_OscConfig+0x2b8>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fdbf 	bl	80019c0 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	e011      	b.n	8002e6a <HAL_RCC_OscConfig+0x2ce>
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	42470000 	.word	0x42470000
 8002e50:	42470e80 	.word	0x42470e80
 8002e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fe fdb2 	bl	80019c0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e106      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCC_OscConfig+0x4e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x2f0>
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a80      	ldr	r2, [pc, #512]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x32a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x312>
 8002e94:	4b7b      	ldr	r3, [pc, #492]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a7a      	ldr	r2, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x32a>
 8002eae:	4b75      	ldr	r3, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a74      	ldr	r2, [pc, #464]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a71      	ldr	r2, [pc, #452]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d015      	beq.n	8002efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe fd77 	bl	80019c0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fe fd73 	bl	80019c0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0c5      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ee      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x33a>
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe fd61 	bl	80019c0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe fd5d 	bl	80019c0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0af      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a55      	ldr	r2, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 809b 	beq.w	8003076 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d05c      	beq.n	8003006 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d141      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fd31 	bl	80019c0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fd2d 	bl	80019c0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e081      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	4937      	ldr	r1, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x4ec>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fd06 	bl	80019c0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fd02 	bl	80019c0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e056      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x41c>
 8002fd6:	e04e      	b.n	8003076 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <HAL_RCC_OscConfig+0x4ec>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fde:	f7fe fcef 	bl	80019c0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe fceb 	bl	80019c0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e03f      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x44a>
 8003004:	e037      	b.n	8003076 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e032      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_RCC_OscConfig+0x4e8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d028      	beq.n	8003072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d121      	bne.n	8003072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d11a      	bne.n	8003072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003042:	4013      	ands	r3, r2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003048:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d107      	bne.n	8003072 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40007000 	.word	0x40007000
 8003084:	40023800 	.word	0x40023800
 8003088:	42470060 	.word	0x42470060

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0cc      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b68      	ldr	r3, [pc, #416]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b65      	ldr	r3, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e067      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4934      	ldr	r1, [pc, #208]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fc20 	bl	80019c0 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fc1c 	bl	80019c0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fb80 	bl	8001938 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	08004f04 	.word	0x08004f04
 8003250:	20000010 	.word	0x20000010
 8003254:	20000014 	.word	0x20000014

08003258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800325e:	2100      	movs	r1, #0
 8003260:	6079      	str	r1, [r7, #4]
 8003262:	2100      	movs	r1, #0
 8003264:	60f9      	str	r1, [r7, #12]
 8003266:	2100      	movs	r1, #0
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800326a:	2100      	movs	r1, #0
 800326c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326e:	4952      	ldr	r1, [pc, #328]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003270:	6889      	ldr	r1, [r1, #8]
 8003272:	f001 010c 	and.w	r1, r1, #12
 8003276:	2908      	cmp	r1, #8
 8003278:	d00d      	beq.n	8003296 <HAL_RCC_GetSysClockFreq+0x3e>
 800327a:	2908      	cmp	r1, #8
 800327c:	f200 8094 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x150>
 8003280:	2900      	cmp	r1, #0
 8003282:	d002      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x32>
 8003284:	2904      	cmp	r1, #4
 8003286:	d003      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x38>
 8003288:	e08e      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800328a:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <HAL_RCC_GetSysClockFreq+0x164>)
 800328c:	60bb      	str	r3, [r7, #8]
       break;
 800328e:	e08e      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003292:	60bb      	str	r3, [r7, #8]
      break;
 8003294:	e08b      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003296:	4948      	ldr	r1, [pc, #288]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003298:	6849      	ldr	r1, [r1, #4]
 800329a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800329e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a0:	4945      	ldr	r1, [pc, #276]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032a2:	6849      	ldr	r1, [r1, #4]
 80032a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80032a8:	2900      	cmp	r1, #0
 80032aa:	d024      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ac:	4942      	ldr	r1, [pc, #264]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ae:	6849      	ldr	r1, [r1, #4]
 80032b0:	0989      	lsrs	r1, r1, #6
 80032b2:	4608      	mov	r0, r1
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032bc:	f04f 0500 	mov.w	r5, #0
 80032c0:	ea00 0204 	and.w	r2, r0, r4
 80032c4:	ea01 0305 	and.w	r3, r1, r5
 80032c8:	493d      	ldr	r1, [pc, #244]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80032ca:	fb01 f003 	mul.w	r0, r1, r3
 80032ce:	2100      	movs	r1, #0
 80032d0:	fb01 f102 	mul.w	r1, r1, r2
 80032d4:	1844      	adds	r4, r0, r1
 80032d6:	493a      	ldr	r1, [pc, #232]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x168>)
 80032d8:	fba2 0101 	umull	r0, r1, r2, r1
 80032dc:	1863      	adds	r3, r4, r1
 80032de:	4619      	mov	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	f7fc ff74 	bl	80001d4 <__aeabi_uldivmod>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4613      	mov	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e04a      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f6:	4b30      	ldr	r3, [pc, #192]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	461a      	mov	r2, r3
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003306:	f04f 0100 	mov.w	r1, #0
 800330a:	ea02 0400 	and.w	r4, r2, r0
 800330e:	ea03 0501 	and.w	r5, r3, r1
 8003312:	4620      	mov	r0, r4
 8003314:	4629      	mov	r1, r5
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	014b      	lsls	r3, r1, #5
 8003320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003324:	0142      	lsls	r2, r0, #5
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	1b00      	subs	r0, r0, r4
 800332c:	eb61 0105 	sbc.w	r1, r1, r5
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	018b      	lsls	r3, r1, #6
 800333a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800333e:	0182      	lsls	r2, r0, #6
 8003340:	1a12      	subs	r2, r2, r0
 8003342:	eb63 0301 	sbc.w	r3, r3, r1
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	00d9      	lsls	r1, r3, #3
 8003350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003354:	00d0      	lsls	r0, r2, #3
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	1912      	adds	r2, r2, r4
 800335c:	eb45 0303 	adc.w	r3, r5, r3
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	0299      	lsls	r1, r3, #10
 800336a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800336e:	0290      	lsls	r0, r2, #10
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	461a      	mov	r2, r3
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f7fc ff28 	bl	80001d4 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	60bb      	str	r3, [r7, #8]
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_GetSysClockFreq+0x164>)
 80033aa:	60bb      	str	r3, [r7, #8]
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	68bb      	ldr	r3, [r7, #8]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	017d7840 	.word	0x017d7840

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000010 	.word	0x20000010

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0a9b      	lsrs	r3, r3, #10
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	08004f14 	.word	0x08004f14

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffdc 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0b5b      	lsrs	r3, r3, #13
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08004f14 	.word	0x08004f14

0800342c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07b      	b.n	8003536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344e:	d009      	beq.n	8003464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
 8003456:	e005      	b.n	8003464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fb0c 	bl	8000a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0104 	and.w	r1, r3, #4
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0210 	and.w	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d110      	bne.n	800357c <HAL_SPI_Receive_DMA+0x3c>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003562:	d10b      	bne.n	800357c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2204      	movs	r2, #4
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8ac 	bl	80036d0 <HAL_SPI_TransmitReceive_DMA>
 8003578:	4603      	mov	r3, r0
 800357a:	e09f      	b.n	80036bc <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_SPI_Receive_DMA+0x4a>
 8003586:	2302      	movs	r3, #2
 8003588:	e098      	b.n	80036bc <HAL_SPI_Receive_DMA+0x17c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035a2:	e086      	b.n	80036b2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <HAL_SPI_Receive_DMA+0x70>
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d102      	bne.n	80035b6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b4:	e07d      	b.n	80036b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2204      	movs	r2, #4
 80035ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f6:	d10f      	bne.n	8003618 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003616:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <HAL_SPI_Receive_DMA+0x184>)
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <HAL_SPI_Receive_DMA+0x188>)
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	4a27      	ldr	r2, [pc, #156]	; (80036cc <HAL_SPI_Receive_DMA+0x18c>)
 800362e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	2200      	movs	r2, #0
 8003636:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	4619      	mov	r1, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003650:	f7fe fe08 	bl	8002264 <HAL_DMA_Start_IT>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003672:	e01e      	b.n	80036b2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d007      	beq.n	8003692 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0220 	orr.w	r2, r2, #32
 80036a0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	08003c5d 	.word	0x08003c5d
 80036c8:	08003b25 	.word	0x08003b25
 80036cc:	08003c95 	.word	0x08003c95

080036d0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0e3      	b.n	80038b8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036fe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003706:	7dbb      	ldrb	r3, [r7, #22]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d00d      	beq.n	8003728 <HAL_SPI_TransmitReceive_DMA+0x58>
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003712:	d106      	bne.n	8003722 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_SPI_TransmitReceive_DMA+0x52>
 800371c:	7dbb      	ldrb	r3, [r7, #22]
 800371e:	2b04      	cmp	r3, #4
 8003720:	d002      	beq.n	8003728 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003726:	e0c2      	b.n	80038ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003734:	887b      	ldrh	r3, [r7, #2]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373e:	e0b6      	b.n	80038ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b04      	cmp	r3, #4
 800374a:	d003      	beq.n	8003754 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2205      	movs	r2, #5
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	887a      	ldrh	r2, [r7, #2]
 8003776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b04      	cmp	r3, #4
 8003794:	d108      	bne.n	80037a8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a48      	ldr	r2, [pc, #288]	; (80038c4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037a6:	e007      	b.n	80037b8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	4a46      	ldr	r2, [pc, #280]	; (80038c8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b4:	4a45      	ldr	r2, [pc, #276]	; (80038cc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037bc:	4a44      	ldr	r2, [pc, #272]	; (80038d0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80037be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2200      	movs	r2, #0
 80037c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	4619      	mov	r1, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80037e0:	f7fe fd40 	bl	8002264 <HAL_DMA_Start_IT>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003802:	e054      	b.n	80038ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003820:	2200      	movs	r2, #0
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	2200      	movs	r2, #0
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	2200      	movs	r2, #0
 8003832:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4619      	mov	r1, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800384c:	f7fe fd0a 	bl	8002264 <HAL_DMA_Start_IT>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	f043 0210 	orr.w	r2, r3, #16
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800386e:	e01e      	b.n	80038ae <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d007      	beq.n	800388e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0220 	orr.w	r2, r2, #32
 800389c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f042 0202 	orr.w	r2, r2, #2
 80038ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	08003c5d 	.word	0x08003c5d
 80038c4:	08003b25 	.word	0x08003b25
 80038c8:	08003c79 	.word	0x08003c79
 80038cc:	08003bcd 	.word	0x08003bcd
 80038d0:	08003c95 	.word	0x08003c95

080038d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	099b      	lsrs	r3, r3, #6
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
    return;
 8003916:	e0d7      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00a      	beq.n	800393a <HAL_SPI_IRQHandler+0x66>
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	09db      	lsrs	r3, r3, #7
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
    return;
 8003938:	e0c6      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_SPI_IRQHandler+0x8c>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80b4 	beq.w	8003ac8 <HAL_SPI_IRQHandler+0x1f4>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80ad 	beq.w	8003ac8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d023      	beq.n	80039c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b03      	cmp	r3, #3
 8003984:	d011      	beq.n	80039aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0204 	orr.w	r2, r3, #4
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	e00b      	b.n	80039c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]
        return;
 80039c0:	e082      	b.n	8003ac8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d014      	beq.n	80039f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00c      	beq.n	8003a1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f043 0208 	orr.w	r2, r3, #8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04f      	beq.n	8003ac6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d104      	bne.n	8003a52 <HAL_SPI_IRQHandler+0x17e>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d034      	beq.n	8003abc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0203 	bic.w	r2, r2, #3
 8003a60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d011      	beq.n	8003a8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_SPI_IRQHandler+0x1fc>)
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fc4c 	bl	8002314 <HAL_DMA_Abort_IT>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	4a0d      	ldr	r2, [pc, #52]	; (8003ad0 <HAL_SPI_IRQHandler+0x1fc>)
 8003a9c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fc36 	bl	8002314 <HAL_DMA_Abort_IT>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003aba:	e003      	b.n	8003ac4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f827 	bl	8003b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003ac2:	e000      	b.n	8003ac6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003ac4:	bf00      	nop
    return;
 8003ac6:	bf00      	nop
  }
}
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08003cd5 	.word	0x08003cd5

08003ad4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b32:	f7fd ff45 	bl	80019c0 <HAL_GetTick>
 8003b36:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b46:	d03b      	beq.n	8003bc0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0220 	bic.w	r2, r2, #32
 8003b56:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <SPI_DMAReceiveCplt+0x58>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b68:	d108      	bne.n	8003b7c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0203 	bic.w	r2, r2, #3
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e007      	b.n	8003b8c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	2164      	movs	r1, #100	; 0x64
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f93b 	bl	8003e0c <SPI_EndRxTransaction>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff ffa9 	bl	8003b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003bbe:	e002      	b.n	8003bc6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f7fc fe43 	bl	800084c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bda:	f7fd fef1 	bl	80019c0 <HAL_GetTick>
 8003bde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bee:	d02f      	beq.n	8003c50 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0220 	bic.w	r2, r2, #32
 8003bfe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	2164      	movs	r1, #100	; 0x64
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f967 	bl	8003ed8 <SPI_EndRxTxTransaction>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0203 	bic.w	r2, r2, #3
 8003c2a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff ff61 	bl	8003b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003c4e:	e002      	b.n	8003c56 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff ff3f 	bl	8003ad4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff3c 	bl	8003ae8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff38 	bl	8003afc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0203 	bic.w	r2, r2, #3
 8003cb0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ff22 	bl	8003b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff ff0e 	bl	8003b10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d0c:	f7fd fe58 	bl	80019c0 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	4413      	add	r3, r2
 8003d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d1c:	f7fd fe50 	bl	80019c0 <HAL_GetTick>
 8003d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	015b      	lsls	r3, r3, #5
 8003d28:	0d1b      	lsrs	r3, r3, #20
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d32:	e054      	b.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d050      	beq.n	8003dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d3c:	f7fd fe40 	bl	80019c0 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d902      	bls.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d13d      	bne.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6a:	d111      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d004      	beq.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d107      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d98:	d10f      	bne.n	8003dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e017      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d19b      	bne.n	8003d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	20000010 	.word	0x20000010

08003e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e20:	d111      	bne.n	8003e46 <SPI_EndRxTransaction+0x3a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2a:	d004      	beq.n	8003e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e34:	d107      	bne.n	8003e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e4e:	d12a      	bne.n	8003ea6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d012      	beq.n	8003e80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff49 	bl	8003cfc <SPI_WaitFlagStateUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02d      	beq.n	8003ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e026      	b.n	8003ece <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	2101      	movs	r1, #1
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7ff ff36 	bl	8003cfc <SPI_WaitFlagStateUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01a      	beq.n	8003ecc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e013      	b.n	8003ece <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2101      	movs	r1, #1
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ff23 	bl	8003cfc <SPI_WaitFlagStateUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e000      	b.n	8003ece <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <SPI_EndRxTxTransaction+0x7c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <SPI_EndRxTxTransaction+0x80>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0d5b      	lsrs	r3, r3, #21
 8003ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ef4:	fb02 f303 	mul.w	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f02:	d112      	bne.n	8003f2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2180      	movs	r1, #128	; 0x80
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fef4 	bl	8003cfc <SPI_WaitFlagStateUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e00f      	b.n	8003f4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d0f2      	beq.n	8003f2a <SPI_EndRxTxTransaction+0x52>
 8003f44:	e000      	b.n	8003f48 <SPI_EndRxTxTransaction+0x70>
        break;
 8003f46:	bf00      	nop
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000010 	.word	0x20000010
 8003f58:	165e9f81 	.word	0x165e9f81

08003f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e041      	b.n	8003ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd f9be 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3304      	adds	r3, #4
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 f9fe 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e041      	b.n	8004090 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd f991 	bl	8001348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 f9af 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0ac      	b.n	800420c <HAL_TIM_PWM_ConfigChannel+0x174>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	f200 809f 	bhi.w	8004200 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	08004201 	.word	0x08004201
 80040d0:	08004201 	.word	0x08004201
 80040d4:	08004201 	.word	0x08004201
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	08004201 	.word	0x08004201
 80040e0:	08004201 	.word	0x08004201
 80040e4:	08004201 	.word	0x08004201
 80040e8:	0800417f 	.word	0x0800417f
 80040ec:	08004201 	.word	0x08004201
 80040f0:	08004201 	.word	0x08004201
 80040f4:	08004201 	.word	0x08004201
 80040f8:	080041bf 	.word	0x080041bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9ca 	bl	800449c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	619a      	str	r2, [r3, #24]
      break;
 800413a:	e062      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa10 	bl	8004568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
      break;
 800417c:	e041      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fa5b 	bl	8004640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0208 	orr.w	r2, r2, #8
 8004198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0204 	bic.w	r2, r2, #4
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	61da      	str	r2, [r3, #28]
      break;
 80041bc:	e021      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 faa5 	bl	8004714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	021a      	lsls	r2, r3, #8
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	61da      	str	r2, [r3, #28]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIM_ConfigClockSource+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e0b3      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x180>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800424a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d03e      	beq.n	80042e4 <HAL_TIM_ConfigClockSource+0xd0>
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426a:	f200 8087 	bhi.w	800437c <HAL_TIM_ConfigClockSource+0x168>
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004272:	f000 8085 	beq.w	8004380 <HAL_TIM_ConfigClockSource+0x16c>
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427a:	d87f      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 800427c:	2b70      	cmp	r3, #112	; 0x70
 800427e:	d01a      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xa2>
 8004280:	2b70      	cmp	r3, #112	; 0x70
 8004282:	d87b      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d050      	beq.n	800432a <HAL_TIM_ConfigClockSource+0x116>
 8004288:	2b60      	cmp	r3, #96	; 0x60
 800428a:	d877      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 800428c:	2b50      	cmp	r3, #80	; 0x50
 800428e:	d03c      	beq.n	800430a <HAL_TIM_ConfigClockSource+0xf6>
 8004290:	2b50      	cmp	r3, #80	; 0x50
 8004292:	d873      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d058      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x136>
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d86f      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d064      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x156>
 80042a0:	2b30      	cmp	r3, #48	; 0x30
 80042a2:	d86b      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d060      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x156>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d867      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x168>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d05c      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x156>
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d05a      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042b4:	e062      	b.n	800437c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6899      	ldr	r1, [r3, #8]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f000 faef 	bl	80048a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	609a      	str	r2, [r3, #8]
      break;
 80042e2:	e04e      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6899      	ldr	r1, [r3, #8]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f000 fad8 	bl	80048a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004306:	609a      	str	r2, [r3, #8]
      break;
 8004308:	e03b      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6859      	ldr	r1, [r3, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	461a      	mov	r2, r3
 8004318:	f000 fa4c 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2150      	movs	r1, #80	; 0x50
 8004322:	4618      	mov	r0, r3
 8004324:	f000 faa5 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004328:	e02b      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	461a      	mov	r2, r3
 8004338:	f000 fa6b 	bl	8004812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2160      	movs	r1, #96	; 0x60
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fa95 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004348:	e01b      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fa2c 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa85 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004368:	e00b      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f000 fa7c 	bl	8004872 <TIM_ITRx_SetConfig>
        break;
 800437a:	e002      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004380:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a34      	ldr	r2, [pc, #208]	; (8004480 <TIM_Base_SetConfig+0xe4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00f      	beq.n	80043d4 <TIM_Base_SetConfig+0x38>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x38>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a31      	ldr	r2, [pc, #196]	; (8004484 <TIM_Base_SetConfig+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x38>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a30      	ldr	r2, [pc, #192]	; (8004488 <TIM_Base_SetConfig+0xec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a2f      	ldr	r2, [pc, #188]	; (800448c <TIM_Base_SetConfig+0xf0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a25      	ldr	r2, [pc, #148]	; (8004480 <TIM_Base_SetConfig+0xe4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a22      	ldr	r2, [pc, #136]	; (8004484 <TIM_Base_SetConfig+0xe8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a21      	ldr	r2, [pc, #132]	; (8004488 <TIM_Base_SetConfig+0xec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a20      	ldr	r2, [pc, #128]	; (800448c <TIM_Base_SetConfig+0xf0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <TIM_Base_SetConfig+0xf4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <TIM_Base_SetConfig+0xf8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <TIM_Base_SetConfig+0xfc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <TIM_Base_SetConfig+0xe4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d103      	bne.n	800446c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	615a      	str	r2, [r3, #20]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800
 800448c:	40000c00 	.word	0x40000c00
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800

0800449c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0302 	bic.w	r3, r3, #2
 80044e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <TIM_OC1_SetConfig+0xc8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10c      	bne.n	8004512 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0308 	bic.w	r3, r3, #8
 80044fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <TIM_OC1_SetConfig+0xc8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	40010000 	.word	0x40010000

08004568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0210 	bic.w	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0320 	bic.w	r3, r3, #32
 80045b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <TIM_OC2_SetConfig+0xd4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10d      	bne.n	80045e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a15      	ldr	r2, [pc, #84]	; (800463c <TIM_OC2_SetConfig+0xd4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d113      	bne.n	8004614 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000

08004640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <TIM_OC3_SetConfig+0xd0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10d      	bne.n	80046ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <TIM_OC3_SetConfig+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d113      	bne.n	80046ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000

08004714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	031b      	lsls	r3, r3, #12
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <TIM_OC4_SetConfig+0x9c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d109      	bne.n	8004788 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800477a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40010000 	.word	0x40010000

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e050      	b.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d018      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d013      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00e      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d009      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d10c      	bne.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4313      	orrs	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40014000 	.word	0x40014000

080049c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049dc:	2302      	movs	r3, #2
 80049de:	e03d      	b.n	8004a5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e03f      	b.n	8004afa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d106      	bne.n	8004a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc febe 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	; 0x24
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f829 	bl	8004b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	b09f      	sub	sp, #124	; 0x7c
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	68d9      	ldr	r1, [r3, #12]
 8004b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	ea40 0301 	orr.w	r3, r0, r1
 8004b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b48:	f021 010c 	bic.w	r1, r1, #12
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b52:	430b      	orrs	r3, r1
 8004b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b62:	6999      	ldr	r1, [r3, #24]
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	ea40 0301 	orr.w	r3, r0, r1
 8004b6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4bc5      	ldr	r3, [pc, #788]	; (8004e88 <UART_SetConfig+0x384>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d004      	beq.n	8004b82 <UART_SetConfig+0x7e>
 8004b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4bc3      	ldr	r3, [pc, #780]	; (8004e8c <UART_SetConfig+0x388>)
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d103      	bne.n	8004b8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b82:	f7fe fc3f 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 8004b86:	6778      	str	r0, [r7, #116]	; 0x74
 8004b88:	e002      	b.n	8004b90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b8a:	f7fe fc27 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004b8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 80b6 	bne.w	8004d08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	f04f 0500 	mov.w	r5, #0
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	6439      	str	r1, [r7, #64]	; 0x40
 8004bac:	415b      	adcs	r3, r3
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bb4:	1912      	adds	r2, r2, r4
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	00d9      	lsls	r1, r3, #3
 8004bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc8:	00d0      	lsls	r0, r2, #3
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	1911      	adds	r1, r2, r4
 8004bd0:	6639      	str	r1, [r7, #96]	; 0x60
 8004bd2:	416b      	adcs	r3, r5
 8004bd4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be4:	415b      	adcs	r3, r3
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004bf0:	f7fb faf0 	bl	80001d4 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4ba5      	ldr	r3, [pc, #660]	; (8004e90 <UART_SetConfig+0x38c>)
 8004bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	011e      	lsls	r6, r3, #4
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	461c      	mov	r4, r3
 8004c06:	f04f 0500 	mov.w	r5, #0
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	462b      	mov	r3, r5
 8004c0e:	1891      	adds	r1, r2, r2
 8004c10:	6339      	str	r1, [r7, #48]	; 0x30
 8004c12:	415b      	adcs	r3, r3
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
 8004c16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c1a:	1912      	adds	r2, r2, r4
 8004c1c:	eb45 0303 	adc.w	r3, r5, r3
 8004c20:	f04f 0000 	mov.w	r0, #0
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	00d9      	lsls	r1, r3, #3
 8004c2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2e:	00d0      	lsls	r0, r2, #3
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	1911      	adds	r1, r2, r4
 8004c36:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c38:	416b      	adcs	r3, r5
 8004c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c56:	f7fb fabd 	bl	80001d4 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b8c      	ldr	r3, [pc, #560]	; (8004e90 <UART_SetConfig+0x38c>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a87      	ldr	r2, [pc, #540]	; (8004e90 <UART_SetConfig+0x38c>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c80:	441e      	add	r6, r3
 8004c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c84:	4618      	mov	r0, r3
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	1894      	adds	r4, r2, r2
 8004c90:	623c      	str	r4, [r7, #32]
 8004c92:	415b      	adcs	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9a:	1812      	adds	r2, r2, r0
 8004c9c:	eb41 0303 	adc.w	r3, r1, r3
 8004ca0:	f04f 0400 	mov.w	r4, #0
 8004ca4:	f04f 0500 	mov.w	r5, #0
 8004ca8:	00dd      	lsls	r5, r3, #3
 8004caa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cae:	00d4      	lsls	r4, r2, #3
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	462b      	mov	r3, r5
 8004cb4:	1814      	adds	r4, r2, r0
 8004cb6:	653c      	str	r4, [r7, #80]	; 0x50
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	61b9      	str	r1, [r7, #24]
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cd6:	f7fb fa7d 	bl	80001d4 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4b6c      	ldr	r3, [pc, #432]	; (8004e90 <UART_SetConfig+0x38c>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a67      	ldr	r2, [pc, #412]	; (8004e90 <UART_SetConfig+0x38c>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 0207 	and.w	r2, r3, #7
 8004cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4432      	add	r2, r6
 8004d04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d06:	e0b9      	b.n	8004e7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	f04f 0500 	mov.w	r5, #0
 8004d10:	4622      	mov	r2, r4
 8004d12:	462b      	mov	r3, r5
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	6139      	str	r1, [r7, #16]
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d20:	1912      	adds	r2, r2, r4
 8004d22:	eb45 0303 	adc.w	r3, r5, r3
 8004d26:	f04f 0000 	mov.w	r0, #0
 8004d2a:	f04f 0100 	mov.w	r1, #0
 8004d2e:	00d9      	lsls	r1, r3, #3
 8004d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d34:	00d0      	lsls	r0, r2, #3
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	eb12 0804 	adds.w	r8, r2, r4
 8004d3e:	eb43 0905 	adc.w	r9, r3, r5
 8004d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	008b      	lsls	r3, r1, #2
 8004d56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d5a:	0082      	lsls	r2, r0, #2
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fa38 	bl	80001d4 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <UART_SetConfig+0x38c>)
 8004d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	011e      	lsls	r6, r3, #4
 8004d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d74:	4618      	mov	r0, r3
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	1894      	adds	r4, r2, r2
 8004d80:	60bc      	str	r4, [r7, #8]
 8004d82:	415b      	adcs	r3, r3
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d8a:	1812      	adds	r2, r2, r0
 8004d8c:	eb41 0303 	adc.w	r3, r1, r3
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	f04f 0500 	mov.w	r5, #0
 8004d98:	00dd      	lsls	r5, r3, #3
 8004d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d9e:	00d4      	lsls	r4, r2, #3
 8004da0:	4622      	mov	r2, r4
 8004da2:	462b      	mov	r3, r5
 8004da4:	1814      	adds	r4, r2, r0
 8004da6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004da8:	414b      	adcs	r3, r1
 8004daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	008b      	lsls	r3, r1, #2
 8004dc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc4:	0082      	lsls	r2, r0, #2
 8004dc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dca:	f7fb fa03 	bl	80001d4 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <UART_SetConfig+0x38c>)
 8004dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2164      	movs	r1, #100	; 0x64
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	3332      	adds	r3, #50	; 0x32
 8004de6:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <UART_SetConfig+0x38c>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df2:	441e      	add	r6, r3
 8004df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df6:	4618      	mov	r0, r3
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	1894      	adds	r4, r2, r2
 8004e02:	603c      	str	r4, [r7, #0]
 8004e04:	415b      	adcs	r3, r3
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0c:	1812      	adds	r2, r2, r0
 8004e0e:	eb41 0303 	adc.w	r3, r1, r3
 8004e12:	f04f 0400 	mov.w	r4, #0
 8004e16:	f04f 0500 	mov.w	r5, #0
 8004e1a:	00dd      	lsls	r5, r3, #3
 8004e1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e20:	00d4      	lsls	r4, r2, #3
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	eb12 0a00 	adds.w	sl, r2, r0
 8004e2a:	eb43 0b01 	adc.w	fp, r3, r1
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	008b      	lsls	r3, r1, #2
 8004e42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e46:	0082      	lsls	r2, r0, #2
 8004e48:	4650      	mov	r0, sl
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	f7fb f9c2 	bl	80001d4 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <UART_SetConfig+0x38c>)
 8004e56:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	2164      	movs	r1, #100	; 0x64
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	3332      	adds	r3, #50	; 0x32
 8004e68:	4a09      	ldr	r2, [pc, #36]	; (8004e90 <UART_SetConfig+0x38c>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	f003 020f 	and.w	r2, r3, #15
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4432      	add	r2, r6
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	377c      	adds	r7, #124	; 0x7c
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e86:	bf00      	nop
 8004e88:	40011000 	.word	0x40011000
 8004e8c:	40011400 	.word	0x40011400
 8004e90:	51eb851f 	.word	0x51eb851f

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	; (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	; (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f000 f820 	bl	8004eec <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	08004f2c 	.word	0x08004f2c
 8004ed0:	08004f2c 	.word	0x08004f2c
 8004ed4:	08004f2c 	.word	0x08004f2c
 8004ed8:	08004f30 	.word	0x08004f30

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	bf00      	nop
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
